
BLEObserver_Sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c7c0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000098  20000000  0000c7c0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00018098  2**0
                  CONTENTS
  3 .bss          0000218c  20000098  0000c858  00018098  2**2
                  ALLOC
  4 .stack        00002004  20002224  0000e9e4  00018098  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00018098  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000180c0  2**0
                  CONTENTS, READONLY
  7 .debug_info   00023de0  00000000  00000000  0001811b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000042b9  00000000  00000000  0003befb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f42f  00000000  00000000  000401b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000fb8  00000000  00000000  0004f5e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000012a8  00000000  00000000  0005059b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001eaf0  00000000  00000000  00051843  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000140dc  00000000  00000000  00070333  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00098d3b  00000000  00000000  0008440f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000030fc  00000000  00000000  0011d14c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20004228 	.word	0x20004228
       4:	00000c79 	.word	0x00000c79
       8:	00000c75 	.word	0x00000c75
       c:	00000c75 	.word	0x00000c75
	...
      2c:	00000c75 	.word	0x00000c75
	...
      38:	00000c75 	.word	0x00000c75
      3c:	00000c75 	.word	0x00000c75
      40:	00000c75 	.word	0x00000c75
      44:	00000c75 	.word	0x00000c75
      48:	00000c75 	.word	0x00000c75
      4c:	00000349 	.word	0x00000349
      50:	00000c75 	.word	0x00000c75
      54:	00000c75 	.word	0x00000c75
      58:	00000c75 	.word	0x00000c75
      5c:	00000c75 	.word	0x00000c75
      60:	000002c9 	.word	0x000002c9
      64:	00000c75 	.word	0x00000c75
      68:	00000c75 	.word	0x00000c75
      6c:	000002e9 	.word	0x000002e9
      70:	00000309 	.word	0x00000309
      74:	00000c75 	.word	0x00000c75
      78:	00000c75 	.word	0x00000c75
      7c:	00000c75 	.word	0x00000c75
      80:	00000c75 	.word	0x00000c75
      84:	00000329 	.word	0x00000329
      88:	00000c75 	.word	0x00000c75
      8c:	00000c75 	.word	0x00000c75
      90:	00000c75 	.word	0x00000c75
      94:	00000c75 	.word	0x00000c75
      98:	00000c75 	.word	0x00000c75
      9c:	00000c75 	.word	0x00000c75
      a0:	00000c75 	.word	0x00000c75
      a4:	00000c75 	.word	0x00000c75
      a8:	00000c75 	.word	0x00000c75
      ac:	00000c75 	.word	0x00000c75
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000098 	.word	0x20000098
      d4:	00000000 	.word	0x00000000
      d8:	0000c7c0 	.word	0x0000c7c0

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	0000c7c0 	.word	0x0000c7c0
     108:	2000009c 	.word	0x2000009c
     10c:	0000c7c0 	.word	0x0000c7c0
     110:	00000000 	.word	0x00000000

00000114 <BLE_FC_UART_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->PCHCTRL[index].reg = data;
     114:	4b05      	ldr	r3, [pc, #20]	; (12c <BLE_FC_UART_CLOCK_init+0x18>)
     116:	2240      	movs	r2, #64	; 0x40
     118:	21c8      	movs	r1, #200	; 0xc8
     11a:	505a      	str	r2, [r3, r1]
     11c:	3904      	subs	r1, #4
     11e:	505a      	str	r2, [r3, r1]
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw) 
{
        MCLK_CRITICAL_SECTION_ENTER();
        ((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     120:	4a03      	ldr	r2, [pc, #12]	; (130 <BLE_FC_UART_CLOCK_init+0x1c>)
     122:	69d1      	ldr	r1, [r2, #28]
     124:	2301      	movs	r3, #1
     126:	430b      	orrs	r3, r1
     128:	61d3      	str	r3, [r2, #28]
			SERCOM0_GCLK_ID_SLOW,
			CONF_GCLK_SERCOM0_SLOW_SRC |
			( 1 << GCLK_PCHCTRL_CHEN_Pos ));

	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
}
     12a:	4770      	bx	lr
     12c:	40001800 	.word	0x40001800
     130:	40000400 	.word	0x40000400

00000134 <BLE_FC_UART_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void BLE_FC_UART_PORT_init()
{
     134:	b510      	push	{r4, lr}
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     136:	2004      	movs	r0, #4
     138:	4906      	ldr	r1, [pc, #24]	; (154 <BLE_FC_UART_PORT_init+0x20>)
     13a:	4c07      	ldr	r4, [pc, #28]	; (158 <BLE_FC_UART_PORT_init+0x24>)
     13c:	47a0      	blx	r4
     13e:	2005      	movs	r0, #5
     140:	4906      	ldr	r1, [pc, #24]	; (15c <BLE_FC_UART_PORT_init+0x28>)
     142:	47a0      	blx	r4
     144:	2006      	movs	r0, #6
     146:	4906      	ldr	r1, [pc, #24]	; (160 <BLE_FC_UART_PORT_init+0x2c>)
     148:	47a0      	blx	r4
     14a:	2007      	movs	r0, #7
     14c:	4905      	ldr	r1, [pc, #20]	; (164 <BLE_FC_UART_PORT_init+0x30>)
     14e:	47a0      	blx	r4
	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);

	gpio_set_pin_function(PA07, PINMUX_PA07D_SERCOM0_PAD3);
}
     150:	bd10      	pop	{r4, pc}
     152:	46c0      	nop			; (mov r8, r8)
     154:	00040003 	.word	0x00040003
     158:	00001de9 	.word	0x00001de9
     15c:	00050003 	.word	0x00050003
     160:	00060003 	.word	0x00060003
     164:	00070003 	.word	0x00070003

00000168 <BLE_FC_UART_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void BLE_FC_UART_init(void)
{
     168:	b510      	push	{r4, lr}
	BLE_FC_UART_CLOCK_init();
     16a:	4b06      	ldr	r3, [pc, #24]	; (184 <BLE_FC_UART_init+0x1c>)
     16c:	4798      	blx	r3
	usart_async_init(&BLE_FC_UART,
     16e:	4806      	ldr	r0, [pc, #24]	; (188 <BLE_FC_UART_init+0x20>)
     170:	2184      	movs	r1, #132	; 0x84
     172:	05c9      	lsls	r1, r1, #23
     174:	4a05      	ldr	r2, [pc, #20]	; (18c <BLE_FC_UART_init+0x24>)
     176:	2310      	movs	r3, #16
     178:	4c05      	ldr	r4, [pc, #20]	; (190 <BLE_FC_UART_init+0x28>)
     17a:	47a0      	blx	r4
			SERCOM0,
			BLE_FC_UART_buffer,
			BLE_FC_UART_BUFFER_SIZE);
	BLE_FC_UART_PORT_init();
     17c:	4b05      	ldr	r3, [pc, #20]	; (194 <BLE_FC_UART_init+0x2c>)
     17e:	4798      	blx	r3
}
     180:	bd10      	pop	{r4, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	00000115 	.word	0x00000115
     188:	20000df8 	.word	0x20000df8
     18c:	200000b4 	.word	0x200000b4
     190:	0000135d 	.word	0x0000135d
     194:	00000135 	.word	0x00000135

00000198 <CONSOLE_UART_PORT_init>:

void CONSOLE_UART_PORT_init(void)
{
     198:	b510      	push	{r4, lr}
     19a:	2016      	movs	r0, #22
     19c:	4903      	ldr	r1, [pc, #12]	; (1ac <CONSOLE_UART_PORT_init+0x14>)
     19e:	4c04      	ldr	r4, [pc, #16]	; (1b0 <CONSOLE_UART_PORT_init+0x18>)
     1a0:	47a0      	blx	r4
     1a2:	2017      	movs	r0, #23
     1a4:	4903      	ldr	r1, [pc, #12]	; (1b4 <CONSOLE_UART_PORT_init+0x1c>)
     1a6:	47a0      	blx	r4
	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     1a8:	bd10      	pop	{r4, pc}
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	00160002 	.word	0x00160002
     1b0:	00001de9 	.word	0x00001de9
     1b4:	00170002 	.word	0x00170002

000001b8 <CONSOLE_UART_CLOCK_init>:
     1b8:	4b05      	ldr	r3, [pc, #20]	; (1d0 <CONSOLE_UART_CLOCK_init+0x18>)
     1ba:	2240      	movs	r2, #64	; 0x40
     1bc:	21d4      	movs	r1, #212	; 0xd4
     1be:	505a      	str	r2, [r3, r1]
     1c0:	3910      	subs	r1, #16
     1c2:	505a      	str	r2, [r3, r1]
}

static inline void hri_mclk_set_APBCMASK_SERCOM3_bit(const void *const hw) 
{
        MCLK_CRITICAL_SECTION_ENTER();
        ((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
     1c4:	4a03      	ldr	r2, [pc, #12]	; (1d4 <CONSOLE_UART_CLOCK_init+0x1c>)
     1c6:	69d1      	ldr	r1, [r2, #28]
     1c8:	2308      	movs	r3, #8
     1ca:	430b      	orrs	r3, r1
     1cc:	61d3      	str	r3, [r2, #28]
			SERCOM3_GCLK_ID_SLOW,
			CONF_GCLK_SERCOM3_SLOW_SRC |
			( 1 << GCLK_PCHCTRL_CHEN_Pos ));

	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
}
     1ce:	4770      	bx	lr
     1d0:	40001800 	.word	0x40001800
     1d4:	40000400 	.word	0x40000400

000001d8 <CONSOLE_UART_init>:

void CONSOLE_UART_init(void)
{
     1d8:	b508      	push	{r3, lr}
	CONSOLE_UART_CLOCK_init();
     1da:	4b04      	ldr	r3, [pc, #16]	; (1ec <CONSOLE_UART_init+0x14>)
     1dc:	4798      	blx	r3
	usart_sync_init(&CONSOLE_UART, SERCOM3);
     1de:	4804      	ldr	r0, [pc, #16]	; (1f0 <CONSOLE_UART_init+0x18>)
     1e0:	4904      	ldr	r1, [pc, #16]	; (1f4 <CONSOLE_UART_init+0x1c>)
     1e2:	4b05      	ldr	r3, [pc, #20]	; (1f8 <CONSOLE_UART_init+0x20>)
     1e4:	4798      	blx	r3
	CONSOLE_UART_PORT_init();
     1e6:	4b05      	ldr	r3, [pc, #20]	; (1fc <CONSOLE_UART_init+0x24>)
     1e8:	4798      	blx	r3
}
     1ea:	bd08      	pop	{r3, pc}
     1ec:	000001b9 	.word	0x000001b9
     1f0:	20000e48 	.word	0x20000e48
     1f4:	42000c00 	.word	0x42000c00
     1f8:	00001655 	.word	0x00001655
     1fc:	00000199 	.word	0x00000199

00000200 <BLE_UART_CLOCK_init>:
     200:	4b05      	ldr	r3, [pc, #20]	; (218 <BLE_UART_CLOCK_init+0x18>)
     202:	2240      	movs	r2, #64	; 0x40
     204:	21d8      	movs	r1, #216	; 0xd8
     206:	505a      	str	r2, [r3, r1]
     208:	3914      	subs	r1, #20
     20a:	505a      	str	r2, [r3, r1]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw) 
{
        MCLK_CRITICAL_SECTION_ENTER();
        ((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     20c:	4a03      	ldr	r2, [pc, #12]	; (21c <BLE_UART_CLOCK_init+0x1c>)
     20e:	69d1      	ldr	r1, [r2, #28]
     210:	2310      	movs	r3, #16
     212:	430b      	orrs	r3, r1
     214:	61d3      	str	r3, [r2, #28]
			SERCOM4_GCLK_ID_SLOW,
			CONF_GCLK_SERCOM4_SLOW_SRC |
			( 1 << GCLK_PCHCTRL_CHEN_Pos ));

	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     216:	4770      	bx	lr
     218:	40001800 	.word	0x40001800
     21c:	40000400 	.word	0x40000400

00000220 <BLE_UART_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void BLE_UART_PORT_init()
{
     220:	b510      	push	{r4, lr}
     222:	2028      	movs	r0, #40	; 0x28
     224:	4903      	ldr	r1, [pc, #12]	; (234 <BLE_UART_PORT_init+0x14>)
     226:	4c04      	ldr	r4, [pc, #16]	; (238 <BLE_UART_PORT_init+0x18>)
     228:	47a0      	blx	r4
     22a:	2029      	movs	r0, #41	; 0x29
     22c:	4903      	ldr	r1, [pc, #12]	; (23c <BLE_UART_PORT_init+0x1c>)
     22e:	47a0      	blx	r4
	gpio_set_pin_function(PB08, PINMUX_PB08D_SERCOM4_PAD0);

	gpio_set_pin_function(PB09, PINMUX_PB09D_SERCOM4_PAD1);
}
     230:	bd10      	pop	{r4, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	00280003 	.word	0x00280003
     238:	00001de9 	.word	0x00001de9
     23c:	00290003 	.word	0x00290003

00000240 <BLE_UART_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void BLE_UART_init(void)
{
     240:	b510      	push	{r4, lr}
	BLE_UART_CLOCK_init();
     242:	4b06      	ldr	r3, [pc, #24]	; (25c <BLE_UART_init+0x1c>)
     244:	4798      	blx	r3
	usart_async_init(&BLE_UART, SERCOM4, BLE_UART_buffer, BLE_UART_BUFFER_SIZE);
     246:	4806      	ldr	r0, [pc, #24]	; (260 <BLE_UART_init+0x20>)
     248:	4906      	ldr	r1, [pc, #24]	; (264 <BLE_UART_init+0x24>)
     24a:	4a07      	ldr	r2, [pc, #28]	; (268 <BLE_UART_init+0x28>)
     24c:	3210      	adds	r2, #16
     24e:	2310      	movs	r3, #16
     250:	4c06      	ldr	r4, [pc, #24]	; (26c <BLE_UART_init+0x2c>)
     252:	47a0      	blx	r4
	BLE_UART_PORT_init();
     254:	4b06      	ldr	r3, [pc, #24]	; (270 <BLE_UART_init+0x30>)
     256:	4798      	blx	r3
}
     258:	bd10      	pop	{r4, pc}
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	00000201 	.word	0x00000201
     260:	20000e54 	.word	0x20000e54
     264:	42001000 	.word	0x42001000
     268:	200000b4 	.word	0x200000b4
     26c:	0000135d 	.word	0x0000135d
     270:	00000221 	.word	0x00000221

00000274 <EXTERNAL_IRQ_0_init>:

	timer_init(&TIMER_0, TC0, _tc_get_timer());
}

void EXTERNAL_IRQ_0_init(void)
{
     274:	b508      	push	{r3, lr}
     276:	2140      	movs	r1, #64	; 0x40
     278:	238c      	movs	r3, #140	; 0x8c
     27a:	4a0d      	ldr	r2, [pc, #52]	; (2b0 <EXTERNAL_IRQ_0_init+0x3c>)
     27c:	50d1      	str	r1, [r2, r3]
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw) 
{
        MCLK_CRITICAL_SECTION_ENTER();
        ((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     27e:	4a0d      	ldr	r2, [pc, #52]	; (2b4 <EXTERNAL_IRQ_0_init+0x40>)
     280:	6953      	ldr	r3, [r2, #20]
     282:	31c1      	adds	r1, #193	; 0xc1
     284:	31ff      	adds	r1, #255	; 0xff
     286:	430b      	orrs	r3, r1
     288:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC |
			( 1 << GCLK_PCHCTRL_CHEN_Pos ));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
     28a:	4b0b      	ldr	r3, [pc, #44]	; (2b8 <EXTERNAL_IRQ_0_init+0x44>)
     28c:	4798      	blx	r3
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     28e:	2000      	movs	r0, #0
     290:	2104      	movs	r1, #4
     292:	2201      	movs	r2, #1
     294:	4b09      	ldr	r3, [pc, #36]	; (2bc <EXTERNAL_IRQ_0_init+0x48>)
     296:	4798      	blx	r3
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin,
		const enum gpio_pull_mode pull_mode)
{
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     298:	2000      	movs	r0, #0
     29a:	2102      	movs	r1, #2
     29c:	2201      	movs	r2, #1
     29e:	4b08      	ldr	r3, [pc, #32]	; (2c0 <EXTERNAL_IRQ_0_init+0x4c>)
     2a0:	4798      	blx	r3
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     2a2:	2002      	movs	r0, #2
     2a4:	2180      	movs	r1, #128	; 0x80
     2a6:	0289      	lsls	r1, r1, #10
     2a8:	4b06      	ldr	r3, [pc, #24]	; (2c4 <EXTERNAL_IRQ_0_init+0x50>)
     2aa:	4798      	blx	r3
	        // <GPIO_PULL_UP"> Pull-up
	        // <GPIO_PULL_DOWN"> Pull-down
			GPIO_PULL_UP);

	gpio_set_pin_function(BLE_APP_SW, PINMUX_PA02A_EIC_EXTINT2);
}
     2ac:	bd08      	pop	{r3, pc}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	40001800 	.word	0x40001800
     2b4:	40000400 	.word	0x40000400
     2b8:	00000db5 	.word	0x00000db5
     2bc:	00001c91 	.word	0x00001c91
     2c0:	00001d69 	.word	0x00001d69
     2c4:	00001de9 	.word	0x00001de9

000002c8 <SERCOM0_Handler>:

void SERCOM0_Handler(void)
{
     2c8:	b508      	push	{r3, lr}
	if (_irq_table[ SERCOM0_IRQn + 0 ]) {
     2ca:	4b05      	ldr	r3, [pc, #20]	; (2e0 <SERCOM0_Handler+0x18>)
     2cc:	6a1b      	ldr	r3, [r3, #32]
     2ce:	2b00      	cmp	r3, #0
     2d0:	d003      	beq.n	2da <SERCOM0_Handler+0x12>
		_irq_table[ SERCOM0_IRQn + 0 ]->handler(
     2d2:	6858      	ldr	r0, [r3, #4]
     2d4:	681b      	ldr	r3, [r3, #0]
     2d6:	4798      	blx	r3
     2d8:	e001      	b.n	2de <SERCOM0_Handler+0x16>
				_irq_table[ SERCOM0_IRQn + 0 ]->parameter);
	} else {
		Default_Handler();
     2da:	4b02      	ldr	r3, [pc, #8]	; (2e4 <SERCOM0_Handler+0x1c>)
     2dc:	4798      	blx	r3
	}
}
     2de:	bd08      	pop	{r3, pc}
     2e0:	20000ec4 	.word	0x20000ec4
     2e4:	00001949 	.word	0x00001949

000002e8 <SERCOM3_Handler>:
void SERCOM3_Handler(void)
{
     2e8:	b508      	push	{r3, lr}
	if (_irq_table[ SERCOM0_IRQn + 3 ]) {
     2ea:	4b05      	ldr	r3, [pc, #20]	; (300 <SERCOM3_Handler+0x18>)
     2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     2ee:	2b00      	cmp	r3, #0
     2f0:	d003      	beq.n	2fa <SERCOM3_Handler+0x12>
		_irq_table[ SERCOM0_IRQn + 3 ]->handler(
     2f2:	6858      	ldr	r0, [r3, #4]
     2f4:	681b      	ldr	r3, [r3, #0]
     2f6:	4798      	blx	r3
     2f8:	e001      	b.n	2fe <SERCOM3_Handler+0x16>
				_irq_table[ SERCOM0_IRQn + 3 ]->parameter);
	} else {
		Default_Handler();
     2fa:	4b02      	ldr	r3, [pc, #8]	; (304 <SERCOM3_Handler+0x1c>)
     2fc:	4798      	blx	r3
	}
}
     2fe:	bd08      	pop	{r3, pc}
     300:	20000ec4 	.word	0x20000ec4
     304:	00001949 	.word	0x00001949

00000308 <SERCOM4_Handler>:
void SERCOM4_Handler(void)
{
     308:	b508      	push	{r3, lr}
	if (_irq_table[ SERCOM0_IRQn + 4 ]) {
     30a:	4b05      	ldr	r3, [pc, #20]	; (320 <SERCOM4_Handler+0x18>)
     30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     30e:	2b00      	cmp	r3, #0
     310:	d003      	beq.n	31a <SERCOM4_Handler+0x12>
		_irq_table[ SERCOM0_IRQn + 4 ]->handler(
     312:	6858      	ldr	r0, [r3, #4]
     314:	681b      	ldr	r3, [r3, #0]
     316:	4798      	blx	r3
     318:	e001      	b.n	31e <SERCOM4_Handler+0x16>
				_irq_table[ SERCOM0_IRQn + 4 ]->parameter);
	} else {
		Default_Handler();
     31a:	4b02      	ldr	r3, [pc, #8]	; (324 <SERCOM4_Handler+0x1c>)
     31c:	4798      	blx	r3
	}
}
     31e:	bd08      	pop	{r3, pc}
     320:	20000ec4 	.word	0x20000ec4
     324:	00001949 	.word	0x00001949

00000328 <TC0_Handler>:
void TC0_Handler(void)
{
     328:	b508      	push	{r3, lr}
	if (_irq_table[ TC0_IRQn + 0 ]) {
     32a:	4b05      	ldr	r3, [pc, #20]	; (340 <TC0_Handler+0x18>)
     32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     32e:	2b00      	cmp	r3, #0
     330:	d003      	beq.n	33a <TC0_Handler+0x12>
		_irq_table[ TC0_IRQn + 0 ]->handler(
     332:	6858      	ldr	r0, [r3, #4]
     334:	681b      	ldr	r3, [r3, #0]
     336:	4798      	blx	r3
     338:	e001      	b.n	33e <TC0_Handler+0x16>
				_irq_table[ TC0_IRQn + 0 ]->parameter);
	} else {
		Default_Handler();
     33a:	4b02      	ldr	r3, [pc, #8]	; (344 <TC0_Handler+0x1c>)
     33c:	4798      	blx	r3
	}
}
     33e:	bd08      	pop	{r3, pc}
     340:	20000ec4 	.word	0x20000ec4
     344:	00001949 	.word	0x00001949

00000348 <EIC_Handler>:
void EIC_Handler(void)
{
     348:	b508      	push	{r3, lr}
	if (_irq_table[ EIC_IRQn + 0 ]) {
     34a:	4b05      	ldr	r3, [pc, #20]	; (360 <EIC_Handler+0x18>)
     34c:	68db      	ldr	r3, [r3, #12]
     34e:	2b00      	cmp	r3, #0
     350:	d003      	beq.n	35a <EIC_Handler+0x12>
		_irq_table[ EIC_IRQn + 0 ]->handler(
     352:	6858      	ldr	r0, [r3, #4]
     354:	681b      	ldr	r3, [r3, #0]
     356:	4798      	blx	r3
     358:	e001      	b.n	35e <EIC_Handler+0x16>
				_irq_table[ EIC_IRQn + 0 ]->parameter);
	} else {
		Default_Handler();
     35a:	4b02      	ldr	r3, [pc, #8]	; (364 <EIC_Handler+0x1c>)
     35c:	4798      	blx	r3
	}
}
     35e:	bd08      	pop	{r3, pc}
     360:	20000ec4 	.word	0x20000ec4
     364:	00001949 	.word	0x00001949

00000368 <system_init>:
{
	ext_irq_register(PIN_PA02, button_on_PA02_pressed);
}

void system_init(void)
{
     368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     36a:	4b2d      	ldr	r3, [pc, #180]	; (420 <system_init+0xb8>)
     36c:	4798      	blx	r3
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     36e:	2000      	movs	r0, #0
     370:	2101      	movs	r1, #1
     372:	2202      	movs	r2, #2
     374:	4f2b      	ldr	r7, [pc, #172]	; (424 <system_init+0xbc>)
     376:	47b8      	blx	r7
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     378:	2000      	movs	r0, #0
     37a:	2101      	movs	r1, #1
     37c:	2200      	movs	r2, #0
     37e:	4e2a      	ldr	r6, [pc, #168]	; (428 <system_init+0xc0>)
     380:	47b0      	blx	r6
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     382:	2501      	movs	r5, #1
     384:	426d      	negs	r5, r5
     386:	2000      	movs	r0, #0
     388:	1c29      	adds	r1, r5, #0
     38a:	4c28      	ldr	r4, [pc, #160]	; (42c <system_init+0xc4>)
     38c:	47a0      	blx	r4
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     38e:	2000      	movs	r0, #0
     390:	2102      	movs	r1, #2
     392:	2202      	movs	r2, #2
     394:	47b8      	blx	r7
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     396:	2000      	movs	r0, #0
     398:	2102      	movs	r1, #2
     39a:	2200      	movs	r2, #0
     39c:	47b0      	blx	r6
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     39e:	2001      	movs	r0, #1
     3a0:	1c29      	adds	r1, r5, #0
     3a2:	47a0      	blx	r4
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     3a4:	2000      	movs	r0, #0
     3a6:	2108      	movs	r1, #8
     3a8:	2202      	movs	r2, #2
     3aa:	47b8      	blx	r7
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     3ac:	2000      	movs	r0, #0
     3ae:	2108      	movs	r1, #8
     3b0:	2200      	movs	r2, #0
     3b2:	47b0      	blx	r6
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     3b4:	2003      	movs	r0, #3
     3b6:	1c29      	adds	r1, r5, #0
     3b8:	47a0      	blx	r4
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     3ba:	2001      	movs	r0, #1
     3bc:	2180      	movs	r1, #128	; 0x80
     3be:	2202      	movs	r2, #2
     3c0:	47b8      	blx	r7
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     3c2:	2001      	movs	r0, #1
     3c4:	2180      	movs	r1, #128	; 0x80
     3c6:	2200      	movs	r2, #0
     3c8:	47b0      	blx	r6
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     3ca:	2027      	movs	r0, #39	; 0x27
     3cc:	1c29      	adds	r1, r5, #0
     3ce:	47a0      	blx	r4
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     3d0:	2001      	movs	r0, #1
     3d2:	2180      	movs	r1, #128	; 0x80
     3d4:	00c9      	lsls	r1, r1, #3
     3d6:	2202      	movs	r2, #2
     3d8:	47b8      	blx	r7
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     3da:	2001      	movs	r0, #1
     3dc:	2180      	movs	r1, #128	; 0x80
     3de:	00c9      	lsls	r1, r1, #3
     3e0:	2200      	movs	r2, #0
     3e2:	47b0      	blx	r6
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     3e4:	202a      	movs	r0, #42	; 0x2a
     3e6:	1c29      	adds	r1, r5, #0
     3e8:	47a0      	blx	r4
	        // <true"> High
			false);

	gpio_set_pin_function(BLE_APP_LED, GPIO_PIN_FUNCTION_OFF);

	BLE_FC_UART_init();
     3ea:	4b11      	ldr	r3, [pc, #68]	; (430 <system_init+0xc8>)
     3ec:	4798      	blx	r3

	CONSOLE_UART_init();
     3ee:	4b11      	ldr	r3, [pc, #68]	; (434 <system_init+0xcc>)
     3f0:	4798      	blx	r3
	BLE_UART_init();
     3f2:	4b11      	ldr	r3, [pc, #68]	; (438 <system_init+0xd0>)
     3f4:	4798      	blx	r3
}

static inline void hri_mclk_set_APBCMASK_TC0_bit(const void *const hw) 
{
        MCLK_CRITICAL_SECTION_ENTER();
        ((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     3f6:	4a11      	ldr	r2, [pc, #68]	; (43c <system_init+0xd4>)
     3f8:	69d3      	ldr	r3, [r2, #28]
     3fa:	2180      	movs	r1, #128	; 0x80
     3fc:	0049      	lsls	r1, r1, #1
     3fe:	430b      	orrs	r3, r1
     400:	61d3      	str	r3, [r2, #28]
     402:	39c0      	subs	r1, #192	; 0xc0
     404:	23ec      	movs	r3, #236	; 0xec
     406:	4a0e      	ldr	r2, [pc, #56]	; (440 <system_init+0xd8>)
     408:	50d1      	str	r1, [r2, r3]
{
	hri_mclk_set_APBCMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC |
			( 1 << GCLK_PCHCTRL_CHEN_Pos ));

	timer_init(&TIMER_0, TC0, _tc_get_timer());
     40a:	4b0e      	ldr	r3, [pc, #56]	; (444 <system_init+0xdc>)
     40c:	4798      	blx	r3
     40e:	1c02      	adds	r2, r0, #0
     410:	480d      	ldr	r0, [pc, #52]	; (448 <system_init+0xe0>)
     412:	490e      	ldr	r1, [pc, #56]	; (44c <system_init+0xe4>)
     414:	4b0e      	ldr	r3, [pc, #56]	; (450 <system_init+0xe8>)
     416:	4798      	blx	r3
	BLE_FC_UART_init();

	CONSOLE_UART_init();
	BLE_UART_init();
	TIMER_0_init();
	EXTERNAL_IRQ_0_init();
     418:	4b0e      	ldr	r3, [pc, #56]	; (454 <system_init+0xec>)
     41a:	4798      	blx	r3
}
     41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     41e:	46c0      	nop			; (mov r8, r8)
     420:	00001975 	.word	0x00001975
     424:	00001c91 	.word	0x00001c91
     428:	00001d35 	.word	0x00001d35
     42c:	00001de9 	.word	0x00001de9
     430:	00000169 	.word	0x00000169
     434:	000001d9 	.word	0x000001d9
     438:	00000241 	.word	0x00000241
     43c:	40000400 	.word	0x40000400
     440:	40001800 	.word	0x40001800
     444:	00002365 	.word	0x00002365
     448:	20000ea4 	.word	0x20000ea4
     44c:	42002000 	.word	0x42002000
     450:	00000fb5 	.word	0x00000fb5
     454:	00000275 	.word	0x00000275

00000458 <ble_wakeup_pin_set_low>:
#define IOPORT_PIN_LEVEL_LOW    ( false )
#define IOPORT_PIN_LEVEL_HIGH   ( true )

/* Set BLE Wakeup pin to be low */
void ble_wakeup_pin_set_low(void)
{
     458:	b508      	push	{r3, lr}
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     45a:	2001      	movs	r0, #1
     45c:	2180      	movs	r1, #128	; 0x80
     45e:	2200      	movs	r2, #0
     460:	4b01      	ldr	r3, [pc, #4]	; (468 <ble_wakeup_pin_set_low+0x10>)
     462:	4798      	blx	r3
	gpio_set_pin_level(BTLC1000_WAKEUP_PIN,
			IOPORT_PIN_LEVEL_LOW);
}
     464:	bd08      	pop	{r3, pc}
     466:	46c0      	nop			; (mov r8, r8)
     468:	00001d35 	.word	0x00001d35

0000046c <ble_wakeup_pin_set_high>:
	return ( gpio_get_pin_level(BTLC1000_WAKEUP_PIN));
}

/* Set wakeup pin to high */
void ble_wakeup_pin_set_high(void)
{
     46c:	b508      	push	{r3, lr}
     46e:	2001      	movs	r0, #1
     470:	2180      	movs	r1, #128	; 0x80
     472:	2201      	movs	r2, #1
     474:	4b01      	ldr	r3, [pc, #4]	; (47c <ble_wakeup_pin_set_high+0x10>)
     476:	4798      	blx	r3
	gpio_set_pin_level(BTLC1000_WAKEUP_PIN,
			IOPORT_PIN_LEVEL_HIGH);
}
     478:	bd08      	pop	{r3, pc}
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	00001d35 	.word	0x00001d35

00000480 <ble_enable_pin_set_low>:

/* Set enable pin to Low */
void ble_enable_pin_set_low(void)
{
     480:	b508      	push	{r3, lr}
     482:	2000      	movs	r0, #0
     484:	2108      	movs	r1, #8
     486:	2200      	movs	r2, #0
     488:	4b01      	ldr	r3, [pc, #4]	; (490 <ble_enable_pin_set_low+0x10>)
     48a:	4798      	blx	r3
	gpio_set_pin_level(BTLC1000_CHIP_ENABLE_PIN,
			IOPORT_PIN_LEVEL_LOW);
}
     48c:	bd08      	pop	{r3, pc}
     48e:	46c0      	nop			; (mov r8, r8)
     490:	00001d35 	.word	0x00001d35

00000494 <ble_enable_pin_set_high>:

/* Set enable pin to high */
void ble_enable_pin_set_high(void)
{
     494:	b508      	push	{r3, lr}
     496:	2000      	movs	r0, #0
     498:	2108      	movs	r1, #8
     49a:	2201      	movs	r2, #1
     49c:	4b01      	ldr	r3, [pc, #4]	; (4a4 <ble_enable_pin_set_high+0x10>)
     49e:	4798      	blx	r3
	gpio_set_pin_level(BTLC1000_CHIP_ENABLE_PIN,
			IOPORT_PIN_LEVEL_HIGH);
}
     4a0:	bd08      	pop	{r3, pc}
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	00001d35 	.word	0x00001d35

000004a8 <ble_configure_control_pin>:

/* Configure the BTLC1000 control(chip_enable, wakeup) pins */
void ble_configure_control_pin(void)
{
     4a8:	b570      	push	{r4, r5, r6, lr}
	/* initialize the delay before use */
	delay_init(NULL);
     4aa:	2000      	movs	r0, #0
     4ac:	4b0e      	ldr	r3, [pc, #56]	; (4e8 <ble_configure_control_pin+0x40>)
     4ae:	4798      	blx	r3
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     4b0:	2001      	movs	r0, #1
     4b2:	2180      	movs	r1, #128	; 0x80
     4b4:	2202      	movs	r2, #2
     4b6:	4e0d      	ldr	r6, [pc, #52]	; (4ec <ble_configure_control_pin+0x44>)
     4b8:	47b0      	blx	r6
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     4ba:	2501      	movs	r5, #1
     4bc:	426d      	negs	r5, r5
     4be:	2027      	movs	r0, #39	; 0x27
     4c0:	1c29      	adds	r1, r5, #0
     4c2:	4c0b      	ldr	r4, [pc, #44]	; (4f0 <ble_configure_control_pin+0x48>)
     4c4:	47a0      	blx	r4

	gpio_set_pin_direction(BTLC1000_WAKEUP_PIN, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(BTLC1000_WAKEUP_PIN, GPIO_PIN_FUNCTION_OFF);

	/* set wakeup pin to high */
	ble_wakeup_pin_set_high();
     4c6:	4b0b      	ldr	r3, [pc, #44]	; (4f4 <ble_configure_control_pin+0x4c>)
     4c8:	4798      	blx	r3
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
     4ca:	2000      	movs	r0, #0
     4cc:	2108      	movs	r1, #8
     4ce:	2202      	movs	r2, #2
     4d0:	47b0      	blx	r6
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     4d2:	2003      	movs	r0, #3
     4d4:	1c29      	adds	r1, r5, #0
     4d6:	47a0      	blx	r4

	gpio_set_pin_direction(BTLC1000_CHIP_ENABLE_PIN, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(BTLC1000_CHIP_ENABLE_PIN, GPIO_PIN_FUNCTION_OFF);

	/* set chip enable to low */
	ble_enable_pin_set_low();
     4d8:	4b07      	ldr	r3, [pc, #28]	; (4f8 <ble_configure_control_pin+0x50>)
     4da:	4798      	blx	r3

	/* Delay for 50ms */
	delay_ms(BTLC1000_RESET_MS);
     4dc:	2032      	movs	r0, #50	; 0x32
     4de:	4b07      	ldr	r3, [pc, #28]	; (4fc <ble_configure_control_pin+0x54>)
     4e0:	4798      	blx	r3

	/* set chip enable to high */
	ble_enable_pin_set_high();
     4e2:	4b07      	ldr	r3, [pc, #28]	; (500 <ble_configure_control_pin+0x58>)
     4e4:	4798      	blx	r3
}
     4e6:	bd70      	pop	{r4, r5, r6, pc}
     4e8:	00000d3d 	.word	0x00000d3d
     4ec:	00001c91 	.word	0x00001c91
     4f0:	00001de9 	.word	0x00001de9
     4f4:	0000046d 	.word	0x0000046d
     4f8:	00000481 	.word	0x00000481
     4fc:	00000d51 	.word	0x00000d51
     500:	00000495 	.word	0x00000495

00000504 <button_cb>:
static void app_timer2_cb(void);
static void startBeacon(void);

static void button_cb(void)
{
	button_pressed = true;
     504:	2201      	movs	r2, #1
     506:	4b01      	ldr	r3, [pc, #4]	; (50c <button_cb+0x8>)
     508:	701a      	strb	r2, [r3, #0]
}
     50a:	4770      	bx	lr
     50c:	200000fc 	.word	0x200000fc

00000510 <app_timer2_cb>:


static void app_timer2_cb(void)
{
	//Application may use this timer & callback
}
     510:	4770      	bx	lr
     512:	46c0      	nop			; (mov r8, r8)

00000514 <startBeacon>:
	NULL,							// AT_BLE_CON_CHANNEL_MAP_IND
	NULL,
	NULL
};

static void startBeacon(){
     514:	b510      	push	{r4, lr}
     516:	b084      	sub	sp, #16
	/*set Beacon advertisement data */
	at_ble_status_t _status;
	if((_status = at_ble_adv_data_set(adv_data, sizeof(adv_data), NULL, 0)) != AT_BLE_SUCCESS){
     518:	4811      	ldr	r0, [pc, #68]	; (560 <startBeacon+0x4c>)
     51a:	211b      	movs	r1, #27
     51c:	2200      	movs	r2, #0
     51e:	2300      	movs	r3, #0
     520:	4c10      	ldr	r4, [pc, #64]	; (564 <startBeacon+0x50>)
     522:	47a0      	blx	r4
     524:	1e01      	subs	r1, r0, #0
     526:	d003      	beq.n	530 <startBeacon+0x1c>
		printf("\nBLE Beacon advertisement data set failed =0x%x\n", _status);
     528:	480f      	ldr	r0, [pc, #60]	; (568 <startBeacon+0x54>)
     52a:	4b10      	ldr	r3, [pc, #64]	; (56c <startBeacon+0x58>)
     52c:	4798      	blx	r3
		while(1);
     52e:	e7fe      	b.n	52e <startBeacon+0x1a>
	}
	printf("\nBLE Beacon advertisement data set\n");
     530:	480f      	ldr	r0, [pc, #60]	; (570 <startBeacon+0x5c>)
     532:	4b10      	ldr	r3, [pc, #64]	; (574 <startBeacon+0x60>)
     534:	4798      	blx	r3
	
	
	
	if((_status = at_ble_adv_start(
     536:	23c8      	movs	r3, #200	; 0xc8
     538:	00db      	lsls	r3, r3, #3
     53a:	9300      	str	r3, [sp, #0]
     53c:	2300      	movs	r3, #0
     53e:	9301      	str	r3, [sp, #4]
     540:	9302      	str	r3, [sp, #8]
     542:	2003      	movs	r0, #3
     544:	2103      	movs	r1, #3
     546:	2200      	movs	r2, #0
     548:	4c0b      	ldr	r4, [pc, #44]	; (578 <startBeacon+0x64>)
     54a:	47a0      	blx	r4
     54c:	1e01      	subs	r1, r0, #0
     54e:	d002      	beq.n	556 <startBeacon+0x42>
	AT_BLE_ADV_FP_ANY,
	1600,
	0,
	false
	)) != AT_BLE_SUCCESS){
		printf("BLE Beacon advertisement failed =0x%x\n", _status);
     550:	480a      	ldr	r0, [pc, #40]	; (57c <startBeacon+0x68>)
     552:	4b06      	ldr	r3, [pc, #24]	; (56c <startBeacon+0x58>)
     554:	4798      	blx	r3
	}
	printf("\nBLE Beacon advertisement ok\n");
     556:	480a      	ldr	r0, [pc, #40]	; (580 <startBeacon+0x6c>)
     558:	4b06      	ldr	r3, [pc, #24]	; (574 <startBeacon+0x60>)
     55a:	4798      	blx	r3
	while(true){
		
	}
     55c:	e7fe      	b.n	55c <startBeacon+0x48>
     55e:	46c0      	nop			; (mov r8, r8)
     560:	20000000 	.word	0x20000000
     564:	000044cd 	.word	0x000044cd
     568:	00008668 	.word	0x00008668
     56c:	000074d9 	.word	0x000074d9
     570:	0000869c 	.word	0x0000869c
     574:	000075f9 	.word	0x000075f9
     578:	00004551 	.word	0x00004551
     57c:	000086c0 	.word	0x000086c0
     580:	000086e8 	.word	0x000086e8

00000584 <ble_observer_scan_info_handler>:
	ble_timer_start(BLE_APP_TIMER_ID1, MS_TIMER(2000), BLE_TIMER_REPEAT, app_timer1_cb);
}

/* Handler for Scan info data */
at_ble_status_t ble_observer_scan_info_handler(void * param)
{
     584:	b5f0      	push	{r4, r5, r6, r7, lr}
     586:	465f      	mov	r7, fp
     588:	4656      	mov	r6, sl
     58a:	464d      	mov	r5, r9
     58c:	4644      	mov	r4, r8
     58e:	b4f0      	push	{r4, r5, r6, r7}
     590:	b089      	sub	sp, #36	; 0x24
     592:	4682      	mov	sl, r0
	int8_t iterator;
	at_ble_scan_info_t *scan_info_data = (at_ble_scan_info_t *)param;

	DBG_LOG("%-28s", "\r\n\r\nAdvertisement type");
     594:	48c0      	ldr	r0, [pc, #768]	; (898 <ble_observer_scan_info_handler+0x314>)
     596:	4bc1      	ldr	r3, [pc, #772]	; (89c <ble_observer_scan_info_handler+0x318>)
     598:	4798      	blx	r3
     59a:	48c1      	ldr	r0, [pc, #772]	; (8a0 <ble_observer_scan_info_handler+0x31c>)
     59c:	49c1      	ldr	r1, [pc, #772]	; (8a4 <ble_observer_scan_info_handler+0x320>)
     59e:	4cc2      	ldr	r4, [pc, #776]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     5a0:	47a0      	blx	r4
	LED_Toggle();
     5a2:	4bc2      	ldr	r3, [pc, #776]	; (8ac <ble_observer_scan_info_handler+0x328>)
     5a4:	4798      	blx	r3
	DBG_LOG_CONT("    :  ");
     5a6:	48c2      	ldr	r0, [pc, #776]	; (8b0 <ble_observer_scan_info_handler+0x32c>)
     5a8:	47a0      	blx	r4
	switch (scan_info_data->type) {
     5aa:	4653      	mov	r3, sl
     5ac:	781b      	ldrb	r3, [r3, #0]
     5ae:	2b05      	cmp	r3, #5
     5b0:	d819      	bhi.n	5e6 <ble_observer_scan_info_handler+0x62>
     5b2:	4653      	mov	r3, sl
     5b4:	781b      	ldrb	r3, [r3, #0]
     5b6:	009b      	lsls	r3, r3, #2
     5b8:	4abe      	ldr	r2, [pc, #760]	; (8b4 <ble_observer_scan_info_handler+0x330>)
     5ba:	58d3      	ldr	r3, [r2, r3]
     5bc:	469f      	mov	pc, r3
	case AT_BLE_ADV_TYPE_UNDIRECTED:
		DBG_LOG_CONT("ADV_IND");
     5be:	48be      	ldr	r0, [pc, #760]	; (8b8 <ble_observer_scan_info_handler+0x334>)
     5c0:	4bb9      	ldr	r3, [pc, #740]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     5c2:	4798      	blx	r3
		break;
     5c4:	e012      	b.n	5ec <ble_observer_scan_info_handler+0x68>

	case AT_BLE_ADV_TYPE_DIRECTED:
		DBG_LOG_CONT("ADV_DIRECT_IND");
     5c6:	48bd      	ldr	r0, [pc, #756]	; (8bc <ble_observer_scan_info_handler+0x338>)
     5c8:	4bb7      	ldr	r3, [pc, #732]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     5ca:	4798      	blx	r3
		break;
     5cc:	e00e      	b.n	5ec <ble_observer_scan_info_handler+0x68>

	case AT_BLE_ADV_TYPE_SCANNABLE_UNDIRECTED:
		DBG_LOG_CONT("ADV_SCANNABLE_UNDIRECTED");
     5ce:	48bc      	ldr	r0, [pc, #752]	; (8c0 <ble_observer_scan_info_handler+0x33c>)
     5d0:	4bb5      	ldr	r3, [pc, #724]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     5d2:	4798      	blx	r3
		break;
     5d4:	e00a      	b.n	5ec <ble_observer_scan_info_handler+0x68>

	case AT_BLE_ADV_TYPE_NONCONN_UNDIRECTED:
		DBG_LOG_CONT("ADV_NONCONN_UNDIRECTED");
     5d6:	48bb      	ldr	r0, [pc, #748]	; (8c4 <ble_observer_scan_info_handler+0x340>)
     5d8:	4bb3      	ldr	r3, [pc, #716]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     5da:	4798      	blx	r3
		break;
     5dc:	e006      	b.n	5ec <ble_observer_scan_info_handler+0x68>

	case AT_BLE_ADV_TYPE_SCAN_RESPONSE:
		DBG_LOG_CONT("ADV_SCAN_RESPONSE");
     5de:	48ba      	ldr	r0, [pc, #744]	; (8c8 <ble_observer_scan_info_handler+0x344>)
     5e0:	4bb1      	ldr	r3, [pc, #708]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     5e2:	4798      	blx	r3
		break;
     5e4:	e002      	b.n	5ec <ble_observer_scan_info_handler+0x68>

	default:
		DBG_LOG_CONT("\r\n Unknown");
     5e6:	48b9      	ldr	r0, [pc, #740]	; (8cc <ble_observer_scan_info_handler+0x348>)
     5e8:	4baf      	ldr	r3, [pc, #700]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     5ea:	4798      	blx	r3
		break;
	}
	if(scan_info_data->type != AT_BLE_ADV_TYPE_SCAN_RESPONSE)
     5ec:	4653      	mov	r3, sl
     5ee:	781b      	ldrb	r3, [r3, #0]
     5f0:	2b05      	cmp	r3, #5
     5f2:	d003      	beq.n	5fc <ble_observer_scan_info_handler+0x78>
	{
		scan_device_count++;
     5f4:	4ab6      	ldr	r2, [pc, #728]	; (8d0 <ble_observer_scan_info_handler+0x34c>)
     5f6:	7813      	ldrb	r3, [r2, #0]
     5f8:	3301      	adds	r3, #1
     5fa:	7013      	strb	r3, [r2, #0]
	}

	/*Device Adress Type */
	DBG_LOG("%-28s", "Device address type");
     5fc:	48a6      	ldr	r0, [pc, #664]	; (898 <ble_observer_scan_info_handler+0x314>)
     5fe:	4ba7      	ldr	r3, [pc, #668]	; (89c <ble_observer_scan_info_handler+0x318>)
     600:	4798      	blx	r3
     602:	48a7      	ldr	r0, [pc, #668]	; (8a0 <ble_observer_scan_info_handler+0x31c>)
     604:	49b3      	ldr	r1, [pc, #716]	; (8d4 <ble_observer_scan_info_handler+0x350>)
     606:	4ca8      	ldr	r4, [pc, #672]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     608:	47a0      	blx	r4
	DBG_LOG_CONT(":  ");
     60a:	48b3      	ldr	r0, [pc, #716]	; (8d8 <ble_observer_scan_info_handler+0x354>)
     60c:	47a0      	blx	r4
	switch (scan_info_data->dev_addr.type) {
     60e:	4653      	mov	r3, sl
     610:	785b      	ldrb	r3, [r3, #1]
     612:	2b01      	cmp	r3, #1
     614:	d00a      	beq.n	62c <ble_observer_scan_info_handler+0xa8>
     616:	2b00      	cmp	r3, #0
     618:	d004      	beq.n	624 <ble_observer_scan_info_handler+0xa0>
     61a:	2b02      	cmp	r3, #2
     61c:	d00a      	beq.n	634 <ble_observer_scan_info_handler+0xb0>
     61e:	2b03      	cmp	r3, #3
     620:	d00c      	beq.n	63c <ble_observer_scan_info_handler+0xb8>
     622:	e00f      	b.n	644 <ble_observer_scan_info_handler+0xc0>
	case AT_BLE_ADDRESS_PUBLIC:
		DBG_LOG_CONT("PUBLIC_ADDRESS");
     624:	48ad      	ldr	r0, [pc, #692]	; (8dc <ble_observer_scan_info_handler+0x358>)
     626:	4ba0      	ldr	r3, [pc, #640]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     628:	4798      	blx	r3
		break;
     62a:	e00e      	b.n	64a <ble_observer_scan_info_handler+0xc6>

	case AT_BLE_ADDRESS_RANDOM_STATIC:
		DBG_LOG_CONT("STATIC_RANDOM_ADDRESS");
     62c:	48ac      	ldr	r0, [pc, #688]	; (8e0 <ble_observer_scan_info_handler+0x35c>)
     62e:	4b9e      	ldr	r3, [pc, #632]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     630:	4798      	blx	r3
		break;
     632:	e00a      	b.n	64a <ble_observer_scan_info_handler+0xc6>

	case AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE:
		DBG_LOG_CONT("RANDOM_RESOLVABLE_PRIVATE_ADDRESS");
     634:	48ab      	ldr	r0, [pc, #684]	; (8e4 <ble_observer_scan_info_handler+0x360>)
     636:	4b9c      	ldr	r3, [pc, #624]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     638:	4798      	blx	r3
		break;
     63a:	e006      	b.n	64a <ble_observer_scan_info_handler+0xc6>

	case AT_BLE_ADDRESS_RANDOM_PRIVATE_NON_RESOLVABLE:
		DBG_LOG_CONT("RANDOM_NON_RESOLVABLE_PRIVATE_ADDRESS");
     63c:	48aa      	ldr	r0, [pc, #680]	; (8e8 <ble_observer_scan_info_handler+0x364>)
     63e:	4b9a      	ldr	r3, [pc, #616]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     640:	4798      	blx	r3
		break;
     642:	e002      	b.n	64a <ble_observer_scan_info_handler+0xc6>

	default:
		DBG_LOG_CONT(" Unknown");
     644:	48a9      	ldr	r0, [pc, #676]	; (8ec <ble_observer_scan_info_handler+0x368>)
     646:	4b98      	ldr	r3, [pc, #608]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     648:	4798      	blx	r3
	}

	/*Device Address */
	DBG_LOG("%-28s", "Device address");
     64a:	4893      	ldr	r0, [pc, #588]	; (898 <ble_observer_scan_info_handler+0x314>)
     64c:	4b93      	ldr	r3, [pc, #588]	; (89c <ble_observer_scan_info_handler+0x318>)
     64e:	4798      	blx	r3
     650:	4893      	ldr	r0, [pc, #588]	; (8a0 <ble_observer_scan_info_handler+0x31c>)
     652:	49a7      	ldr	r1, [pc, #668]	; (8f0 <ble_observer_scan_info_handler+0x36c>)
     654:	4c94      	ldr	r4, [pc, #592]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     656:	47a0      	blx	r4
	DBG_LOG_CONT(":  0x");
     658:	48a6      	ldr	r0, [pc, #664]	; (8f4 <ble_observer_scan_info_handler+0x370>)
     65a:	47a0      	blx	r4
     65c:	4653      	mov	r3, sl
     65e:	1ddc      	adds	r4, r3, #7
     660:	1c5f      	adds	r7, r3, #1
	for (iterator = 5; iterator >= 0; iterator--) {
		DBG_LOG_CONT("%02x", scan_info_data->dev_addr.addr[iterator]);
     662:	4da5      	ldr	r5, [pc, #660]	; (8f8 <ble_observer_scan_info_handler+0x374>)
     664:	4e90      	ldr	r6, [pc, #576]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     666:	7821      	ldrb	r1, [r4, #0]
     668:	1c28      	adds	r0, r5, #0
     66a:	47b0      	blx	r6
     66c:	3c01      	subs	r4, #1
	}

	/*Device Address */
	DBG_LOG("%-28s", "Device address");
	DBG_LOG_CONT(":  0x");
	for (iterator = 5; iterator >= 0; iterator--) {
     66e:	42bc      	cmp	r4, r7
     670:	d1f9      	bne.n	666 <ble_observer_scan_info_handler+0xe2>
		DBG_LOG_CONT("%02x", scan_info_data->dev_addr.addr[iterator]);
	}
	
	DBG_LOG("%-28s", "RSSI");
     672:	4889      	ldr	r0, [pc, #548]	; (898 <ble_observer_scan_info_handler+0x314>)
     674:	4b89      	ldr	r3, [pc, #548]	; (89c <ble_observer_scan_info_handler+0x318>)
     676:	4798      	blx	r3
     678:	4889      	ldr	r0, [pc, #548]	; (8a0 <ble_observer_scan_info_handler+0x31c>)
     67a:	49a0      	ldr	r1, [pc, #640]	; (8fc <ble_observer_scan_info_handler+0x378>)
     67c:	4c8a      	ldr	r4, [pc, #552]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     67e:	47a0      	blx	r4
	DBG_LOG_CONT(":  %d",scan_info_data->rssi);
     680:	2328      	movs	r3, #40	; 0x28
     682:	4652      	mov	r2, sl
     684:	56d1      	ldrsb	r1, [r2, r3]
     686:	489e      	ldr	r0, [pc, #632]	; (900 <ble_observer_scan_info_handler+0x37c>)
     688:	47a0      	blx	r4
	
	if (scan_info_data->adv_data_len) {
     68a:	2327      	movs	r3, #39	; 0x27
     68c:	4652      	mov	r2, sl
     68e:	5cd3      	ldrb	r3, [r2, r3]
     690:	469b      	mov	fp, r3
     692:	2b00      	cmp	r3, #0
     694:	d100      	bne.n	698 <ble_observer_scan_info_handler+0x114>
     696:	e237      	b.n	b08 <ble_observer_scan_info_handler+0x584>
		uint8_t index = 0;
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
     698:	2300      	movs	r3, #0
     69a:	aa02      	add	r2, sp, #8
     69c:	7013      	strb	r3, [r2, #0]
     69e:	4698      	mov	r8, r3
		
		while (adv_data_size) {
			adv_element_data.len = scan_info_data->adv_data[index];
     6a0:	4653      	mov	r3, sl
     6a2:	4443      	add	r3, r8
     6a4:	7a1a      	ldrb	r2, [r3, #8]
     6a6:	a902      	add	r1, sp, #8
     6a8:	700a      	strb	r2, [r1, #0]
			adv_element_data.type
				= scan_info_data->adv_data[index + 1];
     6aa:	7a5b      	ldrb	r3, [r3, #9]
     6ac:	704b      	strb	r3, [r1, #1]
			adv_element_data.data
				= &scan_info_data->adv_data[index + 2];
     6ae:	4643      	mov	r3, r8
     6b0:	330a      	adds	r3, #10
     6b2:	4453      	add	r3, sl
     6b4:	9303      	str	r3, [sp, #12]
			adv_element_p = &adv_element_data;

			/*Parsing the Advertisement Data */

			switch (adv_element_p->type) {
     6b6:	784b      	ldrb	r3, [r1, #1]
     6b8:	b2db      	uxtb	r3, r3
     6ba:	2b07      	cmp	r3, #7
     6bc:	d100      	bne.n	6c0 <ble_observer_scan_info_handler+0x13c>
     6be:	e0be      	b.n	83e <ble_observer_scan_info_handler+0x2ba>
     6c0:	d80b      	bhi.n	6da <ble_observer_scan_info_handler+0x156>
     6c2:	2b03      	cmp	r3, #3
     6c4:	d804      	bhi.n	6d0 <ble_observer_scan_info_handler+0x14c>
     6c6:	2b02      	cmp	r3, #2
     6c8:	d249      	bcs.n	75e <ble_observer_scan_info_handler+0x1da>
     6ca:	2b01      	cmp	r3, #1
     6cc:	d01a      	beq.n	704 <ble_observer_scan_info_handler+0x180>
     6ce:	e207      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
     6d0:	2b05      	cmp	r3, #5
     6d2:	d072      	beq.n	7ba <ble_observer_scan_info_handler+0x236>
     6d4:	d800      	bhi.n	6d8 <ble_observer_scan_info_handler+0x154>
     6d6:	e092      	b.n	7fe <ble_observer_scan_info_handler+0x27a>
     6d8:	e12e      	b.n	938 <ble_observer_scan_info_handler+0x3b4>
     6da:	2b0a      	cmp	r3, #10
     6dc:	d100      	bne.n	6e0 <ble_observer_scan_info_handler+0x15c>
     6de:	e1d2      	b.n	a86 <ble_observer_scan_info_handler+0x502>
     6e0:	d806      	bhi.n	6f0 <ble_observer_scan_info_handler+0x16c>
     6e2:	2b08      	cmp	r3, #8
     6e4:	d100      	bne.n	6e8 <ble_observer_scan_info_handler+0x164>
     6e6:	e153      	b.n	990 <ble_observer_scan_info_handler+0x40c>
     6e8:	2b09      	cmp	r3, #9
     6ea:	d100      	bne.n	6ee <ble_observer_scan_info_handler+0x16a>
     6ec:	e16f      	b.n	9ce <ble_observer_scan_info_handler+0x44a>
     6ee:	e1f7      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
     6f0:	2b1a      	cmp	r3, #26
     6f2:	d100      	bne.n	6f6 <ble_observer_scan_info_handler+0x172>
     6f4:	e1dd      	b.n	ab2 <ble_observer_scan_info_handler+0x52e>
     6f6:	2bff      	cmp	r3, #255	; 0xff
     6f8:	d100      	bne.n	6fc <ble_observer_scan_info_handler+0x178>
     6fa:	e187      	b.n	a0c <ble_observer_scan_info_handler+0x488>
     6fc:	2b19      	cmp	r3, #25
     6fe:	d000      	beq.n	702 <ble_observer_scan_info_handler+0x17e>
     700:	e1ee      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
     702:	e1a8      	b.n	a56 <ble_observer_scan_info_handler+0x4d2>
			/*Adv type: Flags*/
			case FLAGS:
			{
				DBG_LOG("%-28s", "Flags");
     704:	4864      	ldr	r0, [pc, #400]	; (898 <ble_observer_scan_info_handler+0x314>)
     706:	4b65      	ldr	r3, [pc, #404]	; (89c <ble_observer_scan_info_handler+0x318>)
     708:	4798      	blx	r3
     70a:	4865      	ldr	r0, [pc, #404]	; (8a0 <ble_observer_scan_info_handler+0x31c>)
     70c:	497d      	ldr	r1, [pc, #500]	; (904 <ble_observer_scan_info_handler+0x380>)
     70e:	4c66      	ldr	r4, [pc, #408]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     710:	47a0      	blx	r4
				DBG_LOG_CONT(":  ");
     712:	4871      	ldr	r0, [pc, #452]	; (8d8 <ble_observer_scan_info_handler+0x354>)
     714:	47a0      	blx	r4
				if (LE_LIMITED_DISCOVERABLE_MODE &
						*(adv_element_p->data)) {
     716:	9b03      	ldr	r3, [sp, #12]
			/*Adv type: Flags*/
			case FLAGS:
			{
				DBG_LOG("%-28s", "Flags");
				DBG_LOG_CONT(":  ");
				if (LE_LIMITED_DISCOVERABLE_MODE &
     718:	781b      	ldrb	r3, [r3, #0]
     71a:	2201      	movs	r2, #1
     71c:	4213      	tst	r3, r2
     71e:	d002      	beq.n	726 <ble_observer_scan_info_handler+0x1a2>
						*(adv_element_p->data)) {
					DBG_LOG_CONT(
     720:	4879      	ldr	r0, [pc, #484]	; (908 <ble_observer_scan_info_handler+0x384>)
     722:	4b61      	ldr	r3, [pc, #388]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     724:	4798      	blx	r3
							"LE_LIMITED_DISCOVERABLE_MODE ");
				}

				if (LE_GENERAL_DISCOVERABLE_MODE &
						*(adv_element_p->data)) 
     726:	9b03      	ldr	r3, [sp, #12]
						*(adv_element_p->data)) {
					DBG_LOG_CONT(
							"LE_LIMITED_DISCOVERABLE_MODE ");
				}

				if (LE_GENERAL_DISCOVERABLE_MODE &
     728:	781b      	ldrb	r3, [r3, #0]
     72a:	079b      	lsls	r3, r3, #30
     72c:	d502      	bpl.n	734 <ble_observer_scan_info_handler+0x1b0>
						*(adv_element_p->data)) 
				{
					DBG_LOG_CONT(
     72e:	4877      	ldr	r0, [pc, #476]	; (90c <ble_observer_scan_info_handler+0x388>)
     730:	4b5d      	ldr	r3, [pc, #372]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     732:	4798      	blx	r3
							"LE_GENERAL_DISCOVERABLE_MODE ");
				}
		
				if (BREDR_NOT_SUPPORTED &
						*(adv_element_p->data)) {
     734:	9b03      	ldr	r3, [sp, #12]
				{
					DBG_LOG_CONT(
							"LE_GENERAL_DISCOVERABLE_MODE ");
				}
		
				if (BREDR_NOT_SUPPORTED &
     736:	781b      	ldrb	r3, [r3, #0]
     738:	075b      	lsls	r3, r3, #29
     73a:	d502      	bpl.n	742 <ble_observer_scan_info_handler+0x1be>
						*(adv_element_p->data)) {
					DBG_LOG_CONT("BREDR_NOT_SUPPORTED ");
     73c:	4874      	ldr	r0, [pc, #464]	; (910 <ble_observer_scan_info_handler+0x38c>)
     73e:	4b5a      	ldr	r3, [pc, #360]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     740:	4798      	blx	r3
				}

				if (LE_BREDR_CAPABLE_CONTROLLER &
						*(adv_element_p->data)) {
     742:	9b03      	ldr	r3, [sp, #12]
				}

				DBG_LOG_CONT("LE_BREDR_CAPABLE_CONTROLLER ");
     744:	4873      	ldr	r0, [pc, #460]	; (914 <ble_observer_scan_info_handler+0x390>)
     746:	4b58      	ldr	r3, [pc, #352]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     748:	4798      	blx	r3
				if (LE_BREDR_CAPABLE_HOST &
						*(adv_element_p->data)) {
     74a:	9b03      	ldr	r3, [sp, #12]
				if (LE_BREDR_CAPABLE_CONTROLLER &
						*(adv_element_p->data)) {
				}

				DBG_LOG_CONT("LE_BREDR_CAPABLE_CONTROLLER ");
				if (LE_BREDR_CAPABLE_HOST &
     74c:	781b      	ldrb	r3, [r3, #0]
     74e:	2210      	movs	r2, #16
     750:	4213      	tst	r3, r2
     752:	d100      	bne.n	756 <ble_observer_scan_info_handler+0x1d2>
     754:	e1c4      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
						*(adv_element_p->data)) {
					DBG_LOG_CONT("LE_BREDR_CAPABLE_HOST ");
     756:	4870      	ldr	r0, [pc, #448]	; (918 <ble_observer_scan_info_handler+0x394>)
     758:	4b53      	ldr	r3, [pc, #332]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     75a:	4798      	blx	r3
     75c:	e1c0      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
			/*Adv type: Inomplete list of 16 bit service uuids*/
			case INCOMPLETE_LIST_16BIT_SERV_UUIDS:
			{
				uint16_t uuid_16;
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
     75e:	ab02      	add	r3, sp, #8
     760:	781d      	ldrb	r5, [r3, #0]
				/* actual size of the data */
				adv_type_size -= 1;
     762:	3d01      	subs	r5, #1
     764:	b2ed      	uxtb	r5, r5
				if (COMPLETE_LIST_16BIT_SERV_UUIDS == adv_element_p->type)
     766:	785b      	ldrb	r3, [r3, #1]
     768:	2b03      	cmp	r3, #3
     76a:	d107      	bne.n	77c <ble_observer_scan_info_handler+0x1f8>
				{
				DBG_LOG("%-28s",
     76c:	484a      	ldr	r0, [pc, #296]	; (898 <ble_observer_scan_info_handler+0x314>)
     76e:	4b4b      	ldr	r3, [pc, #300]	; (89c <ble_observer_scan_info_handler+0x318>)
     770:	4798      	blx	r3
     772:	484b      	ldr	r0, [pc, #300]	; (8a0 <ble_observer_scan_info_handler+0x31c>)
     774:	4969      	ldr	r1, [pc, #420]	; (91c <ble_observer_scan_info_handler+0x398>)
     776:	4b4c      	ldr	r3, [pc, #304]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     778:	4798      	blx	r3
     77a:	e006      	b.n	78a <ble_observer_scan_info_handler+0x206>
						"Complete_16bit_service_uuids");
				}
				else
				{
					DBG_LOG("%-28s",
     77c:	4846      	ldr	r0, [pc, #280]	; (898 <ble_observer_scan_info_handler+0x314>)
     77e:	4b47      	ldr	r3, [pc, #284]	; (89c <ble_observer_scan_info_handler+0x318>)
     780:	4798      	blx	r3
     782:	4847      	ldr	r0, [pc, #284]	; (8a0 <ble_observer_scan_info_handler+0x31c>)
     784:	4966      	ldr	r1, [pc, #408]	; (920 <ble_observer_scan_info_handler+0x39c>)
     786:	4b48      	ldr	r3, [pc, #288]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     788:	4798      	blx	r3
							"Incomplete_16bit_serv_uuids");
				}
				DBG_LOG_CONT(":  ");
     78a:	4853      	ldr	r0, [pc, #332]	; (8d8 <ble_observer_scan_info_handler+0x354>)
     78c:	4b46      	ldr	r3, [pc, #280]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     78e:	4798      	blx	r3
				while (adv_type_size) {
     790:	2d00      	cmp	r5, #0
     792:	d100      	bne.n	796 <ble_observer_scan_info_handler+0x212>
     794:	e1a4      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
					memcpy(&uuid_16, adv_element_p->data,
     796:	4c63      	ldr	r4, [pc, #396]	; (924 <ble_observer_scan_info_handler+0x3a0>)
							AT_BLE_UUID_16_LEN);
					adv_element_p->data
						+= AT_BLE_UUID_16_LEN;
					adv_type_size -= AT_BLE_UUID_16_LEN;
					DBG_LOG_CONT("0x%02x ", uuid_16);
     798:	4f43      	ldr	r7, [pc, #268]	; (8a8 <ble_observer_scan_info_handler+0x324>)
					DBG_LOG("%-28s",
							"Incomplete_16bit_serv_uuids");
				}
				DBG_LOG_CONT(":  ");
				while (adv_type_size) {
					memcpy(&uuid_16, adv_element_p->data,
     79a:	9903      	ldr	r1, [sp, #12]
     79c:	ae04      	add	r6, sp, #16
     79e:	1c30      	adds	r0, r6, #0
     7a0:	2202      	movs	r2, #2
     7a2:	47a0      	blx	r4
							AT_BLE_UUID_16_LEN);
					adv_element_p->data
						+= AT_BLE_UUID_16_LEN;
     7a4:	9b03      	ldr	r3, [sp, #12]
     7a6:	3302      	adds	r3, #2
     7a8:	9303      	str	r3, [sp, #12]
					adv_type_size -= AT_BLE_UUID_16_LEN;
     7aa:	3d02      	subs	r5, #2
     7ac:	b2ed      	uxtb	r5, r5
					DBG_LOG_CONT("0x%02x ", uuid_16);
     7ae:	8831      	ldrh	r1, [r6, #0]
     7b0:	485d      	ldr	r0, [pc, #372]	; (928 <ble_observer_scan_info_handler+0x3a4>)
     7b2:	47b8      	blx	r7
				{
					DBG_LOG("%-28s",
							"Incomplete_16bit_serv_uuids");
				}
				DBG_LOG_CONT(":  ");
				while (adv_type_size) {
     7b4:	2d00      	cmp	r5, #0
     7b6:	d1f0      	bne.n	79a <ble_observer_scan_info_handler+0x216>
     7b8:	e192      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
			/*Adv type: Complete list of 32 bit service uuids*/
			case COMPLETE_LIST_32BIT_SERV_UUIDS:
			{
				uint16_t uuid_32;
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
     7ba:	ab02      	add	r3, sp, #8
     7bc:	781d      	ldrb	r5, [r3, #0]
				/* actual size of the data */
				adv_type_size -= 1;
     7be:	3d01      	subs	r5, #1
     7c0:	b2ed      	uxtb	r5, r5
				DBG_LOG("%-28s",
     7c2:	4835      	ldr	r0, [pc, #212]	; (898 <ble_observer_scan_info_handler+0x314>)
     7c4:	4b35      	ldr	r3, [pc, #212]	; (89c <ble_observer_scan_info_handler+0x318>)
     7c6:	4798      	blx	r3
     7c8:	4835      	ldr	r0, [pc, #212]	; (8a0 <ble_observer_scan_info_handler+0x31c>)
     7ca:	4958      	ldr	r1, [pc, #352]	; (92c <ble_observer_scan_info_handler+0x3a8>)
     7cc:	4c36      	ldr	r4, [pc, #216]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     7ce:	47a0      	blx	r4
						"Complete_32bit_service_uuids");
				DBG_LOG_CONT(":  ");
     7d0:	4841      	ldr	r0, [pc, #260]	; (8d8 <ble_observer_scan_info_handler+0x354>)
     7d2:	47a0      	blx	r4
				while (adv_type_size) {
     7d4:	2d00      	cmp	r5, #0
     7d6:	d100      	bne.n	7da <ble_observer_scan_info_handler+0x256>
     7d8:	e182      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
					memcpy(&uuid_32, adv_element_p->data,
     7da:	4c52      	ldr	r4, [pc, #328]	; (924 <ble_observer_scan_info_handler+0x3a0>)
							AT_BLE_UUID_32_LEN);
					adv_element_p->data
						+= AT_BLE_UUID_32_LEN;
					adv_type_size -= AT_BLE_UUID_32_LEN;
					DBG_LOG_CONT(" 0x%02x", uuid_32);
     7dc:	4f32      	ldr	r7, [pc, #200]	; (8a8 <ble_observer_scan_info_handler+0x324>)
				adv_type_size -= 1;
				DBG_LOG("%-28s",
						"Complete_32bit_service_uuids");
				DBG_LOG_CONT(":  ");
				while (adv_type_size) {
					memcpy(&uuid_32, adv_element_p->data,
     7de:	9903      	ldr	r1, [sp, #12]
     7e0:	ae04      	add	r6, sp, #16
     7e2:	1c30      	adds	r0, r6, #0
     7e4:	2204      	movs	r2, #4
     7e6:	47a0      	blx	r4
							AT_BLE_UUID_32_LEN);
					adv_element_p->data
						+= AT_BLE_UUID_32_LEN;
     7e8:	9b03      	ldr	r3, [sp, #12]
     7ea:	3304      	adds	r3, #4
     7ec:	9303      	str	r3, [sp, #12]
					adv_type_size -= AT_BLE_UUID_32_LEN;
     7ee:	3d04      	subs	r5, #4
     7f0:	b2ed      	uxtb	r5, r5
					DBG_LOG_CONT(" 0x%02x", uuid_32);
     7f2:	8831      	ldrh	r1, [r6, #0]
     7f4:	484e      	ldr	r0, [pc, #312]	; (930 <ble_observer_scan_info_handler+0x3ac>)
     7f6:	47b8      	blx	r7
				/* actual size of the data */
				adv_type_size -= 1;
				DBG_LOG("%-28s",
						"Complete_32bit_service_uuids");
				DBG_LOG_CONT(":  ");
				while (adv_type_size) {
     7f8:	2d00      	cmp	r5, #0
     7fa:	d1f0      	bne.n	7de <ble_observer_scan_info_handler+0x25a>
     7fc:	e170      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
			/*Adv type: Incomplete list of 32 bit service uuids*/
			case INCOMPLETE_LIST_32BIT_SERV_UUIDS:
			{
				uint16_t uuid_32;
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
     7fe:	ab02      	add	r3, sp, #8
     800:	781d      	ldrb	r5, [r3, #0]
				/* actual size of the data */
				adv_type_size -= 1;
     802:	3d01      	subs	r5, #1
     804:	b2ed      	uxtb	r5, r5
				DBG_LOG("%-28s",
     806:	4824      	ldr	r0, [pc, #144]	; (898 <ble_observer_scan_info_handler+0x314>)
     808:	4b24      	ldr	r3, [pc, #144]	; (89c <ble_observer_scan_info_handler+0x318>)
     80a:	4798      	blx	r3
     80c:	4824      	ldr	r0, [pc, #144]	; (8a0 <ble_observer_scan_info_handler+0x31c>)
     80e:	4944      	ldr	r1, [pc, #272]	; (920 <ble_observer_scan_info_handler+0x39c>)
     810:	4b25      	ldr	r3, [pc, #148]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     812:	4798      	blx	r3
						"Incomplete_16bit_serv_uuids");
				while (adv_type_size) {
     814:	2d00      	cmp	r5, #0
     816:	d100      	bne.n	81a <ble_observer_scan_info_handler+0x296>
     818:	e162      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
					memcpy(&uuid_32, adv_element_p->data,
     81a:	4c42      	ldr	r4, [pc, #264]	; (924 <ble_observer_scan_info_handler+0x3a0>)
							AT_BLE_UUID_32_LEN);
					adv_element_p->data
						+= AT_BLE_UUID_32_LEN;
					adv_type_size -= AT_BLE_UUID_32_LEN;
					DBG_LOG_CONT(" 0x%02x", uuid_32);
     81c:	4f22      	ldr	r7, [pc, #136]	; (8a8 <ble_observer_scan_info_handler+0x324>)
				/* actual size of the data */
				adv_type_size -= 1;
				DBG_LOG("%-28s",
						"Incomplete_16bit_serv_uuids");
				while (adv_type_size) {
					memcpy(&uuid_32, adv_element_p->data,
     81e:	9903      	ldr	r1, [sp, #12]
     820:	ae04      	add	r6, sp, #16
     822:	1c30      	adds	r0, r6, #0
     824:	2204      	movs	r2, #4
     826:	47a0      	blx	r4
							AT_BLE_UUID_32_LEN);
					adv_element_p->data
						+= AT_BLE_UUID_32_LEN;
     828:	9b03      	ldr	r3, [sp, #12]
     82a:	3304      	adds	r3, #4
     82c:	9303      	str	r3, [sp, #12]
					adv_type_size -= AT_BLE_UUID_32_LEN;
     82e:	3d04      	subs	r5, #4
     830:	b2ed      	uxtb	r5, r5
					DBG_LOG_CONT(" 0x%02x", uuid_32);
     832:	8831      	ldrh	r1, [r6, #0]
     834:	483e      	ldr	r0, [pc, #248]	; (930 <ble_observer_scan_info_handler+0x3ac>)
     836:	47b8      	blx	r7
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data */
				adv_type_size -= 1;
				DBG_LOG("%-28s",
						"Incomplete_16bit_serv_uuids");
				while (adv_type_size) {
     838:	2d00      	cmp	r5, #0
     83a:	d1f0      	bne.n	81e <ble_observer_scan_info_handler+0x29a>
     83c:	e150      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
			/*Adv type: Complete list of 128 bit service uuids*/
			case COMPLETE_LIST_128BIT_SERV_UUIDS:
			{
				uint8_t uuid_128[16];
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
     83e:	ab02      	add	r3, sp, #8
     840:	781b      	ldrb	r3, [r3, #0]
				/* actual size of the data */
				adv_type_size -= 1;
     842:	3b01      	subs	r3, #1
     844:	b2db      	uxtb	r3, r3
     846:	4699      	mov	r9, r3
				DBG_LOG("%-28s",
     848:	4813      	ldr	r0, [pc, #76]	; (898 <ble_observer_scan_info_handler+0x314>)
     84a:	4b14      	ldr	r3, [pc, #80]	; (89c <ble_observer_scan_info_handler+0x318>)
     84c:	4798      	blx	r3
     84e:	4814      	ldr	r0, [pc, #80]	; (8a0 <ble_observer_scan_info_handler+0x31c>)
     850:	4938      	ldr	r1, [pc, #224]	; (934 <ble_observer_scan_info_handler+0x3b0>)
     852:	4c15      	ldr	r4, [pc, #84]	; (8a8 <ble_observer_scan_info_handler+0x324>)
     854:	47a0      	blx	r4
						"Complete_128bit_service_uuid");
				DBG_LOG_CONT(":  ");
     856:	4820      	ldr	r0, [pc, #128]	; (8d8 <ble_observer_scan_info_handler+0x354>)
     858:	47a0      	blx	r4
				while (adv_type_size) {
     85a:	464b      	mov	r3, r9
     85c:	2b00      	cmp	r3, #0
     85e:	d100      	bne.n	862 <ble_observer_scan_info_handler+0x2de>
     860:	e13e      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
					adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
					adv_type_size -= AT_BLE_UUID_128_LEN;
					for (iterator = 0; iterator < 16;
							iterator++) {
						DBG_LOG_CONT(" 0x%02x",
     862:	4f33      	ldr	r7, [pc, #204]	; (930 <ble_observer_scan_info_handler+0x3ac>)
     864:	4e10      	ldr	r6, [pc, #64]	; (8a8 <ble_observer_scan_info_handler+0x324>)
				adv_type_size -= 1;
				DBG_LOG("%-28s",
						"Complete_128bit_service_uuid");
				DBG_LOG_CONT(":  ");
				while (adv_type_size) {
					memcpy(&uuid_128, adv_element_p->data,
     866:	9903      	ldr	r1, [sp, #12]
     868:	a804      	add	r0, sp, #16
     86a:	2202      	movs	r2, #2
     86c:	4b2d      	ldr	r3, [pc, #180]	; (924 <ble_observer_scan_info_handler+0x3a0>)
     86e:	4798      	blx	r3
							AT_BLE_UUID_128);
					adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
     870:	9b03      	ldr	r3, [sp, #12]
     872:	3310      	adds	r3, #16
     874:	9303      	str	r3, [sp, #12]
					adv_type_size -= AT_BLE_UUID_128_LEN;
     876:	464b      	mov	r3, r9
     878:	3b10      	subs	r3, #16
     87a:	b2db      	uxtb	r3, r3
     87c:	4699      	mov	r9, r3
     87e:	ac04      	add	r4, sp, #16
     880:	ad08      	add	r5, sp, #32
					for (iterator = 0; iterator < 16;
							iterator++) {
						DBG_LOG_CONT(" 0x%02x",
     882:	7821      	ldrb	r1, [r4, #0]
     884:	1c38      	adds	r0, r7, #0
     886:	47b0      	blx	r6
     888:	3401      	adds	r4, #1
					memcpy(&uuid_128, adv_element_p->data,
							AT_BLE_UUID_128);
					adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
					adv_type_size -= AT_BLE_UUID_128_LEN;
					for (iterator = 0; iterator < 16;
     88a:	42ac      	cmp	r4, r5
     88c:	d1f9      	bne.n	882 <ble_observer_scan_info_handler+0x2fe>
				/* actual size of the data */
				adv_type_size -= 1;
				DBG_LOG("%-28s",
						"Complete_128bit_service_uuid");
				DBG_LOG_CONT(":  ");
				while (adv_type_size) {
     88e:	464b      	mov	r3, r9
     890:	2b00      	cmp	r3, #0
     892:	d1e8      	bne.n	866 <ble_observer_scan_info_handler+0x2e2>
     894:	e124      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
     896:	46c0      	nop			; (mov r8, r8)
     898:	00008708 	.word	0x00008708
     89c:	000075f9 	.word	0x000075f9
     8a0:	0000870c 	.word	0x0000870c
     8a4:	00008714 	.word	0x00008714
     8a8:	000074d9 	.word	0x000074d9
     8ac:	000024f1 	.word	0x000024f1
     8b0:	0000872c 	.word	0x0000872c
     8b4:	000085fc 	.word	0x000085fc
     8b8:	00008734 	.word	0x00008734
     8bc:	0000873c 	.word	0x0000873c
     8c0:	0000874c 	.word	0x0000874c
     8c4:	00008768 	.word	0x00008768
     8c8:	00008780 	.word	0x00008780
     8cc:	00008794 	.word	0x00008794
     8d0:	20000ec0 	.word	0x20000ec0
     8d4:	000087a0 	.word	0x000087a0
     8d8:	00008730 	.word	0x00008730
     8dc:	000087b4 	.word	0x000087b4
     8e0:	000087c4 	.word	0x000087c4
     8e4:	000087dc 	.word	0x000087dc
     8e8:	00008800 	.word	0x00008800
     8ec:	00008828 	.word	0x00008828
     8f0:	00008834 	.word	0x00008834
     8f4:	00008844 	.word	0x00008844
     8f8:	00009304 	.word	0x00009304
     8fc:	0000884c 	.word	0x0000884c
     900:	00008854 	.word	0x00008854
     904:	0000885c 	.word	0x0000885c
     908:	00008864 	.word	0x00008864
     90c:	00008884 	.word	0x00008884
     910:	000088a4 	.word	0x000088a4
     914:	000088bc 	.word	0x000088bc
     918:	000088dc 	.word	0x000088dc
     91c:	000088f4 	.word	0x000088f4
     920:	00008914 	.word	0x00008914
     924:	000074b7 	.word	0x000074b7
     928:	00008930 	.word	0x00008930
     92c:	00008938 	.word	0x00008938
     930:	00008958 	.word	0x00008958
     934:	00008960 	.word	0x00008960
			/*Adv type: Incomplete list of 128 bit service uuids*/
			case INCOMPLETE_LIST_128BIT_SERV_UUIDS:
			{
				uint8_t uuid_128[16];
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
     938:	ab02      	add	r3, sp, #8
     93a:	781b      	ldrb	r3, [r3, #0]
				/* actual size of the data */
				adv_type_size -= 1;
     93c:	3b01      	subs	r3, #1
     93e:	b2db      	uxtb	r3, r3
     940:	4699      	mov	r9, r3
				DBG_LOG("%-28s",
     942:	4874      	ldr	r0, [pc, #464]	; (b14 <ble_observer_scan_info_handler+0x590>)
     944:	4b74      	ldr	r3, [pc, #464]	; (b18 <ble_observer_scan_info_handler+0x594>)
     946:	4798      	blx	r3
     948:	4874      	ldr	r0, [pc, #464]	; (b1c <ble_observer_scan_info_handler+0x598>)
     94a:	4975      	ldr	r1, [pc, #468]	; (b20 <ble_observer_scan_info_handler+0x59c>)
     94c:	4c75      	ldr	r4, [pc, #468]	; (b24 <ble_observer_scan_info_handler+0x5a0>)
     94e:	47a0      	blx	r4
						"InComplete_128bit_serv_uuids");
				DBG_LOG_CONT(":  ");
     950:	4875      	ldr	r0, [pc, #468]	; (b28 <ble_observer_scan_info_handler+0x5a4>)
     952:	47a0      	blx	r4
				while (adv_type_size) {
     954:	464b      	mov	r3, r9
     956:	2b00      	cmp	r3, #0
     958:	d100      	bne.n	95c <ble_observer_scan_info_handler+0x3d8>
     95a:	e0c1      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>
					adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
					adv_type_size -= AT_BLE_UUID_128_LEN;
					for (iterator = 0; iterator < 16;
							iterator++) {
						DBG_LOG_CONT(" 0x%02x",
     95c:	4c73      	ldr	r4, [pc, #460]	; (b2c <ble_observer_scan_info_handler+0x5a8>)
     95e:	4f71      	ldr	r7, [pc, #452]	; (b24 <ble_observer_scan_info_handler+0x5a0>)
				adv_type_size -= 1;
				DBG_LOG("%-28s",
						"InComplete_128bit_serv_uuids");
				DBG_LOG_CONT(":  ");
				while (adv_type_size) {
					memcpy(&uuid_128, adv_element_p->data,
     960:	9903      	ldr	r1, [sp, #12]
     962:	a804      	add	r0, sp, #16
     964:	2202      	movs	r2, #2
     966:	4b72      	ldr	r3, [pc, #456]	; (b30 <ble_observer_scan_info_handler+0x5ac>)
     968:	4798      	blx	r3
							AT_BLE_UUID_128);
					adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
     96a:	9b03      	ldr	r3, [sp, #12]
     96c:	3310      	adds	r3, #16
     96e:	9303      	str	r3, [sp, #12]
					adv_type_size -= AT_BLE_UUID_128_LEN;
     970:	464b      	mov	r3, r9
     972:	3b10      	subs	r3, #16
     974:	b2db      	uxtb	r3, r3
     976:	4699      	mov	r9, r3
     978:	ad04      	add	r5, sp, #16
     97a:	ae08      	add	r6, sp, #32
					for (iterator = 0; iterator < 16;
							iterator++) {
						DBG_LOG_CONT(" 0x%02x",
     97c:	7829      	ldrb	r1, [r5, #0]
     97e:	1c20      	adds	r0, r4, #0
     980:	47b8      	blx	r7
     982:	3501      	adds	r5, #1
					memcpy(&uuid_128, adv_element_p->data,
							AT_BLE_UUID_128);
					adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
					adv_type_size -= AT_BLE_UUID_128_LEN;
					for (iterator = 0; iterator < 16;
     984:	42b5      	cmp	r5, r6
     986:	d1f9      	bne.n	97c <ble_observer_scan_info_handler+0x3f8>
				/* actual size of the data */
				adv_type_size -= 1;
				DBG_LOG("%-28s",
						"InComplete_128bit_serv_uuids");
				DBG_LOG_CONT(":  ");
				while (adv_type_size) {
     988:	464b      	mov	r3, r9
     98a:	2b00      	cmp	r3, #0
     98c:	d1e8      	bne.n	960 <ble_observer_scan_info_handler+0x3dc>
     98e:	e0a7      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>

			/*Adv type: shortened local name*/
			case SHORTENED_LOCAL_NAME:
			{
				/* passing the length of data type */
				int8_t adv_type_size = adv_element_p->len;
     990:	ab02      	add	r3, sp, #8
     992:	781f      	ldrb	r7, [r3, #0]
				/* actual size of the data */
				adv_type_size -= 1;
     994:	3f01      	subs	r7, #1
     996:	b2ff      	uxtb	r7, r7
				DBG_LOG("%-28s", "Shortend Local Name");
     998:	485e      	ldr	r0, [pc, #376]	; (b14 <ble_observer_scan_info_handler+0x590>)
     99a:	4b5f      	ldr	r3, [pc, #380]	; (b18 <ble_observer_scan_info_handler+0x594>)
     99c:	4798      	blx	r3
     99e:	485f      	ldr	r0, [pc, #380]	; (b1c <ble_observer_scan_info_handler+0x598>)
     9a0:	4964      	ldr	r1, [pc, #400]	; (b34 <ble_observer_scan_info_handler+0x5b0>)
     9a2:	4c60      	ldr	r4, [pc, #384]	; (b24 <ble_observer_scan_info_handler+0x5a0>)
     9a4:	47a0      	blx	r4
				DBG_LOG_CONT(":  ");
     9a6:	4860      	ldr	r0, [pc, #384]	; (b28 <ble_observer_scan_info_handler+0x5a4>)
     9a8:	47a0      	blx	r4
				for (iterator = 0; iterator < adv_type_size;
     9aa:	b27b      	sxtb	r3, r7
     9ac:	2b00      	cmp	r3, #0
     9ae:	dd09      	ble.n	9c4 <ble_observer_scan_info_handler+0x440>
     9b0:	2400      	movs	r4, #0
						iterator++) {
					DBG_LOG_CONT("%c",
     9b2:	4e61      	ldr	r6, [pc, #388]	; (b38 <ble_observer_scan_info_handler+0x5b4>)
				int8_t adv_type_size = adv_element_p->len;
				/* actual size of the data */
				adv_type_size -= 1;
				DBG_LOG("%-28s", "Shortend Local Name");
				DBG_LOG_CONT(":  ");
				for (iterator = 0; iterator < adv_type_size;
     9b4:	1c1d      	adds	r5, r3, #0
						iterator++) {
					DBG_LOG_CONT("%c",
							adv_element_p->data[
     9b6:	9b03      	ldr	r3, [sp, #12]
				adv_type_size -= 1;
				DBG_LOG("%-28s", "Shortend Local Name");
				DBG_LOG_CONT(":  ");
				for (iterator = 0; iterator < adv_type_size;
						iterator++) {
					DBG_LOG_CONT("%c",
     9b8:	5d18      	ldrb	r0, [r3, r4]
     9ba:	47b0      	blx	r6
     9bc:	3401      	adds	r4, #1
				int8_t adv_type_size = adv_element_p->len;
				/* actual size of the data */
				adv_type_size -= 1;
				DBG_LOG("%-28s", "Shortend Local Name");
				DBG_LOG_CONT(":  ");
				for (iterator = 0; iterator < adv_type_size;
     9be:	b263      	sxtb	r3, r4
     9c0:	42ab      	cmp	r3, r5
     9c2:	dbf8      	blt.n	9b6 <ble_observer_scan_info_handler+0x432>
					DBG_LOG_CONT("%c",
							adv_element_p->data[
								iterator]);
				}

				adv_element_p->data += adv_type_size;
     9c4:	9b03      	ldr	r3, [sp, #12]
     9c6:	b27f      	sxtb	r7, r7
     9c8:	19df      	adds	r7, r3, r7
     9ca:	9703      	str	r7, [sp, #12]
				adv_type_size = 0;
			}
			break;
     9cc:	e088      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>

			/*Adv type: Complete local name*/
			case COMPLETE_LOCAL_NAME:
			{
				/* passing the length of data type */
				int8_t adv_type_size = adv_element_p->len;
     9ce:	ab02      	add	r3, sp, #8
     9d0:	781f      	ldrb	r7, [r3, #0]
				/* actual size of the data */
				adv_type_size -= 1;
     9d2:	3f01      	subs	r7, #1
     9d4:	b2ff      	uxtb	r7, r7
				DBG_LOG("%-28s", "Complete Local Name");
     9d6:	484f      	ldr	r0, [pc, #316]	; (b14 <ble_observer_scan_info_handler+0x590>)
     9d8:	4b4f      	ldr	r3, [pc, #316]	; (b18 <ble_observer_scan_info_handler+0x594>)
     9da:	4798      	blx	r3
     9dc:	484f      	ldr	r0, [pc, #316]	; (b1c <ble_observer_scan_info_handler+0x598>)
     9de:	4957      	ldr	r1, [pc, #348]	; (b3c <ble_observer_scan_info_handler+0x5b8>)
     9e0:	4c50      	ldr	r4, [pc, #320]	; (b24 <ble_observer_scan_info_handler+0x5a0>)
     9e2:	47a0      	blx	r4
				DBG_LOG_CONT(":  ");
     9e4:	4850      	ldr	r0, [pc, #320]	; (b28 <ble_observer_scan_info_handler+0x5a4>)
     9e6:	47a0      	blx	r4
				for (iterator = 0; iterator < adv_type_size;
     9e8:	b27b      	sxtb	r3, r7
     9ea:	2b00      	cmp	r3, #0
     9ec:	dd09      	ble.n	a02 <ble_observer_scan_info_handler+0x47e>
     9ee:	2400      	movs	r4, #0
						iterator++) {
					DBG_LOG_CONT("%c",
     9f0:	4e51      	ldr	r6, [pc, #324]	; (b38 <ble_observer_scan_info_handler+0x5b4>)
				int8_t adv_type_size = adv_element_p->len;
				/* actual size of the data */
				adv_type_size -= 1;
				DBG_LOG("%-28s", "Complete Local Name");
				DBG_LOG_CONT(":  ");
				for (iterator = 0; iterator < adv_type_size;
     9f2:	1c1d      	adds	r5, r3, #0
						iterator++) {
					DBG_LOG_CONT("%c",
							adv_element_p->data[
     9f4:	9b03      	ldr	r3, [sp, #12]
				adv_type_size -= 1;
				DBG_LOG("%-28s", "Complete Local Name");
				DBG_LOG_CONT(":  ");
				for (iterator = 0; iterator < adv_type_size;
						iterator++) {
					DBG_LOG_CONT("%c",
     9f6:	5d18      	ldrb	r0, [r3, r4]
     9f8:	47b0      	blx	r6
     9fa:	3401      	adds	r4, #1
				int8_t adv_type_size = adv_element_p->len;
				/* actual size of the data */
				adv_type_size -= 1;
				DBG_LOG("%-28s", "Complete Local Name");
				DBG_LOG_CONT(":  ");
				for (iterator = 0; iterator < adv_type_size;
     9fc:	b263      	sxtb	r3, r4
     9fe:	42ab      	cmp	r3, r5
     a00:	dbf8      	blt.n	9f4 <ble_observer_scan_info_handler+0x470>
					DBG_LOG_CONT("%c",
							adv_element_p->data[
								iterator]);
				}

				adv_element_p->data += adv_type_size;
     a02:	9b03      	ldr	r3, [sp, #12]
     a04:	b27f      	sxtb	r7, r7
     a06:	19df      	adds	r7, r3, r7
     a08:	9703      	str	r7, [sp, #12]
				adv_type_size = 0;
			}
			break;
     a0a:	e069      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>

			/*Adv type: Manufacturer Specific data*/
			case MANUFACTURER_SPECIFIC_DATA:
			{
				/* passing the length of data type */
				int8_t adv_type_size = adv_element_p->len;
     a0c:	ab02      	add	r3, sp, #8
     a0e:	781b      	ldrb	r3, [r3, #0]
				/* actual size of the data */
				adv_type_size -= 1;
     a10:	3b01      	subs	r3, #1
     a12:	b2db      	uxtb	r3, r3
     a14:	1c1d      	adds	r5, r3, #0
     a16:	9301      	str	r3, [sp, #4]
				DBG_LOG("%-28s",
     a18:	483e      	ldr	r0, [pc, #248]	; (b14 <ble_observer_scan_info_handler+0x590>)
     a1a:	4b3f      	ldr	r3, [pc, #252]	; (b18 <ble_observer_scan_info_handler+0x594>)
     a1c:	4798      	blx	r3
     a1e:	483f      	ldr	r0, [pc, #252]	; (b1c <ble_observer_scan_info_handler+0x598>)
     a20:	4947      	ldr	r1, [pc, #284]	; (b40 <ble_observer_scan_info_handler+0x5bc>)
     a22:	4c40      	ldr	r4, [pc, #256]	; (b24 <ble_observer_scan_info_handler+0x5a0>)
     a24:	47a0      	blx	r4
						"Manufacturer Specific Data");
				DBG_LOG_CONT(":  ");
     a26:	4840      	ldr	r0, [pc, #256]	; (b28 <ble_observer_scan_info_handler+0x5a4>)
     a28:	47a0      	blx	r4
				for (iterator = 0; iterator < adv_type_size;
     a2a:	b26b      	sxtb	r3, r5
     a2c:	2b00      	cmp	r3, #0
     a2e:	dd0b      	ble.n	a48 <ble_observer_scan_info_handler+0x4c4>
     a30:	2500      	movs	r5, #0
						iterator++) {
					DBG_LOG_CONT("0x%02x ",
     a32:	4c44      	ldr	r4, [pc, #272]	; (b44 <ble_observer_scan_info_handler+0x5c0>)
     a34:	4f3b      	ldr	r7, [pc, #236]	; (b24 <ble_observer_scan_info_handler+0x5a0>)
				/* actual size of the data */
				adv_type_size -= 1;
				DBG_LOG("%-28s",
						"Manufacturer Specific Data");
				DBG_LOG_CONT(":  ");
				for (iterator = 0; iterator < adv_type_size;
     a36:	1c1e      	adds	r6, r3, #0
						iterator++) {
					DBG_LOG_CONT("0x%02x ",
							adv_element_p->data[
     a38:	9b03      	ldr	r3, [sp, #12]
				DBG_LOG("%-28s",
						"Manufacturer Specific Data");
				DBG_LOG_CONT(":  ");
				for (iterator = 0; iterator < adv_type_size;
						iterator++) {
					DBG_LOG_CONT("0x%02x ",
     a3a:	5d59      	ldrb	r1, [r3, r5]
     a3c:	1c20      	adds	r0, r4, #0
     a3e:	47b8      	blx	r7
     a40:	3501      	adds	r5, #1
				/* actual size of the data */
				adv_type_size -= 1;
				DBG_LOG("%-28s",
						"Manufacturer Specific Data");
				DBG_LOG_CONT(":  ");
				for (iterator = 0; iterator < adv_type_size;
     a42:	b26b      	sxtb	r3, r5
     a44:	42b3      	cmp	r3, r6
     a46:	dbf7      	blt.n	a38 <ble_observer_scan_info_handler+0x4b4>
					DBG_LOG_CONT("0x%02x ",
							adv_element_p->data[
								iterator]);
				}

				adv_element_p->data += adv_type_size;
     a48:	9a03      	ldr	r2, [sp, #12]
     a4a:	466b      	mov	r3, sp
     a4c:	791b      	ldrb	r3, [r3, #4]
     a4e:	b25b      	sxtb	r3, r3
     a50:	18d3      	adds	r3, r2, r3
     a52:	9303      	str	r3, [sp, #12]
				adv_type_size = 0;
			}
			break;			
     a54:	e044      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>

			/*Adv type: Appearance*/
			case APPEARANCE:
			{
				/* passing the length of data type */
				int8_t adv_type_size = adv_element_p->len;
     a56:	ab02      	add	r3, sp, #8
     a58:	781b      	ldrb	r3, [r3, #0]

				adv_type_size -= 1;
				/* actual size of the data */
				uint16_t appearance_t;
				DBG_LOG("%-28s", "Appearance");
     a5a:	482e      	ldr	r0, [pc, #184]	; (b14 <ble_observer_scan_info_handler+0x590>)
     a5c:	4b2e      	ldr	r3, [pc, #184]	; (b18 <ble_observer_scan_info_handler+0x594>)
     a5e:	4798      	blx	r3
     a60:	482e      	ldr	r0, [pc, #184]	; (b1c <ble_observer_scan_info_handler+0x598>)
     a62:	4939      	ldr	r1, [pc, #228]	; (b48 <ble_observer_scan_info_handler+0x5c4>)
     a64:	4c2f      	ldr	r4, [pc, #188]	; (b24 <ble_observer_scan_info_handler+0x5a0>)
     a66:	47a0      	blx	r4
				DBG_LOG_CONT(":  ");
     a68:	482f      	ldr	r0, [pc, #188]	; (b28 <ble_observer_scan_info_handler+0x5a4>)
     a6a:	47a0      	blx	r4

				memcpy(&appearance_t, adv_element_p->data,
     a6c:	9903      	ldr	r1, [sp, #12]
     a6e:	ad04      	add	r5, sp, #16
     a70:	1c28      	adds	r0, r5, #0
     a72:	2202      	movs	r2, #2
     a74:	4b2e      	ldr	r3, [pc, #184]	; (b30 <ble_observer_scan_info_handler+0x5ac>)
     a76:	4798      	blx	r3
						APPEARANCE_SIZE);
				DBG_LOG_CONT("0x%02x", appearance_t);
     a78:	8829      	ldrh	r1, [r5, #0]
     a7a:	4834      	ldr	r0, [pc, #208]	; (b4c <ble_observer_scan_info_handler+0x5c8>)
     a7c:	47a0      	blx	r4
				adv_element_p->data += APPEARANCE_SIZE;
     a7e:	9b03      	ldr	r3, [sp, #12]
     a80:	3302      	adds	r3, #2
     a82:	9303      	str	r3, [sp, #12]
				adv_type_size -= APPEARANCE_SIZE;
			}
			break;
     a84:	e02c      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>

			/*Adv type: Tx power level*/
			case TX_POWER_LEVEL:
			{
				/* passing the length of data type */
				int8_t adv_type_size = adv_element_p->len;
     a86:	ab02      	add	r3, sp, #8
     a88:	781b      	ldrb	r3, [r3, #0]
				adv_type_size -= 1;
				/* actual size of the data */
				uint16_t tx_power_level_t;
				DBG_LOG("%-28s", "Tx power level");
     a8a:	4822      	ldr	r0, [pc, #136]	; (b14 <ble_observer_scan_info_handler+0x590>)
     a8c:	4b22      	ldr	r3, [pc, #136]	; (b18 <ble_observer_scan_info_handler+0x594>)
     a8e:	4798      	blx	r3
     a90:	4822      	ldr	r0, [pc, #136]	; (b1c <ble_observer_scan_info_handler+0x598>)
     a92:	492f      	ldr	r1, [pc, #188]	; (b50 <ble_observer_scan_info_handler+0x5cc>)
     a94:	4c23      	ldr	r4, [pc, #140]	; (b24 <ble_observer_scan_info_handler+0x5a0>)
     a96:	47a0      	blx	r4
				DBG_LOG_CONT(":  ");
     a98:	4823      	ldr	r0, [pc, #140]	; (b28 <ble_observer_scan_info_handler+0x5a4>)
     a9a:	47a0      	blx	r4
				memcpy(&tx_power_level_t, adv_element_p->data,
     a9c:	9a03      	ldr	r2, [sp, #12]
     a9e:	ab04      	add	r3, sp, #16
     aa0:	7812      	ldrb	r2, [r2, #0]
     aa2:	701a      	strb	r2, [r3, #0]
						TX_POWER_LEVEL_SIZE);
				DBG_LOG_CONT("0x%02x", tx_power_level_t);
     aa4:	8819      	ldrh	r1, [r3, #0]
     aa6:	4829      	ldr	r0, [pc, #164]	; (b4c <ble_observer_scan_info_handler+0x5c8>)
     aa8:	47a0      	blx	r4
				adv_element_p->data += TX_POWER_LEVEL_SIZE;
     aaa:	9b03      	ldr	r3, [sp, #12]
     aac:	3301      	adds	r3, #1
     aae:	9303      	str	r3, [sp, #12]
				adv_type_size -= TX_POWER_LEVEL_SIZE;
			}
			break;
     ab0:	e016      	b.n	ae0 <ble_observer_scan_info_handler+0x55c>

			/*Adv type: Advertising Interval*/
			case ADVERTISING_INTERVAL:
			{
				/* passing the length of data type */
				int8_t adv_type_size = adv_element_p->len;
     ab2:	ab02      	add	r3, sp, #8
     ab4:	781b      	ldrb	r3, [r3, #0]
				adv_type_size -= 1;
				/* actual size of the data */
				uint16_t adv_interval_t;
				DBG_LOG("%-28s", "Advertisement Interval");
     ab6:	4817      	ldr	r0, [pc, #92]	; (b14 <ble_observer_scan_info_handler+0x590>)
     ab8:	4b17      	ldr	r3, [pc, #92]	; (b18 <ble_observer_scan_info_handler+0x594>)
     aba:	4798      	blx	r3
     abc:	4817      	ldr	r0, [pc, #92]	; (b1c <ble_observer_scan_info_handler+0x598>)
     abe:	4925      	ldr	r1, [pc, #148]	; (b54 <ble_observer_scan_info_handler+0x5d0>)
     ac0:	4c18      	ldr	r4, [pc, #96]	; (b24 <ble_observer_scan_info_handler+0x5a0>)
     ac2:	47a0      	blx	r4
				DBG_LOG_CONT(":  ");
     ac4:	4818      	ldr	r0, [pc, #96]	; (b28 <ble_observer_scan_info_handler+0x5a4>)
     ac6:	47a0      	blx	r4

				memcpy(&adv_interval_t, adv_element_p->data,
     ac8:	9903      	ldr	r1, [sp, #12]
     aca:	ad04      	add	r5, sp, #16
     acc:	1c28      	adds	r0, r5, #0
     ace:	2202      	movs	r2, #2
     ad0:	4b17      	ldr	r3, [pc, #92]	; (b30 <ble_observer_scan_info_handler+0x5ac>)
     ad2:	4798      	blx	r3
						ADV_INTERVAL_SIZE);
				DBG_LOG_CONT("0x%02x", adv_interval_t);
     ad4:	8829      	ldrh	r1, [r5, #0]
     ad6:	481d      	ldr	r0, [pc, #116]	; (b4c <ble_observer_scan_info_handler+0x5c8>)
     ad8:	47a0      	blx	r4
				adv_element_p->data += ADV_INTERVAL_SIZE;
     ada:	9b03      	ldr	r3, [sp, #12]
     adc:	3302      	adds	r3, #2
     ade:	9303      	str	r3, [sp, #12]
			break;

			default:
				DBG_LOG_DEV("Unknown ad type");
			}
			index += (adv_element_data.len + 1);
     ae0:	ab02      	add	r3, sp, #8
     ae2:	781b      	ldrb	r3, [r3, #0]
     ae4:	3301      	adds	r3, #1
     ae6:	4443      	add	r3, r8
     ae8:	b2db      	uxtb	r3, r3
     aea:	4698      	mov	r8, r3
			adv_element_data.len += 1;
     aec:	ab02      	add	r3, sp, #8
     aee:	781b      	ldrb	r3, [r3, #0]
     af0:	3301      	adds	r3, #1
     af2:	b2db      	uxtb	r3, r3
     af4:	aa02      	add	r2, sp, #8
     af6:	7013      	strb	r3, [r2, #0]
			adv_data_size -= adv_element_data.len;
     af8:	7813      	ldrb	r3, [r2, #0]
     afa:	465a      	mov	r2, fp
     afc:	1ad3      	subs	r3, r2, r3
     afe:	b2db      	uxtb	r3, r3
     b00:	469b      	mov	fp, r3
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		
		while (adv_data_size) {
     b02:	2b00      	cmp	r3, #0
     b04:	d000      	beq.n	b08 <ble_observer_scan_info_handler+0x584>
     b06:	e5cb      	b.n	6a0 <ble_observer_scan_info_handler+0x11c>
			index += (adv_element_data.len + 1);
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}
	state = beacon;
     b08:	2201      	movs	r2, #1
     b0a:	4b13      	ldr	r3, [pc, #76]	; (b58 <ble_observer_scan_info_handler+0x5d4>)
     b0c:	701a      	strb	r2, [r3, #0]
	startBeacon();
     b0e:	4b13      	ldr	r3, [pc, #76]	; (b5c <ble_observer_scan_info_handler+0x5d8>)
     b10:	4798      	blx	r3
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	00008708 	.word	0x00008708
     b18:	000075f9 	.word	0x000075f9
     b1c:	0000870c 	.word	0x0000870c
     b20:	00008980 	.word	0x00008980
     b24:	000074d9 	.word	0x000074d9
     b28:	00008730 	.word	0x00008730
     b2c:	00008958 	.word	0x00008958
     b30:	000074b7 	.word	0x000074b7
     b34:	000089a0 	.word	0x000089a0
     b38:	0000750d 	.word	0x0000750d
     b3c:	000089b4 	.word	0x000089b4
     b40:	000089c8 	.word	0x000089c8
     b44:	00008930 	.word	0x00008930
     b48:	000089e4 	.word	0x000089e4
     b4c:	000089f0 	.word	0x000089f0
     b50:	000089f8 	.word	0x000089f8
     b54:	00008a08 	.word	0x00008a08
     b58:	20000730 	.word	0x20000730
     b5c:	00000515 	.word	0x00000515

00000b60 <ble_observer_scan_data_handler>:
	return AT_BLE_SUCCESS;
}

/* Handler for AT_BLE_SCAN_REPORT event from stack */
at_ble_status_t ble_observer_scan_data_handler(void *param)
{
     b60:	b508      	push	{r3, lr}
	DBG_LOG("Scan Complete. Total No.of device scanned:%d", scan_device_count);
     b62:	4807      	ldr	r0, [pc, #28]	; (b80 <ble_observer_scan_data_handler+0x20>)
     b64:	4b07      	ldr	r3, [pc, #28]	; (b84 <ble_observer_scan_data_handler+0x24>)
     b66:	4798      	blx	r3
     b68:	4b07      	ldr	r3, [pc, #28]	; (b88 <ble_observer_scan_data_handler+0x28>)
     b6a:	7819      	ldrb	r1, [r3, #0]
     b6c:	4807      	ldr	r0, [pc, #28]	; (b8c <ble_observer_scan_data_handler+0x2c>)
     b6e:	4b08      	ldr	r3, [pc, #32]	; (b90 <ble_observer_scan_data_handler+0x30>)
     b70:	4798      	blx	r3
	//ble_observer_init();
	at_ble_scan_stop();
     b72:	4b08      	ldr	r3, [pc, #32]	; (b94 <ble_observer_scan_data_handler+0x34>)
     b74:	4798      	blx	r3
	state = beacon;
     b76:	2201      	movs	r2, #1
     b78:	4b07      	ldr	r3, [pc, #28]	; (b98 <ble_observer_scan_data_handler+0x38>)
     b7a:	701a      	strb	r2, [r3, #0]
	startBeacon();
     b7c:	4b07      	ldr	r3, [pc, #28]	; (b9c <ble_observer_scan_data_handler+0x3c>)
     b7e:	4798      	blx	r3
     b80:	00008708 	.word	0x00008708
     b84:	000075f9 	.word	0x000075f9
     b88:	20000ec0 	.word	0x20000ec0
     b8c:	00008a20 	.word	0x00008a20
     b90:	000074d9 	.word	0x000074d9
     b94:	0000468d 	.word	0x0000468d
     b98:	20000730 	.word	0x20000730
     b9c:	00000515 	.word	0x00000515

00000ba0 <main>:
	}
}


int main(void )
{
     ba0:	b510      	push	{r4, lr}
     ba2:	b084      	sub	sp, #16
	bsp_init();
     ba4:	4b1e      	ldr	r3, [pc, #120]	; (c20 <main+0x80>)
     ba6:	4798      	blx	r3

	/* Initialize the LED */
	LED_init();
     ba8:	4b1e      	ldr	r3, [pc, #120]	; (c24 <main+0x84>)
     baa:	4798      	blx	r3

	/* Initialize serial console */
	serial_console_init();
     bac:	4b1e      	ldr	r3, [pc, #120]	; (c28 <main+0x88>)
     bae:	4798      	blx	r3

	/* Initialize the button */
	button_register_callback(button_cb);
     bb0:	481e      	ldr	r0, [pc, #120]	; (c2c <main+0x8c>)
     bb2:	4b1f      	ldr	r3, [pc, #124]	; (c30 <main+0x90>)
     bb4:	4798      	blx	r3

	//ble_timer_start(BLE_APP_TIMER_ID1, MS_TIMER(1000), BLE_TIMER_REPEAT, app_timer1_cb);
	ble_timer_start(BLE_APP_TIMER_ID2, MS_TIMER(500), BLE_TIMER_REPEAT, app_timer2_cb);
     bb6:	2001      	movs	r0, #1
     bb8:	491e      	ldr	r1, [pc, #120]	; (c34 <main+0x94>)
     bba:	2201      	movs	r2, #1
     bbc:	4b1e      	ldr	r3, [pc, #120]	; (c38 <main+0x98>)
     bbe:	4c1f      	ldr	r4, [pc, #124]	; (c3c <main+0x9c>)
     bc0:	47a0      	blx	r4

	/* initialize the ble chip  and Set the device mac address */
	ble_device_init(NULL);
     bc2:	2000      	movs	r0, #0
     bc4:	4b1e      	ldr	r3, [pc, #120]	; (c40 <main+0xa0>)
     bc6:	4798      	blx	r3
	
	/* observer init */
	//ble_observer_init();
	
	state = observer;
     bc8:	2200      	movs	r2, #0
     bca:	4b1e      	ldr	r3, [pc, #120]	; (c44 <main+0xa4>)
     bcc:	701a      	strb	r2, [r3, #0]
	
	/* Register callbacks for gap related events */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
     bce:	2000      	movs	r0, #0
     bd0:	2100      	movs	r1, #0
     bd2:	4a1d      	ldr	r2, [pc, #116]	; (c48 <main+0xa8>)
     bd4:	4b1d      	ldr	r3, [pc, #116]	; (c4c <main+0xac>)
     bd6:	4798      	blx	r3
									BLE_GAP_EVENT_TYPE,
									observer_app_gap_cb);
									
	/*set Beacon advertisement data */
	at_ble_status_t _status;
	if((_status = at_ble_adv_data_set(adv_data, sizeof(adv_data), NULL, 0)) != AT_BLE_SUCCESS){
     bd8:	481d      	ldr	r0, [pc, #116]	; (c50 <main+0xb0>)
     bda:	211b      	movs	r1, #27
     bdc:	2200      	movs	r2, #0
     bde:	2300      	movs	r3, #0
     be0:	4c1c      	ldr	r4, [pc, #112]	; (c54 <main+0xb4>)
     be2:	47a0      	blx	r4
     be4:	1e01      	subs	r1, r0, #0
     be6:	d003      	beq.n	bf0 <main+0x50>
		printf("\nBLE Beacon advertisement data set failed =0x%x\n", _status);
     be8:	481b      	ldr	r0, [pc, #108]	; (c58 <main+0xb8>)
     bea:	4b1c      	ldr	r3, [pc, #112]	; (c5c <main+0xbc>)
     bec:	4798      	blx	r3
		while(1);
     bee:	e7fe      	b.n	bee <main+0x4e>
	}
	printf("\nBLE Beacon advertisement data set\n");
     bf0:	481b      	ldr	r0, [pc, #108]	; (c60 <main+0xc0>)
     bf2:	4b1c      	ldr	r3, [pc, #112]	; (c64 <main+0xc4>)
     bf4:	4798      	blx	r3
	
	
	
	if((_status = at_ble_adv_start(
     bf6:	23c8      	movs	r3, #200	; 0xc8
     bf8:	00db      	lsls	r3, r3, #3
     bfa:	9300      	str	r3, [sp, #0]
     bfc:	2300      	movs	r3, #0
     bfe:	9301      	str	r3, [sp, #4]
     c00:	9302      	str	r3, [sp, #8]
     c02:	2003      	movs	r0, #3
     c04:	2103      	movs	r1, #3
     c06:	2200      	movs	r2, #0
     c08:	4c17      	ldr	r4, [pc, #92]	; (c68 <main+0xc8>)
     c0a:	47a0      	blx	r4
     c0c:	1e01      	subs	r1, r0, #0
     c0e:	d003      	beq.n	c18 <main+0x78>
	AT_BLE_ADV_FP_ANY,
	1600,
	0,
	false
	)) != AT_BLE_SUCCESS){
		printf("BLE Beacon advertisement failed =0x%x\n", _status);
     c10:	4816      	ldr	r0, [pc, #88]	; (c6c <main+0xcc>)
     c12:	4b12      	ldr	r3, [pc, #72]	; (c5c <main+0xbc>)
     c14:	4798      	blx	r3
		while(1);
     c16:	e7fe      	b.n	c16 <main+0x76>
	}
	printf("\nBLE Beacon advertisement ok\n");
     c18:	4815      	ldr	r0, [pc, #84]	; (c70 <main+0xd0>)
     c1a:	4b12      	ldr	r3, [pc, #72]	; (c64 <main+0xc4>)
     c1c:	4798      	blx	r3
	
	/* Receiving events */
	while (1) {
		//ble_event_task();
	}
     c1e:	e7fe      	b.n	c1e <main+0x7e>
     c20:	00002485 	.word	0x00002485
     c24:	000024b1 	.word	0x000024b1
     c28:	00002491 	.word	0x00002491
     c2c:	00000505 	.word	0x00000505
     c30:	00002505 	.word	0x00002505
     c34:	00005dc0 	.word	0x00005dc0
     c38:	00000511 	.word	0x00000511
     c3c:	00002515 	.word	0x00002515
     c40:	00002fe1 	.word	0x00002fe1
     c44:	20000730 	.word	0x20000730
     c48:	00008614 	.word	0x00008614
     c4c:	00002f11 	.word	0x00002f11
     c50:	20000000 	.word	0x20000000
     c54:	000044cd 	.word	0x000044cd
     c58:	00008668 	.word	0x00008668
     c5c:	000074d9 	.word	0x000074d9
     c60:	0000869c 	.word	0x0000869c
     c64:	000075f9 	.word	0x000075f9
     c68:	00004551 	.word	0x00004551
     c6c:	000086c0 	.word	0x000086c0
     c70:	000086e8 	.word	0x000086e8

00000c74 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
     c74:	e7fe      	b.n	c74 <Dummy_Handler>
     c76:	46c0      	nop			; (mov r8, r8)

00000c78 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     c78:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     c7a:	4b1d      	ldr	r3, [pc, #116]	; (cf0 <Reset_Handler+0x78>)
     c7c:	4a1d      	ldr	r2, [pc, #116]	; (cf4 <Reset_Handler+0x7c>)
     c7e:	429a      	cmp	r2, r3
     c80:	d003      	beq.n	c8a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     c82:	4b1d      	ldr	r3, [pc, #116]	; (cf8 <Reset_Handler+0x80>)
     c84:	4a1a      	ldr	r2, [pc, #104]	; (cf0 <Reset_Handler+0x78>)
     c86:	429a      	cmp	r2, r3
     c88:	d304      	bcc.n	c94 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     c8a:	4b1c      	ldr	r3, [pc, #112]	; (cfc <Reset_Handler+0x84>)
     c8c:	4a1c      	ldr	r2, [pc, #112]	; (d00 <Reset_Handler+0x88>)
     c8e:	429a      	cmp	r2, r3
     c90:	d310      	bcc.n	cb4 <Reset_Handler+0x3c>
     c92:	e01e      	b.n	cd2 <Reset_Handler+0x5a>
     c94:	4a1b      	ldr	r2, [pc, #108]	; (d04 <Reset_Handler+0x8c>)
     c96:	4b18      	ldr	r3, [pc, #96]	; (cf8 <Reset_Handler+0x80>)
     c98:	3303      	adds	r3, #3
     c9a:	1a9b      	subs	r3, r3, r2
     c9c:	089b      	lsrs	r3, r3, #2
     c9e:	3301      	adds	r3, #1
     ca0:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     ca2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     ca4:	4812      	ldr	r0, [pc, #72]	; (cf0 <Reset_Handler+0x78>)
     ca6:	4913      	ldr	r1, [pc, #76]	; (cf4 <Reset_Handler+0x7c>)
     ca8:	588c      	ldr	r4, [r1, r2]
     caa:	5084      	str	r4, [r0, r2]
     cac:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     cae:	429a      	cmp	r2, r3
     cb0:	d1fa      	bne.n	ca8 <Reset_Handler+0x30>
     cb2:	e7ea      	b.n	c8a <Reset_Handler+0x12>
     cb4:	4a14      	ldr	r2, [pc, #80]	; (d08 <Reset_Handler+0x90>)
     cb6:	4b11      	ldr	r3, [pc, #68]	; (cfc <Reset_Handler+0x84>)
     cb8:	3303      	adds	r3, #3
     cba:	1a9b      	subs	r3, r3, r2
     cbc:	089b      	lsrs	r3, r3, #2
     cbe:	3301      	adds	r3, #1
     cc0:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     cc2:	2200      	movs	r2, #0
                *pDest++ = 0;
     cc4:	480e      	ldr	r0, [pc, #56]	; (d00 <Reset_Handler+0x88>)
     cc6:	2100      	movs	r1, #0
     cc8:	1814      	adds	r4, r2, r0
     cca:	6021      	str	r1, [r4, #0]
     ccc:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     cce:	429a      	cmp	r2, r3
     cd0:	d1fa      	bne.n	cc8 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     cd2:	4a0e      	ldr	r2, [pc, #56]	; (d0c <Reset_Handler+0x94>)
     cd4:	21ff      	movs	r1, #255	; 0xff
     cd6:	4b0e      	ldr	r3, [pc, #56]	; (d10 <Reset_Handler+0x98>)
     cd8:	438b      	bics	r3, r1
     cda:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     cdc:	4a0d      	ldr	r2, [pc, #52]	; (d14 <Reset_Handler+0x9c>)
     cde:	6851      	ldr	r1, [r2, #4]
     ce0:	2380      	movs	r3, #128	; 0x80
     ce2:	430b      	orrs	r3, r1
     ce4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     ce6:	4b0c      	ldr	r3, [pc, #48]	; (d18 <Reset_Handler+0xa0>)
     ce8:	4798      	blx	r3

        /* Branch to main function */
        main();
     cea:	4b0c      	ldr	r3, [pc, #48]	; (d1c <Reset_Handler+0xa4>)
     cec:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     cee:	e7fe      	b.n	cee <Reset_Handler+0x76>
     cf0:	20000000 	.word	0x20000000
     cf4:	0000c7c0 	.word	0x0000c7c0
     cf8:	20000098 	.word	0x20000098
     cfc:	20002224 	.word	0x20002224
     d00:	20000098 	.word	0x20000098
     d04:	20000004 	.word	0x20000004
     d08:	2000009c 	.word	0x2000009c
     d0c:	e000ed00 	.word	0xe000ed00
     d10:	00000000 	.word	0x00000000
     d14:	41004000 	.word	0x41004000
     d18:	0000744d 	.word	0x0000744d
     d1c:	00000ba1 	.word	0x00000ba1

00000d20 <atomic_enter_critical>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     d20:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     d24:	6003      	str	r3, [r0, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     d26:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d28:	f3bf 8f5f 	dmb	sy
  __disable_irq();
  __DMB();
}
     d2c:	4770      	bx	lr
     d2e:	46c0      	nop			; (mov r8, r8)

00000d30 <atomic_leave_critical>:
     d30:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     d34:	6803      	ldr	r3, [r0, #0]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d36:	f383 8810 	msr	PRIMASK, r3
}
     d3a:	4770      	bx	lr

00000d3c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     d3c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     d3e:	4b02      	ldr	r3, [pc, #8]	; (d48 <delay_init+0xc>)
     d40:	6018      	str	r0, [r3, #0]
     d42:	4b02      	ldr	r3, [pc, #8]	; (d4c <delay_init+0x10>)
     d44:	4798      	blx	r3
}
     d46:	bd08      	pop	{r3, pc}
     d48:	20000100 	.word	0x20000100
     d4c:	00001969 	.word	0x00001969

00000d50 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     d50:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     d52:	4b04      	ldr	r3, [pc, #16]	; (d64 <delay_ms+0x14>)
     d54:	681c      	ldr	r4, [r3, #0]
     d56:	4b04      	ldr	r3, [pc, #16]	; (d68 <delay_ms+0x18>)
     d58:	4798      	blx	r3
     d5a:	1c01      	adds	r1, r0, #0
     d5c:	1c20      	adds	r0, r4, #0
     d5e:	4b03      	ldr	r3, [pc, #12]	; (d6c <delay_ms+0x1c>)
     d60:	4798      	blx	r3
}
     d62:	bd10      	pop	{r4, pc}
     d64:	20000100 	.word	0x20000100
     d68:	0000194d 	.word	0x0000194d
     d6c:	0000196d 	.word	0x0000196d

00000d70 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     d72:	2401      	movs	r4, #1
     d74:	2500      	movs	r5, #0

	while (upper >= lower) {
		middle = ( upper + lower ) >> 1;

		if (ext_irqs[middle].pin == pin) {
     d76:	27ff      	movs	r7, #255	; 0xff
     d78:	4e0d      	ldr	r6, [pc, #52]	; (db0 <process_ext_irq+0x40>)
static void process_ext_irq(const uint32_t pin)
{
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

	while (upper >= lower) {
		middle = ( upper + lower ) >> 1;
     d7a:	1963      	adds	r3, r4, r5
     d7c:	105b      	asrs	r3, r3, #1
     d7e:	b2d9      	uxtb	r1, r3

		if (ext_irqs[middle].pin == pin) {
     d80:	403b      	ands	r3, r7
     d82:	00da      	lsls	r2, r3, #3
     d84:	18b2      	adds	r2, r6, r2
     d86:	6852      	ldr	r2, [r2, #4]
     d88:	4282      	cmp	r2, r0
     d8a:	d106      	bne.n	d9a <process_ext_irq+0x2a>
			if (ext_irqs[middle].cb) {
     d8c:	00db      	lsls	r3, r3, #3
     d8e:	4a08      	ldr	r2, [pc, #32]	; (db0 <process_ext_irq+0x40>)
     d90:	589b      	ldr	r3, [r3, r2]
     d92:	2b00      	cmp	r3, #0
     d94:	d006      	beq.n	da4 <process_ext_irq+0x34>
				ext_irqs[middle].cb();
     d96:	4798      	blx	r3
				return;
     d98:	e008      	b.n	dac <process_ext_irq+0x3c>
			}
		}

		if (ext_irqs[middle].pin < pin) {
     d9a:	4282      	cmp	r2, r0
     d9c:	d202      	bcs.n	da4 <process_ext_irq+0x34>
			lower = middle + 1;
     d9e:	3101      	adds	r1, #1
     da0:	b2cd      	uxtb	r5, r1
     da2:	e001      	b.n	da8 <process_ext_irq+0x38>
		} else {
			upper = middle - 1;
     da4:	3901      	subs	r1, #1
     da6:	b2cc      	uxtb	r4, r1
 */
static void process_ext_irq(const uint32_t pin)
{
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

	while (upper >= lower) {
     da8:	42ac      	cmp	r4, r5
     daa:	d2e6      	bcs.n	d7a <process_ext_irq+0xa>
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	20000104 	.word	0x20000104

00000db4 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
     db4:	b508      	push	{r3, lr}
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
		ext_irqs[i].pin = 0xFFFFFFFF;
     db6:	4b05      	ldr	r3, [pc, #20]	; (dcc <ext_irq_init+0x18>)
     db8:	2201      	movs	r2, #1
     dba:	4252      	negs	r2, r2
     dbc:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb = NULL;
     dbe:	2200      	movs	r2, #0
     dc0:	601a      	str	r2, [r3, #0]
	}

	return _ext_irq_init(process_ext_irq);
     dc2:	4803      	ldr	r0, [pc, #12]	; (dd0 <ext_irq_init+0x1c>)
     dc4:	4b03      	ldr	r3, [pc, #12]	; (dd4 <ext_irq_init+0x20>)
     dc6:	4798      	blx	r3
}
     dc8:	bd08      	pop	{r3, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	20000104 	.word	0x20000104
     dd0:	00000d71 	.word	0x00000d71
     dd4:	00001aa5 	.word	0x00001aa5

00000dd8 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
     dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i = 0, j = 0;
	bool found = false;

	for (; i < EXT_IRQ_AMOUNT; i++) {
		if (ext_irqs[i].pin == pin) {
     dda:	4b1c      	ldr	r3, [pc, #112]	; (e4c <ext_irq_register+0x74>)
     ddc:	685b      	ldr	r3, [r3, #4]
     dde:	4283      	cmp	r3, r0
     de0:	d125      	bne.n	e2e <ext_irq_register+0x56>
			ext_irqs[i].cb = cb;
     de2:	4a1a      	ldr	r2, [pc, #104]	; (e4c <ext_irq_register+0x74>)
     de4:	6011      	str	r1, [r2, #0]
			found = true;
			break;
		}
	}

	if (NULL == cb) {
     de6:	2900      	cmp	r1, #0
     de8:	d117      	bne.n	e1a <ext_irq_register+0x42>
		if (!found) {
			return ERR_INVALID_ARG;
		}

		return _ext_irq_enable(pin, false);
     dea:	1c18      	adds	r0, r3, #0
     dec:	4b18      	ldr	r3, [pc, #96]	; (e50 <ext_irq_register+0x78>)
     dee:	4798      	blx	r3
     df0:	e02a      	b.n	e48 <ext_irq_register+0x70>
	}

	if (!found) {
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
			if (NULL == ext_irqs[i].cb) {
				ext_irqs[i].cb = cb;
     df2:	4b16      	ldr	r3, [pc, #88]	; (e4c <ext_irq_register+0x74>)
     df4:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     df6:	6058      	str	r0, [r3, #4]
				found = true;
     df8:	2301      	movs	r3, #1
     dfa:	e00c      	b.n	e16 <ext_irq_register+0x3e>
				break;
			}
		}
		for (; j < EXT_IRQ_AMOUNT; j++) {
			if (( ext_irqs[i].pin < ext_irqs[j].pin ) &&
     dfc:	3301      	adds	r3, #1
     dfe:	d009      	beq.n	e14 <ext_irq_register+0x3c>
					( ext_irqs[j].pin != 0xFFFFFFFF )) {
				struct ext_irq tmp = ext_irqs[j];
     e00:	4b12      	ldr	r3, [pc, #72]	; (e4c <ext_irq_register+0x74>)
     e02:	681c      	ldr	r4, [r3, #0]
     e04:	6859      	ldr	r1, [r3, #4]

				ext_irqs[j] = ext_irqs[i];
     e06:	1c1a      	adds	r2, r3, #0
     e08:	3208      	adds	r2, #8
     e0a:	1c1d      	adds	r5, r3, #0
     e0c:	cac0      	ldmia	r2!, {r6, r7}
     e0e:	c5c0      	stmia	r5!, {r6, r7}
				ext_irqs[i] = tmp;
     e10:	609c      	str	r4, [r3, #8]
     e12:	60d9      	str	r1, [r3, #12]
     e14:	2300      	movs	r3, #0
			}
		}
	}

	if (!found) {
     e16:	2b00      	cmp	r3, #0
     e18:	d003      	beq.n	e22 <ext_irq_register+0x4a>
		return ERR_INVALID_ARG;
	}

	return _ext_irq_enable(pin, true);
     e1a:	2101      	movs	r1, #1
     e1c:	4b0c      	ldr	r3, [pc, #48]	; (e50 <ext_irq_register+0x78>)
     e1e:	4798      	blx	r3
     e20:	e012      	b.n	e48 <ext_irq_register+0x70>
			}
		}
	}

	if (!found) {
		return ERR_INVALID_ARG;
     e22:	200d      	movs	r0, #13
     e24:	4240      	negs	r0, r0
     e26:	e00f      	b.n	e48 <ext_irq_register+0x70>
		}
	}

	if (NULL == cb) {
		if (!found) {
			return ERR_INVALID_ARG;
     e28:	200d      	movs	r0, #13
     e2a:	4240      	negs	r0, r0
     e2c:	e00c      	b.n	e48 <ext_irq_register+0x70>
			found = true;
			break;
		}
	}

	if (NULL == cb) {
     e2e:	2900      	cmp	r1, #0
     e30:	d0fa      	beq.n	e28 <ext_irq_register+0x50>
		return _ext_irq_enable(pin, false);
	}

	if (!found) {
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
			if (NULL == ext_irqs[i].cb) {
     e32:	4b06      	ldr	r3, [pc, #24]	; (e4c <ext_irq_register+0x74>)
     e34:	681b      	ldr	r3, [r3, #0]
     e36:	2b00      	cmp	r3, #0
     e38:	d0db      	beq.n	df2 <ext_irq_register+0x1a>
				found = true;
				break;
			}
		}
		for (; j < EXT_IRQ_AMOUNT; j++) {
			if (( ext_irqs[i].pin < ext_irqs[j].pin ) &&
     e3a:	4a04      	ldr	r2, [pc, #16]	; (e4c <ext_irq_register+0x74>)
     e3c:	6853      	ldr	r3, [r2, #4]
     e3e:	68d2      	ldr	r2, [r2, #12]
     e40:	429a      	cmp	r2, r3
     e42:	d3db      	bcc.n	dfc <ext_irq_register+0x24>
			}
		}
	}

	if (!found) {
		return ERR_INVALID_ARG;
     e44:	200d      	movs	r0, #13
     e46:	4240      	negs	r0, r0
	}

	return _ext_irq_enable(pin, true);
}
     e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	20000104 	.word	0x20000104
     e50:	00001b65 	.word	0x00001b65

00000e54 <io_write>:
/**
 * \brief IO write interface
 */
int32_t io_write(struct io_descriptor *const io_descr,
		const uint8_t *const buf, const uint16_t length)
{
     e54:	b570      	push	{r4, r5, r6, lr}
     e56:	1c04      	adds	r4, r0, #0
     e58:	1c0d      	adds	r5, r1, #0
     e5a:	1c16      	adds	r6, r2, #0
	ASSERT(io_descr && buf);
     e5c:	2800      	cmp	r0, #0
     e5e:	d003      	beq.n	e68 <io_write+0x14>
     e60:	1c08      	adds	r0, r1, #0
     e62:	1e43      	subs	r3, r0, #1
     e64:	4198      	sbcs	r0, r3
     e66:	e000      	b.n	e6a <io_write+0x16>
     e68:	2000      	movs	r0, #0
     e6a:	4905      	ldr	r1, [pc, #20]	; (e80 <io_write+0x2c>)
     e6c:	223f      	movs	r2, #63	; 0x3f
     e6e:	4b05      	ldr	r3, [pc, #20]	; (e84 <io_write+0x30>)
     e70:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     e72:	6823      	ldr	r3, [r4, #0]
     e74:	1c20      	adds	r0, r4, #0
     e76:	1c29      	adds	r1, r5, #0
     e78:	1c32      	adds	r2, r6, #0
     e7a:	4798      	blx	r3
}
     e7c:	bd70      	pop	{r4, r5, r6, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	00008a50 	.word	0x00008a50
     e84:	000016c9 	.word	0x000016c9

00000e88 <io_read>:
/**
 * \brief IO read interface
 */
int32_t io_read(struct io_descriptor *const io_descr,
		uint8_t *const buf, const uint16_t length)
{
     e88:	b570      	push	{r4, r5, r6, lr}
     e8a:	1c04      	adds	r4, r0, #0
     e8c:	1c0d      	adds	r5, r1, #0
     e8e:	1c16      	adds	r6, r2, #0
	ASSERT(io_descr && buf);
     e90:	2800      	cmp	r0, #0
     e92:	d003      	beq.n	e9c <io_read+0x14>
     e94:	1c08      	adds	r0, r1, #0
     e96:	1e43      	subs	r3, r0, #1
     e98:	4198      	sbcs	r0, r3
     e9a:	e000      	b.n	e9e <io_read+0x16>
     e9c:	2000      	movs	r0, #0
     e9e:	4905      	ldr	r1, [pc, #20]	; (eb4 <io_read+0x2c>)
     ea0:	2249      	movs	r2, #73	; 0x49
     ea2:	4b05      	ldr	r3, [pc, #20]	; (eb8 <io_read+0x30>)
     ea4:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     ea6:	6863      	ldr	r3, [r4, #4]
     ea8:	1c20      	adds	r0, r4, #0
     eaa:	1c29      	adds	r1, r5, #0
     eac:	1c32      	adds	r2, r6, #0
     eae:	4798      	blx	r3
}
     eb0:	bd70      	pop	{r4, r5, r6, pc}
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	00008a50 	.word	0x00008a50
     eb8:	000016c9 	.word	0x000016c9

00000ebc <timer_add_timer_task>:
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list,
		struct timer_task *const new_task,
		const uint32_t time)
{
     ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ebe:	4647      	mov	r7, r8
     ec0:	b480      	push	{r7}
     ec2:	4680      	mov	r8, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void * list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     ec4:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL,
	*head = (struct timer_task *)list_get_head(list);

	if (!head)
     ec6:	2f00      	cmp	r7, #0
     ec8:	d102      	bne.n	ed0 <timer_add_timer_task+0x14>
	{
		list_insert_as_head(list, new_task);
     eca:	4b15      	ldr	r3, [pc, #84]	; (f20 <timer_add_timer_task+0x64>)
     ecc:	4798      	blx	r3
		return;
     ece:	e024      	b.n	f1a <timer_add_timer_task+0x5e>
			time_left = it->interval - ( time - it->time_label );
		} else {
			time_left = it->interval - ( 0xFFFFFFFF - it->time_label ) - time;
		}

		if (time_left >= new_task->interval) {
     ed0:	688e      	ldr	r6, [r1, #8]
     ed2:	1c3c      	adds	r4, r7, #0
     ed4:	2500      	movs	r5, #0
     ed6:	e000      	b.n	eda <timer_add_timer_task+0x1e>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void * list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     ed8:	1c1c      	adds	r4, r3, #0
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
		uint32_t time_left;

		if (it->time_label <= time) {
     eda:	6863      	ldr	r3, [r4, #4]
     edc:	4293      	cmp	r3, r2
     ede:	d804      	bhi.n	eea <timer_add_timer_task+0x2e>
     ee0:	68a0      	ldr	r0, [r4, #8]
     ee2:	4684      	mov	ip, r0
     ee4:	4463      	add	r3, ip
			time_left = it->interval - ( time - it->time_label );
     ee6:	1a9b      	subs	r3, r3, r2
     ee8:	e004      	b.n	ef4 <timer_add_timer_task+0x38>
		} else {
			time_left = it->interval - ( 0xFFFFFFFF - it->time_label ) - time;
     eea:	68a0      	ldr	r0, [r4, #8]
     eec:	4684      	mov	ip, r0
     eee:	4463      	add	r3, ip
     ef0:	3301      	adds	r3, #1
     ef2:	1a9b      	subs	r3, r3, r2
		}

		if (time_left >= new_task->interval) {
     ef4:	42b3      	cmp	r3, r6
     ef6:	d206      	bcs.n	f06 <timer_add_timer_task+0x4a>
     ef8:	2c00      	cmp	r4, #0
     efa:	d00b      	beq.n	f14 <timer_add_timer_task+0x58>
     efc:	6823      	ldr	r3, [r4, #0]
     efe:	1c25      	adds	r5, r4, #0
	{
		list_insert_as_head(list, new_task);
		return;
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     f00:	2b00      	cmp	r3, #0
     f02:	d1e9      	bne.n	ed8 <timer_add_timer_task+0x1c>
     f04:	e006      	b.n	f14 <timer_add_timer_task+0x58>
		}

		prev = it;
	}

	if (it == head) {
     f06:	42bc      	cmp	r4, r7
     f08:	d103      	bne.n	f12 <timer_add_timer_task+0x56>
		list_insert_as_head(list, new_task);
     f0a:	4640      	mov	r0, r8
     f0c:	4b04      	ldr	r3, [pc, #16]	; (f20 <timer_add_timer_task+0x64>)
     f0e:	4798      	blx	r3
     f10:	e003      	b.n	f1a <timer_add_timer_task+0x5e>
     f12:	1c2c      	adds	r4, r5, #0
	} else {
		list_insert_after(prev, new_task);
     f14:	1c20      	adds	r0, r4, #0
     f16:	4b03      	ldr	r3, [pc, #12]	; (f24 <timer_add_timer_task+0x68>)
     f18:	4798      	blx	r3
	}
}
     f1a:	bc04      	pop	{r2}
     f1c:	4690      	mov	r8, r2
     f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f20:	000016f9 	.word	0x000016f9
     f24:	00001725 	.word	0x00001725

00000f28 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     f28:	b5f0      	push	{r4, r5, r6, r7, lr}
     f2a:	4647      	mov	r7, r8
     f2c:	b480      	push	{r7}
     f2e:	b082      	sub	sp, #8
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void * list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     f30:	6945      	ldr	r5, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device,
			struct timer_descriptor, device);
	struct timer_task *it = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t time = ++timer->time;
     f32:	6903      	ldr	r3, [r0, #16]
     f34:	3301      	adds	r3, #1
     f36:	4698      	mov	r8, r3
     f38:	6103      	str	r3, [r0, #16]

	if (( timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN ) ||
     f3a:	7e03      	ldrb	r3, [r0, #24]
     f3c:	07db      	lsls	r3, r3, #31
     f3e:	d40b      	bmi.n	f58 <timer_process_counted+0x30>
			( timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED )) {
     f40:	7e03      	ldrb	r3, [r0, #24]
	struct timer_descriptor *timer = CONTAINER_OF(device,
			struct timer_descriptor, device);
	struct timer_task *it = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t time = ++timer->time;

	if (( timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN ) ||
     f42:	079b      	lsls	r3, r3, #30
     f44:	d408      	bmi.n	f58 <timer_process_counted+0x30>
			( timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED )) {
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && (( time - it->time_label ) >= it->interval )) {
     f46:	2d00      	cmp	r5, #0
     f48:	d02c      	beq.n	fa4 <timer_process_counted+0x7c>
     f4a:	4643      	mov	r3, r8
     f4c:	686a      	ldr	r2, [r5, #4]
     f4e:	1a9b      	subs	r3, r3, r2
     f50:	68aa      	ldr	r2, [r5, #8]
     f52:	4293      	cmp	r3, r2
     f54:	d207      	bcs.n	f66 <timer_process_counted+0x3e>
     f56:	e025      	b.n	fa4 <timer_process_counted+0x7c>
	struct timer_task *it = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t time = ++timer->time;

	if (( timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN ) ||
			( timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED )) {
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     f58:	7e02      	ldrb	r2, [r0, #24]
     f5a:	2302      	movs	r3, #2
     f5c:	4313      	orrs	r3, r2
     f5e:	7603      	strb	r3, [r0, #24]
		return;
     f60:	e020      	b.n	fa4 <timer_process_counted+0x7c>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}

		it = (struct timer_task *)list_get_head(&timer->tasks);
     f62:	1c25      	adds	r5, r4, #0
     f64:	e006      	b.n	f74 <timer_process_counted+0x4c>
     f66:	1c07      	adds	r7, r0, #0
	}

	while (it && (( time - it->time_label ) >= it->interval )) {
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     f68:	2314      	movs	r3, #20
     f6a:	469c      	mov	ip, r3
     f6c:	4484      	add	ip, r0
     f6e:	4663      	mov	r3, ip
     f70:	9301      	str	r3, [sp, #4]
     f72:	4e0e      	ldr	r6, [pc, #56]	; (fac <timer_process_counted+0x84>)
     f74:	9801      	ldr	r0, [sp, #4]
     f76:	47b0      	blx	r6

		if (TIMER_TASK_REPEAT == tmp->mode) {
     f78:	7c2b      	ldrb	r3, [r5, #16]
     f7a:	2b01      	cmp	r3, #1
     f7c:	d106      	bne.n	f8c <timer_process_counted+0x64>
			tmp->time_label = time;
     f7e:	4643      	mov	r3, r8
     f80:	606b      	str	r3, [r5, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	1c29      	adds	r1, r5, #0
     f86:	4642      	mov	r2, r8
     f88:	4b09      	ldr	r3, [pc, #36]	; (fb0 <timer_process_counted+0x88>)
     f8a:	4798      	blx	r3
     f8c:	697c      	ldr	r4, [r7, #20]
		}

		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     f8e:	68eb      	ldr	r3, [r5, #12]
     f90:	1c28      	adds	r0, r5, #0
     f92:	4798      	blx	r3
			( timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED )) {
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && (( time - it->time_label ) >= it->interval )) {
     f94:	2c00      	cmp	r4, #0
     f96:	d005      	beq.n	fa4 <timer_process_counted+0x7c>
     f98:	4643      	mov	r3, r8
     f9a:	6862      	ldr	r2, [r4, #4]
     f9c:	1a9b      	subs	r3, r3, r2
     f9e:	68a2      	ldr	r2, [r4, #8]
     fa0:	4293      	cmp	r3, r2
     fa2:	d2de      	bcs.n	f62 <timer_process_counted+0x3a>

		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     fa4:	b002      	add	sp, #8
     fa6:	bc04      	pop	{r2}
     fa8:	4690      	mov	r8, r2
     faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fac:	0000172d 	.word	0x0000172d
     fb0:	00000ebd 	.word	0x00000ebd

00000fb4 <timer_init>:
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr,
		void *const hw,
		struct _timer_hpl_interface *const func)
{
     fb4:	b538      	push	{r3, r4, r5, lr}
     fb6:	1c04      	adds	r4, r0, #0
     fb8:	1c0d      	adds	r5, r1, #0
	ASSERT(descr && hw);
     fba:	2800      	cmp	r0, #0
     fbc:	d003      	beq.n	fc6 <timer_init+0x12>
     fbe:	1c08      	adds	r0, r1, #0
     fc0:	1e43      	subs	r3, r0, #1
     fc2:	4198      	sbcs	r0, r3
     fc4:	e000      	b.n	fc8 <timer_init+0x14>
     fc6:	2000      	movs	r0, #0
     fc8:	4906      	ldr	r1, [pc, #24]	; (fe4 <timer_init+0x30>)
     fca:	2249      	movs	r2, #73	; 0x49
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <timer_init+0x34>)
     fce:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     fd0:	1c20      	adds	r0, r4, #0
     fd2:	1c29      	adds	r1, r5, #0
     fd4:	4b05      	ldr	r3, [pc, #20]	; (fec <timer_init+0x38>)
     fd6:	4798      	blx	r3
	descr->time = 0;
     fd8:	2300      	movs	r3, #0
     fda:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     fdc:	4b04      	ldr	r3, [pc, #16]	; (ff0 <timer_init+0x3c>)
     fde:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     fe0:	2000      	movs	r0, #0
     fe2:	bd38      	pop	{r3, r4, r5, pc}
     fe4:	00008a64 	.word	0x00008a64
     fe8:	000016c9 	.word	0x000016c9
     fec:	000021d1 	.word	0x000021d1
     ff0:	00000f29 	.word	0x00000f29

00000ff4 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
     ff4:	b510      	push	{r4, lr}
     ff6:	1c04      	adds	r4, r0, #0
	ASSERT(descr);
     ff8:	1e43      	subs	r3, r0, #1
     ffa:	4198      	sbcs	r0, r3
     ffc:	b2c0      	uxtb	r0, r0
     ffe:	4908      	ldr	r1, [pc, #32]	; (1020 <timer_start+0x2c>)
    1000:	2261      	movs	r2, #97	; 0x61
    1002:	4b08      	ldr	r3, [pc, #32]	; (1024 <timer_start+0x30>)
    1004:	4798      	blx	r3

	if (_timer_is_started(&descr->device)) {
    1006:	1c20      	adds	r0, r4, #0
    1008:	4b07      	ldr	r3, [pc, #28]	; (1028 <timer_start+0x34>)
    100a:	4798      	blx	r3
    100c:	2800      	cmp	r0, #0
    100e:	d104      	bne.n	101a <timer_start+0x26>
		return ERR_DENIED;
	}

	_timer_start(&descr->device);
    1010:	1c20      	adds	r0, r4, #0
    1012:	4b06      	ldr	r3, [pc, #24]	; (102c <timer_start+0x38>)
    1014:	4798      	blx	r3

	return ERR_NONE;
    1016:	2000      	movs	r0, #0
    1018:	e001      	b.n	101e <timer_start+0x2a>
int32_t timer_start(struct timer_descriptor *const descr)
{
	ASSERT(descr);

	if (_timer_is_started(&descr->device)) {
		return ERR_DENIED;
    101a:	2011      	movs	r0, #17
    101c:	4240      	negs	r0, r0
	}

	_timer_start(&descr->device);

	return ERR_NONE;
}
    101e:	bd10      	pop	{r4, pc}
    1020:	00008a64 	.word	0x00008a64
    1024:	000016c9 	.word	0x000016c9
    1028:	00002351 	.word	0x00002351
    102c:	0000233d 	.word	0x0000233d

00001030 <timer_add_task>:
/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr,
		struct timer_task *const task)
{
    1030:	b570      	push	{r4, r5, r6, lr}
    1032:	b082      	sub	sp, #8
    1034:	1c04      	adds	r4, r0, #0
    1036:	1c0d      	adds	r5, r1, #0
	ASSERT(descr && task);
    1038:	2800      	cmp	r0, #0
    103a:	d003      	beq.n	1044 <timer_add_task+0x14>
    103c:	1c08      	adds	r0, r1, #0
    103e:	1e43      	subs	r3, r0, #1
    1040:	4198      	sbcs	r0, r3
    1042:	e000      	b.n	1046 <timer_add_task+0x16>
    1044:	2000      	movs	r0, #0
    1046:	491d      	ldr	r1, [pc, #116]	; (10bc <timer_add_task+0x8c>)
    1048:	228e      	movs	r2, #142	; 0x8e
    104a:	4b1d      	ldr	r3, [pc, #116]	; (10c0 <timer_add_task+0x90>)
    104c:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    104e:	7e22      	ldrb	r2, [r4, #24]
    1050:	2301      	movs	r3, #1
    1052:	4313      	orrs	r3, r2
    1054:	7623      	strb	r3, [r4, #24]

	if (is_list_element(&descr->tasks, task)) {
    1056:	1c26      	adds	r6, r4, #0
    1058:	3614      	adds	r6, #20
    105a:	1c30      	adds	r0, r6, #0
    105c:	1c29      	adds	r1, r5, #0
    105e:	4b19      	ldr	r3, [pc, #100]	; (10c4 <timer_add_task+0x94>)
    1060:	4798      	blx	r3
    1062:	2800      	cmp	r0, #0
    1064:	d00b      	beq.n	107e <timer_add_task+0x4e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1066:	7e23      	ldrb	r3, [r4, #24]
    1068:	2201      	movs	r2, #1
    106a:	4393      	bics	r3, r2
    106c:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    106e:	2000      	movs	r0, #0
    1070:	4912      	ldr	r1, [pc, #72]	; (10bc <timer_add_task+0x8c>)
    1072:	3293      	adds	r2, #147	; 0x93
    1074:	4b12      	ldr	r3, [pc, #72]	; (10c0 <timer_add_task+0x90>)
    1076:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1078:	2012      	movs	r0, #18
    107a:	4240      	negs	r0, r0
    107c:	e01c      	b.n	10b8 <timer_add_task+0x88>
	}

	task->time_label = descr->time;
    107e:	6923      	ldr	r3, [r4, #16]
    1080:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1082:	1c30      	adds	r0, r6, #0
    1084:	1c29      	adds	r1, r5, #0
    1086:	6922      	ldr	r2, [r4, #16]
    1088:	4b0f      	ldr	r3, [pc, #60]	; (10c8 <timer_add_task+0x98>)
    108a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    108c:	7e23      	ldrb	r3, [r4, #24]
    108e:	2201      	movs	r2, #1
    1090:	4393      	bics	r3, r2
    1092:	7623      	strb	r3, [r4, #24]

	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1094:	7e23      	ldrb	r3, [r4, #24]
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
		_timer_set_irq(&descr->device);
		CRITICAL_SECTION_LEAVE()
	}

	return ERR_NONE;
    1096:	2000      	movs	r0, #0
	task->time_label = descr->time;
	timer_add_timer_task(&descr->tasks, task, descr->time);

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;

	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1098:	079b      	lsls	r3, r3, #30
    109a:	d50d      	bpl.n	10b8 <timer_add_task+0x88>
		CRITICAL_SECTION_ENTER()
    109c:	a801      	add	r0, sp, #4
    109e:	4b0b      	ldr	r3, [pc, #44]	; (10cc <timer_add_task+0x9c>)
    10a0:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    10a2:	7e23      	ldrb	r3, [r4, #24]
    10a4:	2202      	movs	r2, #2
    10a6:	4393      	bics	r3, r2
    10a8:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    10aa:	1c20      	adds	r0, r4, #0
    10ac:	4b08      	ldr	r3, [pc, #32]	; (10d0 <timer_add_task+0xa0>)
    10ae:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    10b0:	a801      	add	r0, sp, #4
    10b2:	4b08      	ldr	r3, [pc, #32]	; (10d4 <timer_add_task+0xa4>)
    10b4:	4798      	blx	r3
	}

	return ERR_NONE;
    10b6:	2000      	movs	r0, #0
}
    10b8:	b002      	add	sp, #8
    10ba:	bd70      	pop	{r4, r5, r6, pc}
    10bc:	00008a64 	.word	0x00008a64
    10c0:	000016c9 	.word	0x000016c9
    10c4:	000016d1 	.word	0x000016d1
    10c8:	00000ebd 	.word	0x00000ebd
    10cc:	00000d21 	.word	0x00000d21
    10d0:	00002369 	.word	0x00002369
    10d4:	00000d31 	.word	0x00000d31

000010d8 <timer_remove_task>:
/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr,
		const struct timer_task *const task)
{
    10d8:	b570      	push	{r4, r5, r6, lr}
    10da:	b082      	sub	sp, #8
    10dc:	1c04      	adds	r4, r0, #0
    10de:	1c0d      	adds	r5, r1, #0
	ASSERT(descr && task);
    10e0:	2800      	cmp	r0, #0
    10e2:	d003      	beq.n	10ec <timer_remove_task+0x14>
    10e4:	1c08      	adds	r0, r1, #0
    10e6:	1e43      	subs	r3, r0, #1
    10e8:	4198      	sbcs	r0, r3
    10ea:	e000      	b.n	10ee <timer_remove_task+0x16>
    10ec:	2000      	movs	r0, #0
    10ee:	491b      	ldr	r1, [pc, #108]	; (115c <timer_remove_task+0x84>)
    10f0:	22ad      	movs	r2, #173	; 0xad
    10f2:	4b1b      	ldr	r3, [pc, #108]	; (1160 <timer_remove_task+0x88>)
    10f4:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    10f6:	7e22      	ldrb	r2, [r4, #24]
    10f8:	2301      	movs	r3, #1
    10fa:	4313      	orrs	r3, r2
    10fc:	7623      	strb	r3, [r4, #24]

	if (!is_list_element(&descr->tasks, task)) {
    10fe:	1c26      	adds	r6, r4, #0
    1100:	3614      	adds	r6, #20
    1102:	1c30      	adds	r0, r6, #0
    1104:	1c29      	adds	r1, r5, #0
    1106:	4b17      	ldr	r3, [pc, #92]	; (1164 <timer_remove_task+0x8c>)
    1108:	4798      	blx	r3
    110a:	2800      	cmp	r0, #0
    110c:	d10a      	bne.n	1124 <timer_remove_task+0x4c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    110e:	7e23      	ldrb	r3, [r4, #24]
    1110:	2201      	movs	r2, #1
    1112:	4393      	bics	r3, r2
    1114:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1116:	4911      	ldr	r1, [pc, #68]	; (115c <timer_remove_task+0x84>)
    1118:	32b2      	adds	r2, #178	; 0xb2
    111a:	4b11      	ldr	r3, [pc, #68]	; (1160 <timer_remove_task+0x88>)
    111c:	4798      	blx	r3
		return ERR_NOT_FOUND;
    111e:	200a      	movs	r0, #10
    1120:	4240      	negs	r0, r0
    1122:	e019      	b.n	1158 <timer_remove_task+0x80>
	}

	list_delete_element(&descr->tasks, task);
    1124:	1c30      	adds	r0, r6, #0
    1126:	1c29      	adds	r1, r5, #0
    1128:	4b0f      	ldr	r3, [pc, #60]	; (1168 <timer_remove_task+0x90>)
    112a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    112c:	7e23      	ldrb	r3, [r4, #24]
    112e:	2201      	movs	r2, #1
    1130:	4393      	bics	r3, r2
    1132:	7623      	strb	r3, [r4, #24]

	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1134:	7e23      	ldrb	r3, [r4, #24]
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
		_timer_set_irq(&descr->device);
		CRITICAL_SECTION_LEAVE()
	}

	return ERR_NONE;
    1136:	2000      	movs	r0, #0

	list_delete_element(&descr->tasks, task);

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;

	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1138:	079b      	lsls	r3, r3, #30
    113a:	d50d      	bpl.n	1158 <timer_remove_task+0x80>
		CRITICAL_SECTION_ENTER()
    113c:	a801      	add	r0, sp, #4
    113e:	4b0b      	ldr	r3, [pc, #44]	; (116c <timer_remove_task+0x94>)
    1140:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1142:	7e23      	ldrb	r3, [r4, #24]
    1144:	2202      	movs	r2, #2
    1146:	4393      	bics	r3, r2
    1148:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    114a:	1c20      	adds	r0, r4, #0
    114c:	4b08      	ldr	r3, [pc, #32]	; (1170 <timer_remove_task+0x98>)
    114e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1150:	a801      	add	r0, sp, #4
    1152:	4b08      	ldr	r3, [pc, #32]	; (1174 <timer_remove_task+0x9c>)
    1154:	4798      	blx	r3
	}

	return ERR_NONE;
    1156:	2000      	movs	r0, #0
}
    1158:	b002      	add	sp, #8
    115a:	bd70      	pop	{r4, r5, r6, pc}
    115c:	00008a64 	.word	0x00008a64
    1160:	000016c9 	.word	0x000016c9
    1164:	000016d1 	.word	0x000016d1
    1168:	0000173d 	.word	0x0000173d
    116c:	00000d21 	.word	0x00000d21
    1170:	00002369 	.word	0x00002369
    1174:	00000d31 	.word	0x00000d31

00001178 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1178:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device,
    117a:	3808      	subs	r0, #8
		struct usart_async_descriptor, device);

	descr->stat = 0;
    117c:	2300      	movs	r3, #0
    117e:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    1180:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1182:	2b00      	cmp	r3, #0
    1184:	d000      	beq.n	1188 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    1186:	4798      	blx	r3
	}
}
    1188:	bd08      	pop	{r3, pc}
    118a:	46c0      	nop			; (mov r8, r8)

0000118c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    118c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr =
    118e:	3808      	subs	r0, #8
			CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1190:	2300      	movs	r3, #0
    1192:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    1194:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1196:	2b00      	cmp	r3, #0
    1198:	d000      	beq.n	119c <usart_error+0x10>
		descr->usart_cb.error(descr);
    119a:	4798      	blx	r3

	}
}
    119c:	bd08      	pop	{r3, pc}
    119e:	46c0      	nop			; (mov r8, r8)

000011a0 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
    11a0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr =
    11a2:	1c04      	adds	r4, r0, #0
    11a4:	3c08      	subs	r4, #8
			CONTAINER_OF(device, struct usart_async_descriptor, device);

	ringbuffer_put(&descr->rx, data);
    11a6:	302c      	adds	r0, #44	; 0x2c
    11a8:	4b05      	ldr	r3, [pc, #20]	; (11c0 <usart_fill_rx_buffer+0x20>)
    11aa:	4798      	blx	r3
	++descr->rx_bytes_in_buffer;
    11ac:	224e      	movs	r2, #78	; 0x4e
    11ae:	5aa3      	ldrh	r3, [r4, r2]
    11b0:	3301      	adds	r3, #1
    11b2:	52a3      	strh	r3, [r4, r2]

	if (descr->usart_cb.rx_done) {
    11b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11b6:	2b00      	cmp	r3, #0
    11b8:	d001      	beq.n	11be <usart_fill_rx_buffer+0x1e>
		descr->usart_cb.rx_done(descr);
    11ba:	1c20      	adds	r0, r4, #0
    11bc:	4798      	blx	r3
	}
}
    11be:	bd10      	pop	{r4, pc}
    11c0:	0000181d 	.word	0x0000181d

000011c4 <usart_async_write>:
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr,
		const uint8_t *const buf, const uint16_t length)
{
    11c4:	b570      	push	{r4, r5, r6, lr}
    11c6:	1c04      	adds	r4, r0, #0
    11c8:	1c0e      	adds	r6, r1, #0
    11ca:	1c15      	adds	r5, r2, #0
	struct usart_async_descriptor *descr =
			CONTAINER_OF(io_descr, struct usart_async_descriptor, io);

	ASSERT(descr && buf && length);
    11cc:	2800      	cmp	r0, #0
    11ce:	d005      	beq.n	11dc <usart_async_write+0x18>
    11d0:	2900      	cmp	r1, #0
    11d2:	d005      	beq.n	11e0 <usart_async_write+0x1c>
    11d4:	1c10      	adds	r0, r2, #0
    11d6:	1e43      	subs	r3, r0, #1
    11d8:	4198      	sbcs	r0, r3
    11da:	e002      	b.n	11e2 <usart_async_write+0x1e>
    11dc:	2000      	movs	r0, #0
    11de:	e000      	b.n	11e2 <usart_async_write+0x1e>
    11e0:	2000      	movs	r0, #0
    11e2:	490e      	ldr	r1, [pc, #56]	; (121c <usart_async_write+0x58>)
    11e4:	225c      	movs	r2, #92	; 0x5c
    11e6:	32ff      	adds	r2, #255	; 0xff
    11e8:	4b0d      	ldr	r3, [pc, #52]	; (1220 <usart_async_write+0x5c>)
    11ea:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    11ec:	2344      	movs	r3, #68	; 0x44
    11ee:	5ae2      	ldrh	r2, [r4, r3]
    11f0:	3308      	adds	r3, #8
    11f2:	5ae3      	ldrh	r3, [r4, r3]
    11f4:	429a      	cmp	r2, r3
    11f6:	d10d      	bne.n	1214 <usart_async_write+0x50>
		return ERR_NO_RESOURCE;
	}
	descr->tx_buffer = (uint8_t *)buf;
    11f8:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    11fa:	234c      	movs	r3, #76	; 0x4c
    11fc:	52e5      	strh	r5, [r4, r3]
	descr->tx_por = 0;
    11fe:	2200      	movs	r2, #0
    1200:	3b08      	subs	r3, #8
    1202:	52e2      	strh	r2, [r4, r3]
	descr->stat = USART_ASYNC_STATUS_BUSY;
    1204:	3b43      	subs	r3, #67	; 0x43
    1206:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1208:	1c20      	adds	r0, r4, #0
    120a:	3008      	adds	r0, #8
    120c:	4b05      	ldr	r3, [pc, #20]	; (1224 <usart_async_write+0x60>)
    120e:	4798      	blx	r3

	return (int32_t)length;
    1210:	1c28      	adds	r0, r5, #0
    1212:	e001      	b.n	1218 <usart_async_write+0x54>
			CONTAINER_OF(io_descr, struct usart_async_descriptor, io);

	ASSERT(descr && buf && length);

	if (descr->tx_por != descr->tx_buffer_length) {
		return ERR_NO_RESOURCE;
    1214:	201c      	movs	r0, #28
    1216:	4240      	negs	r0, r0
	descr->tx_por = 0;
	descr->stat = USART_ASYNC_STATUS_BUSY;
	_usart_async_enable_byte_sent_irq(&descr->device);

	return (int32_t)length;
}
    1218:	bd70      	pop	{r4, r5, r6, pc}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	00008a7c 	.word	0x00008a7c
    1220:	000016c9 	.word	0x000016c9
    1224:	00002149 	.word	0x00002149

00001228 <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
    1228:	b538      	push	{r3, r4, r5, lr}
    122a:	1c04      	adds	r4, r0, #0
	struct usart_async_descriptor *descr = CONTAINER_OF(device,
		struct usart_async_descriptor, device);

	if (descr->tx_por != descr->tx_buffer_length) {
    122c:	1c01      	adds	r1, r0, #0
    122e:	3908      	subs	r1, #8
    1230:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1232:	224c      	movs	r2, #76	; 0x4c
    1234:	5a8a      	ldrh	r2, [r1, r2]
    1236:	429a      	cmp	r2, r3
    1238:	d00c      	beq.n	1254 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device,
    123a:	1c0a      	adds	r2, r1, #0
				descr->tx_buffer[descr->tx_por++]);
    123c:	6c89      	ldr	r1, [r1, #72]	; 0x48
    123e:	1c5d      	adds	r5, r3, #1
    1240:	2044      	movs	r0, #68	; 0x44
    1242:	5215      	strh	r5, [r2, r0]
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device,
		struct usart_async_descriptor, device);

	if (descr->tx_por != descr->tx_buffer_length) {
		_usart_async_write_byte(&descr->device,
    1244:	5cc9      	ldrb	r1, [r1, r3]
    1246:	1c20      	adds	r0, r4, #0
    1248:	4b04      	ldr	r3, [pc, #16]	; (125c <usart_process_byte_sent+0x34>)
    124a:	4798      	blx	r3
				descr->tx_buffer[descr->tx_por++]);
		_usart_async_enable_byte_sent_irq(&descr->device);
    124c:	1c20      	adds	r0, r4, #0
    124e:	4b04      	ldr	r3, [pc, #16]	; (1260 <usart_process_byte_sent+0x38>)
    1250:	4798      	blx	r3
    1252:	e001      	b.n	1258 <usart_process_byte_sent+0x30>
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
    1254:	4b03      	ldr	r3, [pc, #12]	; (1264 <usart_process_byte_sent+0x3c>)
    1256:	4798      	blx	r3
	}
}
    1258:	bd38      	pop	{r3, r4, r5, pc}
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	00002111 	.word	0x00002111
    1260:	00002149 	.word	0x00002149
    1264:	00002151 	.word	0x00002151

00001268 <usart_async_read>:
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr,
		uint8_t *const buf,	const uint16_t length)
{
    1268:	b5f0      	push	{r4, r5, r6, r7, lr}
    126a:	464f      	mov	r7, r9
    126c:	4646      	mov	r6, r8
    126e:	b4c0      	push	{r6, r7}
    1270:	b085      	sub	sp, #20
    1272:	4680      	mov	r8, r0
    1274:	1c0e      	adds	r6, r1, #0
    1276:	1c17      	adds	r7, r2, #0
	uint16_t was_read = 0;
	uint32_t num;
	struct usart_async_descriptor *descr =
			CONTAINER_OF(io_descr, struct usart_async_descriptor, io);

	ASSERT(descr && buf && length);
    1278:	2800      	cmp	r0, #0
    127a:	d004      	beq.n	1286 <usart_async_read+0x1e>
    127c:	2900      	cmp	r1, #0
    127e:	d002      	beq.n	1286 <usart_async_read+0x1e>
    1280:	2a00      	cmp	r2, #0
    1282:	d12a      	bne.n	12da <usart_async_read+0x72>
    1284:	e040      	b.n	1308 <usart_async_read+0xa0>
    1286:	2000      	movs	r0, #0
    1288:	492e      	ldr	r1, [pc, #184]	; (1344 <usart_async_read+0xdc>)
    128a:	22bd      	movs	r2, #189	; 0xbd
    128c:	0052      	lsls	r2, r2, #1
    128e:	4b2e      	ldr	r3, [pc, #184]	; (1348 <usart_async_read+0xe0>)
    1290:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    1292:	a803      	add	r0, sp, #12
    1294:	4b2d      	ldr	r3, [pc, #180]	; (134c <usart_async_read+0xe4>)
    1296:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1298:	2334      	movs	r3, #52	; 0x34
    129a:	4443      	add	r3, r8
    129c:	9301      	str	r3, [sp, #4]
    129e:	1c18      	adds	r0, r3, #0
    12a0:	4b2b      	ldr	r3, [pc, #172]	; (1350 <usart_async_read+0xe8>)
    12a2:	4798      	blx	r3
    12a4:	1c05      	adds	r5, r0, #0
	CRITICAL_SECTION_LEAVE()
    12a6:	a803      	add	r0, sp, #12
    12a8:	4b2a      	ldr	r3, [pc, #168]	; (1354 <usart_async_read+0xec>)
    12aa:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    12ac:	2d00      	cmp	r5, #0
    12ae:	d010      	beq.n	12d2 <usart_async_read+0x6a>
    12b0:	2f00      	cmp	r7, #0
    12b2:	d010      	beq.n	12d6 <usart_async_read+0x6e>
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr,
		uint8_t *const buf,	const uint16_t length)
{
    12b4:	2100      	movs	r1, #0
    12b6:	2400      	movs	r4, #0
	CRITICAL_SECTION_ENTER()
	num = ringbuffer_num(&descr->rx);
	CRITICAL_SECTION_LEAVE()

	while ((was_read < num) && (was_read < length)) {
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    12b8:	4b27      	ldr	r3, [pc, #156]	; (1358 <usart_async_read+0xf0>)
    12ba:	4699      	mov	r9, r3
    12bc:	3401      	adds	r4, #1
    12be:	b2a4      	uxth	r4, r4
    12c0:	1871      	adds	r1, r6, r1
    12c2:	9801      	ldr	r0, [sp, #4]
    12c4:	47c8      	blx	r9

	CRITICAL_SECTION_ENTER()
	num = ringbuffer_num(&descr->rx);
	CRITICAL_SECTION_LEAVE()

	while ((was_read < num) && (was_read < length)) {
    12c6:	1e21      	subs	r1, r4, #0
    12c8:	42a9      	cmp	r1, r5
    12ca:	d22e      	bcs.n	132a <usart_async_read+0xc2>
    12cc:	42a7      	cmp	r7, r4
    12ce:	d8f5      	bhi.n	12bc <usart_async_read+0x54>
    12d0:	e02b      	b.n	132a <usart_async_read+0xc2>
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr,
		uint8_t *const buf,	const uint16_t length)
{
	uint16_t was_read = 0;
    12d2:	2400      	movs	r4, #0
    12d4:	e029      	b.n	132a <usart_async_read+0xc2>
    12d6:	2400      	movs	r4, #0
    12d8:	e027      	b.n	132a <usart_async_read+0xc2>
	uint32_t num;
	struct usart_async_descriptor *descr =
			CONTAINER_OF(io_descr, struct usart_async_descriptor, io);

	ASSERT(descr && buf && length);
    12da:	2001      	movs	r0, #1
    12dc:	4919      	ldr	r1, [pc, #100]	; (1344 <usart_async_read+0xdc>)
    12de:	22bd      	movs	r2, #189	; 0xbd
    12e0:	0052      	lsls	r2, r2, #1
    12e2:	4b19      	ldr	r3, [pc, #100]	; (1348 <usart_async_read+0xe0>)
    12e4:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    12e6:	a803      	add	r0, sp, #12
    12e8:	4b18      	ldr	r3, [pc, #96]	; (134c <usart_async_read+0xe4>)
    12ea:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    12ec:	2334      	movs	r3, #52	; 0x34
    12ee:	4443      	add	r3, r8
    12f0:	9301      	str	r3, [sp, #4]
    12f2:	1c18      	adds	r0, r3, #0
    12f4:	4b16      	ldr	r3, [pc, #88]	; (1350 <usart_async_read+0xe8>)
    12f6:	4798      	blx	r3
    12f8:	1c05      	adds	r5, r0, #0
	CRITICAL_SECTION_LEAVE()
    12fa:	a803      	add	r0, sp, #12
    12fc:	4b15      	ldr	r3, [pc, #84]	; (1354 <usart_async_read+0xec>)
    12fe:	4798      	blx	r3
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr,
		uint8_t *const buf,	const uint16_t length)
{
	uint16_t was_read = 0;
    1300:	2400      	movs	r4, #0

	CRITICAL_SECTION_ENTER()
	num = ringbuffer_num(&descr->rx);
	CRITICAL_SECTION_LEAVE()

	while ((was_read < num) && (was_read < length)) {
    1302:	2d00      	cmp	r5, #0
    1304:	d011      	beq.n	132a <usart_async_read+0xc2>
    1306:	e7d5      	b.n	12b4 <usart_async_read+0x4c>
	uint16_t was_read = 0;
	uint32_t num;
	struct usart_async_descriptor *descr =
			CONTAINER_OF(io_descr, struct usart_async_descriptor, io);

	ASSERT(descr && buf && length);
    1308:	2000      	movs	r0, #0
    130a:	490e      	ldr	r1, [pc, #56]	; (1344 <usart_async_read+0xdc>)
    130c:	22bd      	movs	r2, #189	; 0xbd
    130e:	0052      	lsls	r2, r2, #1
    1310:	4b0d      	ldr	r3, [pc, #52]	; (1348 <usart_async_read+0xe0>)
    1312:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    1314:	a803      	add	r0, sp, #12
    1316:	4b0d      	ldr	r3, [pc, #52]	; (134c <usart_async_read+0xe4>)
    1318:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    131a:	4640      	mov	r0, r8
    131c:	3034      	adds	r0, #52	; 0x34
    131e:	4b0c      	ldr	r3, [pc, #48]	; (1350 <usart_async_read+0xe8>)
    1320:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1322:	a803      	add	r0, sp, #12
    1324:	4b0b      	ldr	r3, [pc, #44]	; (1354 <usart_async_read+0xec>)
    1326:	4798      	blx	r3
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr,
		uint8_t *const buf,	const uint16_t length)
{
	uint16_t was_read = 0;
    1328:	2400      	movs	r4, #0
	CRITICAL_SECTION_LEAVE()

	while ((was_read < num) && (was_read < length)) {
		ringbuffer_get(&descr->rx, &buf[was_read++]);
	}
	descr->rx_bytes_in_buffer -= was_read;
    132a:	224e      	movs	r2, #78	; 0x4e
    132c:	4643      	mov	r3, r8
    132e:	5a9b      	ldrh	r3, [r3, r2]
    1330:	1b1b      	subs	r3, r3, r4
    1332:	4641      	mov	r1, r8
    1334:	528b      	strh	r3, [r1, r2]

	return (int32_t)was_read;
}
    1336:	1c20      	adds	r0, r4, #0
    1338:	b005      	add	sp, #20
    133a:	bc0c      	pop	{r2, r3}
    133c:	4690      	mov	r8, r2
    133e:	4699      	mov	r9, r3
    1340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	00008a7c 	.word	0x00008a7c
    1348:	000016c9 	.word	0x000016c9
    134c:	00000d21 	.word	0x00000d21
    1350:	0000185d 	.word	0x0000185d
    1354:	00000d31 	.word	0x00000d31
    1358:	000017d5 	.word	0x000017d5

0000135c <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw,
		uint8_t *rx_buffer, uint16_t rx_buffer_length)
{
    135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    135e:	1c04      	adds	r4, r0, #0
    1360:	1c0d      	adds	r5, r1, #0
    1362:	1c16      	adds	r6, r2, #0
    1364:	1c1f      	adds	r7, r3, #0
	int32_t init_status;

	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1366:	2800      	cmp	r0, #0
    1368:	d007      	beq.n	137a <usart_async_init+0x1e>
    136a:	2900      	cmp	r1, #0
    136c:	d007      	beq.n	137e <usart_async_init+0x22>
    136e:	2a00      	cmp	r2, #0
    1370:	d007      	beq.n	1382 <usart_async_init+0x26>
    1372:	1c18      	adds	r0, r3, #0
    1374:	1e43      	subs	r3, r0, #1
    1376:	4198      	sbcs	r0, r3
    1378:	e004      	b.n	1384 <usart_async_init+0x28>
    137a:	2000      	movs	r0, #0
    137c:	e002      	b.n	1384 <usart_async_init+0x28>
    137e:	2000      	movs	r0, #0
    1380:	e000      	b.n	1384 <usart_async_init+0x28>
    1382:	2000      	movs	r0, #0
    1384:	4912      	ldr	r1, [pc, #72]	; (13d0 <usart_async_init+0x74>)
    1386:	2247      	movs	r2, #71	; 0x47
    1388:	4b12      	ldr	r3, [pc, #72]	; (13d4 <usart_async_init+0x78>)
    138a:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    138c:	1c20      	adds	r0, r4, #0
    138e:	3034      	adds	r0, #52	; 0x34
    1390:	1c31      	adds	r1, r6, #0
    1392:	1c3a      	adds	r2, r7, #0
    1394:	4b10      	ldr	r3, [pc, #64]	; (13d8 <usart_async_init+0x7c>)
    1396:	4798      	blx	r3
    1398:	2800      	cmp	r0, #0
    139a:	d116      	bne.n	13ca <usart_async_init+0x6e>
		return ERR_INVALID_ARG;
	}

	init_status = _usart_async_init(&descr->device, hw);
    139c:	1c20      	adds	r0, r4, #0
    139e:	3008      	adds	r0, #8
    13a0:	1c29      	adds	r1, r5, #0
    13a2:	4b0e      	ldr	r3, [pc, #56]	; (13dc <usart_async_init+0x80>)
    13a4:	4798      	blx	r3
    13a6:	1e03      	subs	r3, r0, #0
	if (init_status) {
    13a8:	d111      	bne.n	13ce <usart_async_init+0x72>
		return init_status;
	}

	descr->rx_bytes_in_buffer = 0;
    13aa:	2100      	movs	r1, #0
    13ac:	224e      	movs	r2, #78	; 0x4e
    13ae:	52a1      	strh	r1, [r4, r2]
	descr->io.read  = usart_async_read;
    13b0:	4a0b      	ldr	r2, [pc, #44]	; (13e0 <usart_async_init+0x84>)
    13b2:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    13b4:	4a0b      	ldr	r2, [pc, #44]	; (13e4 <usart_async_init+0x88>)
    13b6:	6022      	str	r2, [r4, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    13b8:	4a0b      	ldr	r2, [pc, #44]	; (13e8 <usart_async_init+0x8c>)
    13ba:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb = usart_fill_rx_buffer;
    13bc:	4a0b      	ldr	r2, [pc, #44]	; (13ec <usart_async_init+0x90>)
    13be:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb = usart_transmission_complete;
    13c0:	4a0b      	ldr	r2, [pc, #44]	; (13f0 <usart_async_init+0x94>)
    13c2:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb = usart_error;
    13c4:	4a0b      	ldr	r2, [pc, #44]	; (13f4 <usart_async_init+0x98>)
    13c6:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
    13c8:	e001      	b.n	13ce <usart_async_init+0x72>
	int32_t init_status;

	ASSERT(descr && hw && rx_buffer && rx_buffer_length);

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
		return ERR_INVALID_ARG;
    13ca:	200d      	movs	r0, #13
    13cc:	4240      	negs	r0, r0
	descr->device.usart_cb.rx_done_cb = usart_fill_rx_buffer;
	descr->device.usart_cb.tx_done_cb = usart_transmission_complete;
	descr->device.usart_cb.error_cb = usart_error;

	return ERR_NONE;
}
    13ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13d0:	00008a7c 	.word	0x00008a7c
    13d4:	000016c9 	.word	0x000016c9
    13d8:	0000177d 	.word	0x0000177d
    13dc:	00002021 	.word	0x00002021
    13e0:	00001269 	.word	0x00001269
    13e4:	000011c5 	.word	0x000011c5
    13e8:	00001229 	.word	0x00001229
    13ec:	000011a1 	.word	0x000011a1
    13f0:	00001179 	.word	0x00001179
    13f4:	0000118d 	.word	0x0000118d

000013f8 <usart_async_deinit>:

/**
 * \brief De-initialize usart interface
 */
int32_t usart_async_deinit(struct usart_async_descriptor *const descr)
{
    13f8:	b510      	push	{r4, lr}
    13fa:	1c04      	adds	r4, r0, #0
	ASSERT(descr);
    13fc:	1e43      	subs	r3, r0, #1
    13fe:	4198      	sbcs	r0, r3
    1400:	b2c0      	uxtb	r0, r0
    1402:	4906      	ldr	r1, [pc, #24]	; (141c <usart_async_deinit+0x24>)
    1404:	2263      	movs	r2, #99	; 0x63
    1406:	4b06      	ldr	r3, [pc, #24]	; (1420 <usart_async_deinit+0x28>)
    1408:	4798      	blx	r3

	_usart_async_deinit(&descr->device);
    140a:	1c20      	adds	r0, r4, #0
    140c:	3008      	adds	r0, #8
    140e:	4b05      	ldr	r3, [pc, #20]	; (1424 <usart_async_deinit+0x2c>)
    1410:	4798      	blx	r3
	descr->io.read   = NULL;
    1412:	2300      	movs	r3, #0
    1414:	6063      	str	r3, [r4, #4]
	descr->io.write  = NULL;
    1416:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
    1418:	2000      	movs	r0, #0
    141a:	bd10      	pop	{r4, pc}
    141c:	00008a7c 	.word	0x00008a7c
    1420:	000016c9 	.word	0x000016c9
    1424:	00002091 	.word	0x00002091

00001428 <usart_async_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_async_enable(struct usart_async_descriptor *const descr)
{
    1428:	b510      	push	{r4, lr}
    142a:	1c04      	adds	r4, r0, #0
	ASSERT(descr);
    142c:	1e43      	subs	r3, r0, #1
    142e:	4198      	sbcs	r0, r3
    1430:	b2c0      	uxtb	r0, r0
    1432:	4905      	ldr	r1, [pc, #20]	; (1448 <usart_async_enable+0x20>)
    1434:	2271      	movs	r2, #113	; 0x71
    1436:	4b05      	ldr	r3, [pc, #20]	; (144c <usart_async_enable+0x24>)
    1438:	4798      	blx	r3

	_usart_async_enable(&descr->device);
    143a:	1c20      	adds	r0, r4, #0
    143c:	3008      	adds	r0, #8
    143e:	4b04      	ldr	r3, [pc, #16]	; (1450 <usart_async_enable+0x28>)
    1440:	4798      	blx	r3

	return ERR_NONE;
}
    1442:	2000      	movs	r0, #0
    1444:	bd10      	pop	{r4, pc}
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	00008a7c 	.word	0x00008a7c
    144c:	000016c9 	.word	0x000016c9
    1450:	000020e1 	.word	0x000020e1

00001454 <usart_async_disable>:

/**
 * \brief Disable usart interface
 */
int32_t usart_async_disable(struct usart_async_descriptor *const descr)
{
    1454:	b510      	push	{r4, lr}
    1456:	1c04      	adds	r4, r0, #0
	ASSERT(descr);
    1458:	1e43      	subs	r3, r0, #1
    145a:	4198      	sbcs	r0, r3
    145c:	b2c0      	uxtb	r0, r0
    145e:	4905      	ldr	r1, [pc, #20]	; (1474 <usart_async_disable+0x20>)
    1460:	227d      	movs	r2, #125	; 0x7d
    1462:	4b05      	ldr	r3, [pc, #20]	; (1478 <usart_async_disable+0x24>)
    1464:	4798      	blx	r3

	_usart_async_disable(&descr->device);
    1466:	1c20      	adds	r0, r4, #0
    1468:	3008      	adds	r0, #8
    146a:	4b04      	ldr	r3, [pc, #16]	; (147c <usart_async_disable+0x28>)
    146c:	4798      	blx	r3

	return ERR_NONE;
}
    146e:	2000      	movs	r0, #0
    1470:	bd10      	pop	{r4, pc}
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	00008a7c 	.word	0x00008a7c
    1478:	000016c9 	.word	0x000016c9
    147c:	000020f5 	.word	0x000020f5

00001480 <usart_async_get_io_descriptor>:
/**
 * \brief Retrieve IO descriptor
 */
int32_t usart_async_get_io_descriptor(struct usart_async_descriptor *const descr,
		struct io_descriptor **io)
{
    1480:	b538      	push	{r3, r4, r5, lr}
    1482:	1c04      	adds	r4, r0, #0
    1484:	1c0d      	adds	r5, r1, #0
	ASSERT(descr && io);
    1486:	2800      	cmp	r0, #0
    1488:	d003      	beq.n	1492 <usart_async_get_io_descriptor+0x12>
    148a:	1c08      	adds	r0, r1, #0
    148c:	1e43      	subs	r3, r0, #1
    148e:	4198      	sbcs	r0, r3
    1490:	e000      	b.n	1494 <usart_async_get_io_descriptor+0x14>
    1492:	2000      	movs	r0, #0
    1494:	4903      	ldr	r1, [pc, #12]	; (14a4 <usart_async_get_io_descriptor+0x24>)
    1496:	228a      	movs	r2, #138	; 0x8a
    1498:	4b03      	ldr	r3, [pc, #12]	; (14a8 <usart_async_get_io_descriptor+0x28>)
    149a:	4798      	blx	r3

	*io = &descr->io;
    149c:	602c      	str	r4, [r5, #0]
	return ERR_NONE;
}
    149e:	2000      	movs	r0, #0
    14a0:	bd38      	pop	{r3, r4, r5, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	00008a7c 	.word	0x00008a7c
    14a8:	000016c9 	.word	0x000016c9

000014ac <usart_async_register_callback>:
/**
 * \brief Register usart callback
 */
int32_t usart_async_register_callback(struct usart_async_descriptor *const descr,
		const enum usart_async_callback_type type, usart_cb_t cb)
{
    14ac:	b570      	push	{r4, r5, r6, lr}
    14ae:	1c05      	adds	r5, r0, #0
    14b0:	1c0e      	adds	r6, r1, #0
    14b2:	1c14      	adds	r4, r2, #0
	ASSERT(descr);
    14b4:	1e43      	subs	r3, r0, #1
    14b6:	4198      	sbcs	r0, r3
    14b8:	b2c0      	uxtb	r0, r0
    14ba:	4917      	ldr	r1, [pc, #92]	; (1518 <usart_async_register_callback+0x6c>)
    14bc:	2296      	movs	r2, #150	; 0x96
    14be:	4b17      	ldr	r3, [pc, #92]	; (151c <usart_async_register_callback+0x70>)
    14c0:	4798      	blx	r3

	switch (type) {
    14c2:	2e01      	cmp	r6, #1
    14c4:	d00f      	beq.n	14e6 <usart_async_register_callback+0x3a>
    14c6:	2e00      	cmp	r6, #0
    14c8:	d002      	beq.n	14d0 <usart_async_register_callback+0x24>
    14ca:	2e02      	cmp	r6, #2
    14cc:	d016      	beq.n	14fc <usart_async_register_callback+0x50>
    14ce:	e020      	b.n	1512 <usart_async_register_callback+0x66>
	case USART_ASYNC_RXC_CB:
		descr->usart_cb.rx_done = cb;
    14d0:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    14d2:	1c28      	adds	r0, r5, #0
    14d4:	3008      	adds	r0, #8
    14d6:	1e62      	subs	r2, r4, #1
    14d8:	4194      	sbcs	r4, r2
    14da:	b2e2      	uxtb	r2, r4
    14dc:	2101      	movs	r1, #1
    14de:	4b10      	ldr	r3, [pc, #64]	; (1520 <usart_async_register_callback+0x74>)
    14e0:	4798      	blx	r3
		break;
	default:
		return ERR_INVALID_ARG;
	}

	return ERR_NONE;
    14e2:	2000      	movs	r0, #0

	switch (type) {
	case USART_ASYNC_RXC_CB:
		descr->usart_cb.rx_done = cb;
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
		break;
    14e4:	e017      	b.n	1516 <usart_async_register_callback+0x6a>
	case USART_ASYNC_TXC_CB:
		descr->usart_cb.tx_done = cb;
    14e6:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    14e8:	1c28      	adds	r0, r5, #0
    14ea:	3008      	adds	r0, #8
    14ec:	1e62      	subs	r2, r4, #1
    14ee:	4194      	sbcs	r4, r2
    14f0:	b2e2      	uxtb	r2, r4
    14f2:	2102      	movs	r1, #2
    14f4:	4b0a      	ldr	r3, [pc, #40]	; (1520 <usart_async_register_callback+0x74>)
    14f6:	4798      	blx	r3
		break;
	default:
		return ERR_INVALID_ARG;
	}

	return ERR_NONE;
    14f8:	2000      	movs	r0, #0
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
		break;
	case USART_ASYNC_TXC_CB:
		descr->usart_cb.tx_done = cb;
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
		break;
    14fa:	e00c      	b.n	1516 <usart_async_register_callback+0x6a>
	case USART_ASYNC_ERROR_CB:
		descr->usart_cb.error = cb;
    14fc:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    14fe:	1c28      	adds	r0, r5, #0
    1500:	3008      	adds	r0, #8
    1502:	1e62      	subs	r2, r4, #1
    1504:	4194      	sbcs	r4, r2
    1506:	b2e2      	uxtb	r2, r4
    1508:	2103      	movs	r1, #3
    150a:	4b05      	ldr	r3, [pc, #20]	; (1520 <usart_async_register_callback+0x74>)
    150c:	4798      	blx	r3
		break;
	default:
		return ERR_INVALID_ARG;
	}

	return ERR_NONE;
    150e:	2000      	movs	r0, #0
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
		break;
	case USART_ASYNC_ERROR_CB:
		descr->usart_cb.error = cb;
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
		break;
    1510:	e001      	b.n	1516 <usart_async_register_callback+0x6a>
	default:
		return ERR_INVALID_ARG;
    1512:	200d      	movs	r0, #13
    1514:	4240      	negs	r0, r0
	}

	return ERR_NONE;
}
    1516:	bd70      	pop	{r4, r5, r6, pc}
    1518:	00008a7c 	.word	0x00008a7c
    151c:	000016c9 	.word	0x000016c9
    1520:	00002159 	.word	0x00002159

00001524 <usart_async_set_flow_control>:
/**
 * \brief Specify action for flow control pins
 */
int32_t usart_async_set_flow_control(struct usart_async_descriptor *const descr,
		const union usart_flow_control_state state)
{
    1524:	b538      	push	{r3, r4, r5, lr}
    1526:	1c04      	adds	r4, r0, #0
    1528:	1c0d      	adds	r5, r1, #0
	ASSERT(descr);
    152a:	1e43      	subs	r3, r0, #1
    152c:	4198      	sbcs	r0, r3
    152e:	b2c0      	uxtb	r0, r0
    1530:	4905      	ldr	r1, [pc, #20]	; (1548 <usart_async_set_flow_control+0x24>)
    1532:	22b2      	movs	r2, #178	; 0xb2
    1534:	4b05      	ldr	r3, [pc, #20]	; (154c <usart_async_set_flow_control+0x28>)
    1536:	4798      	blx	r3

	_usart_async_set_flow_control_state(&descr->device, state);
    1538:	1c20      	adds	r0, r4, #0
    153a:	3008      	adds	r0, #8
    153c:	1c29      	adds	r1, r5, #0
    153e:	4b04      	ldr	r3, [pc, #16]	; (1550 <usart_async_set_flow_control+0x2c>)
    1540:	4798      	blx	r3
	return ERR_NONE;
}
    1542:	2000      	movs	r0, #0
    1544:	bd38      	pop	{r3, r4, r5, pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	00008a7c 	.word	0x00008a7c
    154c:	000016c9 	.word	0x000016c9
    1550:	00002145 	.word	0x00002145

00001554 <usart_async_is_tx_empty>:

/**
 * \brief Check if the usart transmitter is empty
 */
int32_t usart_async_is_tx_empty(const struct usart_async_descriptor *const descr)
{
    1554:	b510      	push	{r4, lr}
    1556:	1c04      	adds	r4, r0, #0
	ASSERT(descr);
    1558:	1e43      	subs	r3, r0, #1
    155a:	4198      	sbcs	r0, r3
    155c:	b2c0      	uxtb	r0, r0
    155e:	4905      	ldr	r1, [pc, #20]	; (1574 <usart_async_is_tx_empty+0x20>)
    1560:	2289      	movs	r2, #137	; 0x89
    1562:	0052      	lsls	r2, r2, #1
    1564:	4b04      	ldr	r3, [pc, #16]	; (1578 <usart_async_is_tx_empty+0x24>)
    1566:	4798      	blx	r3

	return _usart_async_is_byte_sent(&descr->device);
    1568:	1c20      	adds	r0, r4, #0
    156a:	3008      	adds	r0, #8
    156c:	4b03      	ldr	r3, [pc, #12]	; (157c <usart_async_is_tx_empty+0x28>)
    156e:	4798      	blx	r3
}
    1570:	bd10      	pop	{r4, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	00008a7c 	.word	0x00008a7c
    1578:	000016c9 	.word	0x000016c9
    157c:	0000212d 	.word	0x0000212d

00001580 <usart_sync_write>:
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr,
		const uint8_t *const buf, const uint16_t length)
{
    1580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1582:	464f      	mov	r7, r9
    1584:	4646      	mov	r6, r8
    1586:	b4c0      	push	{r6, r7}
    1588:	1c05      	adds	r5, r0, #0
    158a:	1c0f      	adds	r7, r1, #0
    158c:	4690      	mov	r8, r2
	uint32_t offset = 0;
	struct usart_sync_descriptor *descr =
			CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    158e:	2800      	cmp	r0, #0
    1590:	d005      	beq.n	159e <usart_sync_write+0x1e>
    1592:	2900      	cmp	r1, #0
    1594:	d005      	beq.n	15a2 <usart_sync_write+0x22>
    1596:	1c10      	adds	r0, r2, #0
    1598:	1e43      	subs	r3, r0, #1
    159a:	4198      	sbcs	r0, r3
    159c:	e002      	b.n	15a4 <usart_sync_write+0x24>
    159e:	2000      	movs	r0, #0
    15a0:	e000      	b.n	15a4 <usart_sync_write+0x24>
    15a2:	2000      	movs	r0, #0
    15a4:	490f      	ldr	r1, [pc, #60]	; (15e4 <usart_sync_write+0x64>)
    15a6:	2289      	movs	r2, #137	; 0x89
    15a8:	0052      	lsls	r2, r2, #1
    15aa:	4b0f      	ldr	r3, [pc, #60]	; (15e8 <usart_sync_write+0x68>)
    15ac:	4798      	blx	r3

	while (!_usart_sync_is_byte_sent(&descr->device));
    15ae:	3508      	adds	r5, #8
    15b0:	4e0e      	ldr	r6, [pc, #56]	; (15ec <usart_sync_write+0x6c>)
    15b2:	1c2c      	adds	r4, r5, #0
    15b4:	1c28      	adds	r0, r5, #0
    15b6:	47b0      	blx	r6
    15b8:	2800      	cmp	r0, #0
    15ba:	d0fa      	beq.n	15b2 <usart_sync_write+0x32>
    15bc:	2600      	movs	r6, #0
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    15be:	4b0c      	ldr	r3, [pc, #48]	; (15f0 <usart_sync_write+0x70>)
    15c0:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_sent(&descr->device));
    15c2:	4d0a      	ldr	r5, [pc, #40]	; (15ec <usart_sync_write+0x6c>)

	ASSERT(io_descr && buf && length);

	while (!_usart_sync_is_byte_sent(&descr->device));
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    15c4:	5db9      	ldrb	r1, [r7, r6]
    15c6:	1c20      	adds	r0, r4, #0
    15c8:	47c8      	blx	r9
		while (!_usart_sync_is_byte_sent(&descr->device));
    15ca:	1c20      	adds	r0, r4, #0
    15cc:	47a8      	blx	r5
    15ce:	2800      	cmp	r0, #0
    15d0:	d0fb      	beq.n	15ca <usart_sync_write+0x4a>
	} while (++offset < length);
    15d2:	3601      	adds	r6, #1
    15d4:	4546      	cmp	r6, r8
    15d6:	d3f5      	bcc.n	15c4 <usart_sync_write+0x44>

	return (int32_t)offset;
}
    15d8:	1c30      	adds	r0, r6, #0
    15da:	bc0c      	pop	{r2, r3}
    15dc:	4690      	mov	r8, r2
    15de:	4699      	mov	r9, r3
    15e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15e2:	46c0      	nop			; (mov r8, r8)
    15e4:	00008a9c 	.word	0x00008a9c
    15e8:	000016c9 	.word	0x000016c9
    15ec:	00002121 	.word	0x00002121
    15f0:	00002109 	.word	0x00002109

000015f4 <usart_sync_read>:
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr,
	uint8_t *const buf, const uint16_t length)
{
    15f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15f6:	4647      	mov	r7, r8
    15f8:	b480      	push	{r7}
    15fa:	1c04      	adds	r4, r0, #0
    15fc:	1c0f      	adds	r7, r1, #0
    15fe:	4690      	mov	r8, r2
	uint32_t offset = 0;
	struct usart_sync_descriptor *descr =
			CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1600:	2800      	cmp	r0, #0
    1602:	d005      	beq.n	1610 <usart_sync_read+0x1c>
    1604:	2900      	cmp	r1, #0
    1606:	d005      	beq.n	1614 <usart_sync_read+0x20>
    1608:	1c10      	adds	r0, r2, #0
    160a:	1e43      	subs	r3, r0, #1
    160c:	4198      	sbcs	r0, r3
    160e:	e002      	b.n	1616 <usart_sync_read+0x22>
    1610:	2000      	movs	r0, #0
    1612:	e000      	b.n	1616 <usart_sync_read+0x22>
    1614:	2000      	movs	r0, #0
    1616:	490b      	ldr	r1, [pc, #44]	; (1644 <usart_sync_read+0x50>)
    1618:	222e      	movs	r2, #46	; 0x2e
    161a:	32ff      	adds	r2, #255	; 0xff
    161c:	4b0a      	ldr	r3, [pc, #40]	; (1648 <usart_sync_read+0x54>)
    161e:	4798      	blx	r3
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr,
	uint8_t *const buf, const uint16_t length)
{
	uint32_t offset = 0;
    1620:	2600      	movs	r6, #0
			CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);

	do {
		while (!_usart_sync_is_byte_received(&descr->device));
    1622:	4d0a      	ldr	r5, [pc, #40]	; (164c <usart_sync_read+0x58>)
    1624:	3408      	adds	r4, #8
    1626:	1c20      	adds	r0, r4, #0
    1628:	47a8      	blx	r5
    162a:	2800      	cmp	r0, #0
    162c:	d0fb      	beq.n	1626 <usart_sync_read+0x32>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    162e:	1c20      	adds	r0, r4, #0
    1630:	4b07      	ldr	r3, [pc, #28]	; (1650 <usart_sync_read+0x5c>)
    1632:	4798      	blx	r3
    1634:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    1636:	3601      	adds	r6, #1
    1638:	4546      	cmp	r6, r8
    163a:	d3f4      	bcc.n	1626 <usart_sync_read+0x32>

	return (int32_t)offset;
}
    163c:	1c30      	adds	r0, r6, #0
    163e:	bc04      	pop	{r2}
    1640:	4690      	mov	r8, r2
    1642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1644:	00008a9c 	.word	0x00008a9c
    1648:	000016c9 	.word	0x000016c9
    164c:	00002139 	.word	0x00002139
    1650:	00002119 	.word	0x00002119

00001654 <usart_sync_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr,
		void *const hw)
{
    1654:	b538      	push	{r3, r4, r5, lr}
    1656:	1c04      	adds	r4, r0, #0
    1658:	1c0d      	adds	r5, r1, #0
	int32_t init_status;

	ASSERT(descr && hw);
    165a:	2800      	cmp	r0, #0
    165c:	d003      	beq.n	1666 <usart_sync_init+0x12>
    165e:	1c08      	adds	r0, r1, #0
    1660:	1e43      	subs	r3, r0, #1
    1662:	4198      	sbcs	r0, r3
    1664:	e000      	b.n	1668 <usart_sync_init+0x14>
    1666:	2000      	movs	r0, #0
    1668:	4907      	ldr	r1, [pc, #28]	; (1688 <usart_sync_init+0x34>)
    166a:	2242      	movs	r2, #66	; 0x42
    166c:	4b07      	ldr	r3, [pc, #28]	; (168c <usart_sync_init+0x38>)
    166e:	4798      	blx	r3

	init_status = _usart_sync_init(&descr->device, hw);
    1670:	1c20      	adds	r0, r4, #0
    1672:	3008      	adds	r0, #8
    1674:	1c29      	adds	r1, r5, #0
    1676:	4b06      	ldr	r3, [pc, #24]	; (1690 <usart_sync_init+0x3c>)
    1678:	4798      	blx	r3
	if (init_status) {
    167a:	2800      	cmp	r0, #0
    167c:	d103      	bne.n	1686 <usart_sync_init+0x32>
		return init_status;
	}

	descr->io.read  = usart_sync_read;
    167e:	4b05      	ldr	r3, [pc, #20]	; (1694 <usart_sync_init+0x40>)
    1680:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
    1682:	4b05      	ldr	r3, [pc, #20]	; (1698 <usart_sync_init+0x44>)
    1684:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
    1686:	bd38      	pop	{r3, r4, r5, pc}
    1688:	00008a9c 	.word	0x00008a9c
    168c:	000016c9 	.word	0x000016c9
    1690:	00001ff5 	.word	0x00001ff5
    1694:	000015f5 	.word	0x000015f5
    1698:	00001581 	.word	0x00001581

0000169c <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    169c:	b510      	push	{r4, lr}
    169e:	1c04      	adds	r4, r0, #0
	ASSERT(descr);
    16a0:	1e43      	subs	r3, r0, #1
    16a2:	4198      	sbcs	r0, r3
    16a4:	b2c0      	uxtb	r0, r0
    16a6:	4905      	ldr	r1, [pc, #20]	; (16bc <usart_sync_enable+0x20>)
    16a8:	2263      	movs	r2, #99	; 0x63
    16aa:	4b05      	ldr	r3, [pc, #20]	; (16c0 <usart_sync_enable+0x24>)
    16ac:	4798      	blx	r3

	_usart_sync_enable(&descr->device);
    16ae:	1c20      	adds	r0, r4, #0
    16b0:	3008      	adds	r0, #8
    16b2:	4b04      	ldr	r3, [pc, #16]	; (16c4 <usart_sync_enable+0x28>)
    16b4:	4798      	blx	r3

	return ERR_NONE;
}
    16b6:	2000      	movs	r0, #0
    16b8:	bd10      	pop	{r4, pc}
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	00008a9c 	.word	0x00008a9c
    16c0:	000016c9 	.word	0x000016c9
    16c4:	000020cd 	.word	0x000020cd

000016c8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    if (!(condition)) {
    16c8:	2800      	cmp	r0, #0
    16ca:	d100      	bne.n	16ce <assert+0x6>
        __asm("BKPT #0");
    16cc:	be00      	bkpt	0x0000
    }
    (void)file;
    (void)line;
}
    16ce:	4770      	bx	lr

000016d0 <is_list_element>:
 */
bool is_list_element(const struct list_descriptor *const list,
		const void *const element)
{
	struct list_element *it;
	for (it = list->head; it;it = it->next) {
    16d0:	6803      	ldr	r3, [r0, #0]
    16d2:	2b00      	cmp	r3, #0
    16d4:	d009      	beq.n	16ea <is_list_element+0x1a>
		if (it == element) {
    16d6:	428b      	cmp	r3, r1
    16d8:	d102      	bne.n	16e0 <is_list_element+0x10>
    16da:	e008      	b.n	16ee <is_list_element+0x1e>
    16dc:	4299      	cmp	r1, r3
    16de:	d008      	beq.n	16f2 <is_list_element+0x22>
 */
bool is_list_element(const struct list_descriptor *const list,
		const void *const element)
{
	struct list_element *it;
	for (it = list->head; it;it = it->next) {
    16e0:	681b      	ldr	r3, [r3, #0]
    16e2:	2b00      	cmp	r3, #0
    16e4:	d1fa      	bne.n	16dc <is_list_element+0xc>
		if (it == element) {
			return true;
		}
	}

	return false;
    16e6:	2000      	movs	r0, #0
    16e8:	e004      	b.n	16f4 <is_list_element+0x24>
    16ea:	2000      	movs	r0, #0
    16ec:	e002      	b.n	16f4 <is_list_element+0x24>
		const void *const element)
{
	struct list_element *it;
	for (it = list->head; it;it = it->next) {
		if (it == element) {
			return true;
    16ee:	2001      	movs	r0, #1
    16f0:	e000      	b.n	16f4 <is_list_element+0x24>
    16f2:	2001      	movs	r0, #1
		}
	}

	return false;
}
    16f4:	4770      	bx	lr
    16f6:	46c0      	nop			; (mov r8, r8)

000016f8 <list_insert_as_head>:
/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list,
		void *const element)
{
    16f8:	b538      	push	{r3, r4, r5, lr}
    16fa:	1c04      	adds	r4, r0, #0
    16fc:	1c0d      	adds	r5, r1, #0
	ASSERT(!is_list_element(list, element));
    16fe:	4b06      	ldr	r3, [pc, #24]	; (1718 <list_insert_as_head+0x20>)
    1700:	4798      	blx	r3
    1702:	2301      	movs	r3, #1
    1704:	4058      	eors	r0, r3
    1706:	b2c0      	uxtb	r0, r0
    1708:	4904      	ldr	r1, [pc, #16]	; (171c <list_insert_as_head+0x24>)
    170a:	2245      	movs	r2, #69	; 0x45
    170c:	4b04      	ldr	r3, [pc, #16]	; (1720 <list_insert_as_head+0x28>)
    170e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1710:	6823      	ldr	r3, [r4, #0]
    1712:	602b      	str	r3, [r5, #0]
	list->head = (struct list_element *)element;
    1714:	6025      	str	r5, [r4, #0]
}
    1716:	bd38      	pop	{r3, r4, r5, pc}
    1718:	000016d1 	.word	0x000016d1
    171c:	00008ab8 	.word	0x00008ab8
    1720:	000016c9 	.word	0x000016c9

00001724 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next =
    1724:	6803      	ldr	r3, [r0, #0]
    1726:	600b      	str	r3, [r1, #0]
			((struct list_element *)after)->next;
	((struct list_element *)after)->next = (struct list_element *)element;
    1728:	6001      	str	r1, [r0, #0]
}
    172a:	4770      	bx	lr

0000172c <list_remove_head>:
/**
 * \brief Removes list head
 */
void * list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    172c:	6803      	ldr	r3, [r0, #0]
    172e:	2b00      	cmp	r3, #0
    1730:	d001      	beq.n	1736 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1732:	681a      	ldr	r2, [r3, #0]
    1734:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1736:	1c18      	adds	r0, r3, #0
    1738:	4770      	bx	lr
    173a:	46c0      	nop			; (mov r8, r8)

0000173c <list_delete_element>:
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list,
		const void *const element)
{
	if (!element) {
    173c:	2900      	cmp	r1, #0
    173e:	d015      	beq.n	176c <list_delete_element+0x30>
		return false;
	}

	if (list->head == element) {
    1740:	6802      	ldr	r2, [r0, #0]
    1742:	428a      	cmp	r2, r1
    1744:	d103      	bne.n	174e <list_delete_element+0x12>
		list->head = list->head->next;
    1746:	6813      	ldr	r3, [r2, #0]
    1748:	6003      	str	r3, [r0, #0]
		return true;
    174a:	2001      	movs	r0, #1
    174c:	e015      	b.n	177a <list_delete_element+0x3e>
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
    174e:	2a00      	cmp	r2, #0
    1750:	d00e      	beq.n	1770 <list_delete_element+0x34>
    1752:	6813      	ldr	r3, [r2, #0]
    1754:	428b      	cmp	r3, r1
    1756:	d105      	bne.n	1764 <list_delete_element+0x28>
    1758:	1c13      	adds	r3, r2, #0
    175a:	e00b      	b.n	1774 <list_delete_element+0x38>
    175c:	681a      	ldr	r2, [r3, #0]
    175e:	428a      	cmp	r2, r1
    1760:	d008      	beq.n	1774 <list_delete_element+0x38>
    1762:	1c13      	adds	r3, r2, #0
    1764:	2b00      	cmp	r3, #0
    1766:	d1f9      	bne.n	175c <list_delete_element+0x20>
			it->next = ((struct list_element *)element)->next;
			return true;
		}
	}

	return false;
    1768:	2000      	movs	r0, #0
    176a:	e006      	b.n	177a <list_delete_element+0x3e>
 */
bool list_delete_element(struct list_descriptor *const list,
		const void *const element)
{
	if (!element) {
		return false;
    176c:	2000      	movs	r0, #0
    176e:	e004      	b.n	177a <list_delete_element+0x3e>
			it->next = ((struct list_element *)element)->next;
			return true;
		}
	}

	return false;
    1770:	2000      	movs	r0, #0
    1772:	e002      	b.n	177a <list_delete_element+0x3e>

		while (it && it->next != element) {
			it = it->next;
		}
		if (it) {
			it->next = ((struct list_element *)element)->next;
    1774:	680a      	ldr	r2, [r1, #0]
    1776:	601a      	str	r2, [r3, #0]
			return true;
    1778:	2001      	movs	r0, #1
		}
	}

	return false;
}
    177a:	4770      	bx	lr

0000177c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *rb, void *buf, uint32_t size)
{
    177c:	b570      	push	{r4, r5, r6, lr}
    177e:	1c04      	adds	r4, r0, #0
    1780:	1c0e      	adds	r6, r1, #0
    1782:	1c15      	adds	r5, r2, #0
	ASSERT(rb && buf && size);
    1784:	2800      	cmp	r0, #0
    1786:	d005      	beq.n	1794 <ringbuffer_init+0x18>
    1788:	2900      	cmp	r1, #0
    178a:	d005      	beq.n	1798 <ringbuffer_init+0x1c>
    178c:	2001      	movs	r0, #1
    178e:	2a00      	cmp	r2, #0
    1790:	d103      	bne.n	179a <ringbuffer_init+0x1e>
    1792:	e013      	b.n	17bc <ringbuffer_init+0x40>
    1794:	2000      	movs	r0, #0
    1796:	e000      	b.n	179a <ringbuffer_init+0x1e>
    1798:	2000      	movs	r0, #0
    179a:	490c      	ldr	r1, [pc, #48]	; (17cc <ringbuffer_init+0x50>)
    179c:	2232      	movs	r2, #50	; 0x32
    179e:	4b0c      	ldr	r3, [pc, #48]	; (17d0 <ringbuffer_init+0x54>)
    17a0:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    17a2:	1e6b      	subs	r3, r5, #1
    17a4:	421d      	tst	r5, r3
    17a6:	d106      	bne.n	17b6 <ringbuffer_init+0x3a>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size = size - 1;
    17a8:	6063      	str	r3, [r4, #4]
	rb->read_index = 0;
    17aa:	2300      	movs	r3, #0
    17ac:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    17ae:	60e3      	str	r3, [r4, #12]
	rb->buf = (uint8_t *)buf;
    17b0:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    17b2:	2000      	movs	r0, #0
    17b4:	e009      	b.n	17ca <ringbuffer_init+0x4e>

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
		return ERR_INVALID_ARG;
    17b6:	200d      	movs	r0, #13
    17b8:	4240      	negs	r0, r0
    17ba:	e006      	b.n	17ca <ringbuffer_init+0x4e>
/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *rb, void *buf, uint32_t size)
{
	ASSERT(rb && buf && size);
    17bc:	2000      	movs	r0, #0
    17be:	4903      	ldr	r1, [pc, #12]	; (17cc <ringbuffer_init+0x50>)
    17c0:	2232      	movs	r2, #50	; 0x32
    17c2:	4b03      	ldr	r3, [pc, #12]	; (17d0 <ringbuffer_init+0x54>)
    17c4:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    17c6:	1e6b      	subs	r3, r5, #1
    17c8:	e7ee      	b.n	17a8 <ringbuffer_init+0x2c>
	rb->read_index = 0;
	rb->write_index = rb->read_index;
	rb->buf = (uint8_t *)buf;

	return ERR_NONE;
}
    17ca:	bd70      	pop	{r4, r5, r6, pc}
    17cc:	00008ad8 	.word	0x00008ad8
    17d0:	000016c9 	.word	0x000016c9

000017d4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *rb, uint8_t *data)
{
    17d4:	b538      	push	{r3, r4, r5, lr}
    17d6:	1c04      	adds	r4, r0, #0
    17d8:	1c0d      	adds	r5, r1, #0
	ASSERT(rb && data);
    17da:	2800      	cmp	r0, #0
    17dc:	d003      	beq.n	17e6 <ringbuffer_get+0x12>
    17de:	1c08      	adds	r0, r1, #0
    17e0:	1e43      	subs	r3, r0, #1
    17e2:	4198      	sbcs	r0, r3
    17e4:	e000      	b.n	17e8 <ringbuffer_get+0x14>
    17e6:	2000      	movs	r0, #0
    17e8:	490a      	ldr	r1, [pc, #40]	; (1814 <ringbuffer_get+0x40>)
    17ea:	224a      	movs	r2, #74	; 0x4a
    17ec:	4b0a      	ldr	r3, [pc, #40]	; (1818 <ringbuffer_get+0x44>)
    17ee:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    17f0:	68a3      	ldr	r3, [r4, #8]
    17f2:	68e2      	ldr	r2, [r4, #12]
    17f4:	429a      	cmp	r2, r3
    17f6:	d009      	beq.n	180c <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
    17f8:	6862      	ldr	r2, [r4, #4]
    17fa:	4013      	ands	r3, r2
    17fc:	6822      	ldr	r2, [r4, #0]
    17fe:	5cd3      	ldrb	r3, [r2, r3]
    1800:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1802:	68a3      	ldr	r3, [r4, #8]
    1804:	3301      	adds	r3, #1
    1806:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1808:	2000      	movs	r0, #0
    180a:	e001      	b.n	1810 <ringbuffer_get+0x3c>
	}

	return ERR_NOT_FOUND;
    180c:	200a      	movs	r0, #10
    180e:	4240      	negs	r0, r0
}
    1810:	bd38      	pop	{r3, r4, r5, pc}
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	00008ad8 	.word	0x00008ad8
    1818:	000016c9 	.word	0x000016c9

0000181c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *rb, uint8_t data)
{
    181c:	b538      	push	{r3, r4, r5, lr}
    181e:	1c04      	adds	r4, r0, #0
    1820:	1c0d      	adds	r5, r1, #0
	ASSERT(rb);
    1822:	1e43      	subs	r3, r0, #1
    1824:	4198      	sbcs	r0, r3
    1826:	b2c0      	uxtb	r0, r0
    1828:	490a      	ldr	r1, [pc, #40]	; (1854 <ringbuffer_put+0x38>)
    182a:	225b      	movs	r2, #91	; 0x5b
    182c:	4b0a      	ldr	r3, [pc, #40]	; (1858 <ringbuffer_put+0x3c>)
    182e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1830:	68e3      	ldr	r3, [r4, #12]
    1832:	6862      	ldr	r2, [r4, #4]
    1834:	4013      	ands	r3, r2
    1836:	6822      	ldr	r2, [r4, #0]
    1838:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    183a:	68e3      	ldr	r3, [r4, #12]
    183c:	6861      	ldr	r1, [r4, #4]
    183e:	68a2      	ldr	r2, [r4, #8]
    1840:	1a9a      	subs	r2, r3, r2
    1842:	428a      	cmp	r2, r1
    1844:	d901      	bls.n	184a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    1846:	1a59      	subs	r1, r3, r1
    1848:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    184a:	3301      	adds	r3, #1
    184c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    184e:	2000      	movs	r0, #0
    1850:	bd38      	pop	{r3, r4, r5, pc}
    1852:	46c0      	nop			; (mov r8, r8)
    1854:	00008ad8 	.word	0x00008ad8
    1858:	000016c9 	.word	0x000016c9

0000185c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(struct ringbuffer *rb)
{
    185c:	b510      	push	{r4, lr}
    185e:	1c04      	adds	r4, r0, #0
	ASSERT(rb);
    1860:	1e43      	subs	r3, r0, #1
    1862:	4198      	sbcs	r0, r3
    1864:	b2c0      	uxtb	r0, r0
    1866:	4904      	ldr	r1, [pc, #16]	; (1878 <ringbuffer_num+0x1c>)
    1868:	2271      	movs	r2, #113	; 0x71
    186a:	4b04      	ldr	r3, [pc, #16]	; (187c <ringbuffer_num+0x20>)
    186c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    186e:	68e3      	ldr	r3, [r4, #12]
    1870:	68a0      	ldr	r0, [r4, #8]
    1872:	1a18      	subs	r0, r3, r0
}
    1874:	bd10      	pop	{r4, pc}
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	00008ad8 	.word	0x00008ad8
    187c:	000016c9 	.word	0x000016c9

00001880 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1880:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1882:	4a06      	ldr	r2, [pc, #24]	; (189c <_sbrk+0x1c>)
    1884:	6812      	ldr	r2, [r2, #0]
    1886:	2a00      	cmp	r2, #0
    1888:	d102      	bne.n	1890 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    188a:	4905      	ldr	r1, [pc, #20]	; (18a0 <_sbrk+0x20>)
    188c:	4a03      	ldr	r2, [pc, #12]	; (189c <_sbrk+0x1c>)
    188e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1890:	4a02      	ldr	r2, [pc, #8]	; (189c <_sbrk+0x1c>)
    1892:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1894:	18c3      	adds	r3, r0, r3
    1896:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1898:	4770      	bx	lr
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	2000010c 	.word	0x2000010c
    18a0:	20004228 	.word	0x20004228

000018a4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    18a4:	2001      	movs	r0, #1
    18a6:	4240      	negs	r0, r0
    18a8:	4770      	bx	lr
    18aa:	46c0      	nop			; (mov r8, r8)

000018ac <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    18ac:	2380      	movs	r3, #128	; 0x80
    18ae:	019b      	lsls	r3, r3, #6
    18b0:	604b      	str	r3, [r1, #4]

	return 0;
}
    18b2:	2000      	movs	r0, #0
    18b4:	4770      	bx	lr
    18b6:	46c0      	nop			; (mov r8, r8)

000018b8 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    18b8:	2001      	movs	r0, #1
    18ba:	4770      	bx	lr

000018bc <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    18bc:	2000      	movs	r0, #0
    18be:	4770      	bx	lr

000018c0 <_irq_disable>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    18c0:	231f      	movs	r3, #31
    18c2:	4018      	ands	r0, r3
    18c4:	3b1e      	subs	r3, #30
    18c6:	4083      	lsls	r3, r0
    18c8:	1c18      	adds	r0, r3, #0
    18ca:	2380      	movs	r3, #128	; 0x80
    18cc:	4a01      	ldr	r2, [pc, #4]	; (18d4 <_irq_disable+0x14>)
    18ce:	50d0      	str	r0, [r2, r3]
 * \brief Disable the given IRQ
 */
void _irq_disable(uint8_t n)
{
	NVIC_DisableIRQ((IRQn_Type)n);
}
    18d0:	4770      	bx	lr
    18d2:	46c0      	nop			; (mov r8, r8)
    18d4:	e000e100 	.word	0xe000e100

000018d8 <_irq_set>:

    \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    18d8:	231f      	movs	r3, #31
    18da:	4018      	ands	r0, r3
    18dc:	3b1e      	subs	r3, #30
    18de:	4083      	lsls	r3, r0
    18e0:	1c18      	adds	r0, r3, #0
    18e2:	2380      	movs	r3, #128	; 0x80
    18e4:	005b      	lsls	r3, r3, #1
    18e6:	4a01      	ldr	r2, [pc, #4]	; (18ec <_irq_set+0x14>)
    18e8:	50d0      	str	r0, [r2, r3]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    18ea:	4770      	bx	lr
    18ec:	e000e100 	.word	0xe000e100

000018f0 <_irq_clear>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    18f0:	231f      	movs	r3, #31
    18f2:	4018      	ands	r0, r3
    18f4:	3b1e      	subs	r3, #30
    18f6:	4083      	lsls	r3, r0
    18f8:	1c18      	adds	r0, r3, #0
    18fa:	23c0      	movs	r3, #192	; 0xc0
    18fc:	005b      	lsls	r3, r3, #1
    18fe:	4a01      	ldr	r2, [pc, #4]	; (1904 <_irq_clear+0x14>)
    1900:	50d0      	str	r0, [r2, r3]
 * \brief Clear the given IRQ
 */
void _irq_clear(uint8_t n)
{
	NVIC_ClearPendingIRQ((IRQn_Type)n);
}
    1902:	4770      	bx	lr
    1904:	e000e100 	.word	0xe000e100

00001908 <_irq_enable>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1908:	231f      	movs	r3, #31
    190a:	4018      	ands	r0, r3
    190c:	3b1e      	subs	r3, #30
    190e:	4083      	lsls	r3, r0
    1910:	1c18      	adds	r0, r3, #0
    1912:	4b01      	ldr	r3, [pc, #4]	; (1918 <_irq_enable+0x10>)
    1914:	6018      	str	r0, [r3, #0]
 * \brief Enable the given IRQ
 */
void _irq_enable(uint8_t n)
{
	NVIC_EnableIRQ((IRQn_Type)n);
}
    1916:	4770      	bx	lr
    1918:	e000e100 	.word	0xe000e100

0000191c <_irq_register>:

/**
 * \brief Register IRQ handler
 */
void _irq_register(const uint8_t n, struct _irq_descriptor *const irq)
{
    191c:	b538      	push	{r3, r4, r5, lr}
    191e:	1c04      	adds	r4, r0, #0
    1920:	1c0d      	adds	r5, r1, #0
	ASSERT(n < PERIPH_COUNT_IRQn);
    1922:	2000      	movs	r0, #0
    1924:	231c      	movs	r3, #28
    1926:	42a3      	cmp	r3, r4
    1928:	4140      	adcs	r0, r0
    192a:	b2c0      	uxtb	r0, r0
    192c:	4903      	ldr	r1, [pc, #12]	; (193c <_irq_register+0x20>)
    192e:	228c      	movs	r2, #140	; 0x8c
    1930:	4b03      	ldr	r3, [pc, #12]	; (1940 <_irq_register+0x24>)
    1932:	4798      	blx	r3

	_irq_table[n] = irq;
    1934:	00a4      	lsls	r4, r4, #2
    1936:	4b03      	ldr	r3, [pc, #12]	; (1944 <_irq_register+0x28>)
    1938:	50e5      	str	r5, [r4, r3]
}
    193a:	bd38      	pop	{r3, r4, r5, pc}
    193c:	00008afc 	.word	0x00008afc
    1940:	000016c9 	.word	0x000016c9
    1944:	20000ec4 	.word	0x20000ec4

00001948 <Default_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Default_Handler(void)
{
        while (1) {
        }
    1948:	e7fe      	b.n	1948 <Default_Handler>
    194a:	46c0      	nop			; (mov r8, r8)

0000194c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    194c:	b508      	push	{r3, lr}
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms,
		const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8: return (ms * (freq / 100000) + 2) / 3 * 100;
    194e:	0103      	lsls	r3, r0, #4
    1950:	1a1b      	subs	r3, r3, r0
    1952:	015b      	lsls	r3, r3, #5
    1954:	1a18      	subs	r0, r3, r0
    1956:	3002      	adds	r0, #2
    1958:	2103      	movs	r1, #3
    195a:	4b02      	ldr	r3, [pc, #8]	; (1964 <_get_cycles_for_ms+0x18>)
    195c:	4798      	blx	r3
    195e:	2364      	movs	r3, #100	; 0x64
    1960:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1962:	bd08      	pop	{r3, pc}
    1964:	00007281 	.word	0x00007281

00001968 <_delay_init>:
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	(void)hw;
}
    1968:	4770      	bx	lr
    196a:	46c0      	nop			; (mov r8, r8)

0000196c <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm (
    196c:	3901      	subs	r1, #1
    196e:	d8fd      	bhi.n	196c <_delay_cycles>
		"subs r1, r1, #1\n" \
		"bhi __delay\n"
	);
#endif
#endif
}
    1970:	4770      	bx	lr
    1972:	46c0      	nop			; (mov r8, r8)

00001974 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1974:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1976:	4a09      	ldr	r2, [pc, #36]	; (199c <_init_chip+0x28>)
    1978:	6851      	ldr	r1, [r2, #4]
    197a:	2304      	movs	r3, #4
    197c:	430b      	orrs	r3, r1
    197e:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
    1980:	2002      	movs	r0, #2
    1982:	4b07      	ldr	r3, [pc, #28]	; (19a0 <_init_chip+0x2c>)
    1984:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1986:	4b07      	ldr	r3, [pc, #28]	; (19a4 <_init_chip+0x30>)
    1988:	4798      	blx	r3
	_oscctrl_init_sources();
    198a:	4b07      	ldr	r3, [pc, #28]	; (19a8 <_init_chip+0x34>)
    198c:	4798      	blx	r3
	_mclk_init();
    198e:	4b07      	ldr	r3, [pc, #28]	; (19ac <_init_chip+0x38>)
    1990:	4798      	blx	r3
	_gclk_init_generators();
    1992:	4b07      	ldr	r3, [pc, #28]	; (19b0 <_init_chip+0x3c>)
    1994:	4798      	blx	r3
	_oscctrl_init_referenced_generators();
    1996:	4b07      	ldr	r3, [pc, #28]	; (19b4 <_init_chip+0x40>)
    1998:	4798      	blx	r3
}
    199a:	bd08      	pop	{r3, pc}
    199c:	41004000 	.word	0x41004000
    19a0:	00001c71 	.word	0x00001c71
    19a4:	00001bb9 	.word	0x00001bb9
    19a8:	00001bd9 	.word	0x00001bd9
    19ac:	00001ba5 	.word	0x00001ba5
    19b0:	00001b8d 	.word	0x00001b8d
    19b4:	00001bf1 	.word	0x00001bf1

000019b8 <_ext_irq_handler>:

/**
 * \brief EIC interrupt handler
 */
static void _ext_irq_handler(void *p)
{
    19b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ba:	4657      	mov	r7, sl
    19bc:	464e      	mov	r6, r9
    19be:	4645      	mov	r5, r8
    19c0:	b4e0      	push	{r5, r6, r7}
    19c2:	b082      	sub	sp, #8
        return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw) 
{
        return ((Eic *)hw)->INTFLAG.reg;
    19c4:	4b31      	ldr	r3, [pc, #196]	; (1a8c <_ext_irq_handler+0xd4>)
    19c6:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    19c8:	9201      	str	r2, [sp, #4]
	int8_t pos;
	uint32_t pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    19ca:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask) 
{
        ((Eic *)hw)->INTFLAG.reg = mask;
    19cc:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    19ce:	4b30      	ldr	r3, [pc, #192]	; (1a90 <_ext_irq_handler+0xd8>)
    19d0:	6818      	ldr	r0, [r3, #0]
    19d2:	1e43      	subs	r3, r0, #1
    19d4:	4198      	sbcs	r0, r3
    19d6:	b2c0      	uxtb	r0, r0
    19d8:	492e      	ldr	r1, [pc, #184]	; (1a94 <_ext_irq_handler+0xdc>)
    19da:	22ff      	movs	r2, #255	; 0xff
    19dc:	4b2e      	ldr	r3, [pc, #184]	; (1a98 <_ext_irq_handler+0xe0>)
    19de:	4798      	blx	r3

	while (flags) {
    19e0:	9b01      	ldr	r3, [sp, #4]
    19e2:	2b00      	cmp	r3, #0
    19e4:	d04c      	beq.n	1a80 <_ext_irq_handler+0xc8>
    19e6:	2301      	movs	r3, #1
    19e8:	425b      	negs	r3, r3
    19ea:	469a      	mov	sl, r3
		pos = ffs(flags) - 1;
    19ec:	4b2b      	ldr	r3, [pc, #172]	; (1a9c <_ext_irq_handler+0xe4>)
    19ee:	4699      	mov	r9, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
    19f0:	4b27      	ldr	r3, [pc, #156]	; (1a90 <_ext_irq_handler+0xd8>)
    19f2:	4698      	mov	r8, r3
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = ( upper + lower ) >> 1;

				if (_map[middle].extint == pos) {
    19f4:	4d2a      	ldr	r5, [pc, #168]	; (1aa0 <_ext_irq_handler+0xe8>)
	hri_eic_clear_INTFLAG_reg(EIC, flags);

	ASSERT(callback);

	while (flags) {
		pos = ffs(flags) - 1;
    19f6:	9801      	ldr	r0, [sp, #4]
    19f8:	47c8      	blx	r9
    19fa:	1e44      	subs	r4, r0, #1
    19fc:	b2e4      	uxtb	r4, r4
		while (-1 != pos) {
    19fe:	b263      	sxtb	r3, r4
    1a00:	3301      	adds	r3, #1
    1a02:	d12b      	bne.n	1a5c <_ext_irq_handler+0xa4>
    1a04:	e034      	b.n	1a70 <_ext_irq_handler+0xb8>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = ( upper + lower ) >> 1;
    1a06:	188b      	adds	r3, r1, r2
    1a08:	105b      	asrs	r3, r3, #1
    1a0a:	b2de      	uxtb	r6, r3

				if (_map[middle].extint == pos) {
    1a0c:	4003      	ands	r3, r0
    1a0e:	00db      	lsls	r3, r3, #3
    1a10:	5d5b      	ldrb	r3, [r3, r5]
    1a12:	42a3      	cmp	r3, r4
    1a14:	d00c      	beq.n	1a30 <_ext_irq_handler+0x78>
					pin = _map[middle].pin;
					break;
				}

				if (_map[middle].extint < pos) {
    1a16:	429c      	cmp	r4, r3
    1a18:	dd02      	ble.n	1a20 <_ext_irq_handler+0x68>
					lower = middle + 1;
    1a1a:	1c72      	adds	r2, r6, #1
    1a1c:	b2d2      	uxtb	r2, r2
    1a1e:	e001      	b.n	1a24 <_ext_irq_handler+0x6c>
				} else {
					upper = middle - 1;
    1a20:	1e71      	subs	r1, r6, #1
    1a22:	b2c9      	uxtb	r1, r1
	while (flags) {
		pos = ffs(flags) - 1;
		while (-1 != pos) {
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
    1a24:	4291      	cmp	r1, r2
    1a26:	d2ee      	bcs.n	1a06 <_ext_irq_handler+0x4e>
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1a28:	4653      	mov	r3, sl
    1a2a:	3301      	adds	r3, #1
    1a2c:	d009      	beq.n	1a42 <_ext_irq_handler+0x8a>
    1a2e:	e004      	b.n	1a3a <_ext_irq_handler+0x82>
    1a30:	2302      	movs	r3, #2
    1a32:	469a      	mov	sl, r3
    1a34:	e001      	b.n	1a3a <_ext_irq_handler+0x82>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = ( upper + lower ) >> 1;

				if (_map[middle].extint == pos) {
    1a36:	2302      	movs	r3, #2
    1a38:	469a      	mov	sl, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
    1a3a:	4650      	mov	r0, sl
    1a3c:	4643      	mov	r3, r8
    1a3e:	681b      	ldr	r3, [r3, #0]
    1a40:	4798      	blx	r3
			}

			flags &= ~( 1ul << pos );
    1a42:	9b01      	ldr	r3, [sp, #4]
    1a44:	2201      	movs	r2, #1
    1a46:	40a2      	lsls	r2, r4
    1a48:	4393      	bics	r3, r2
    1a4a:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1a4c:	9801      	ldr	r0, [sp, #4]
    1a4e:	47b8      	blx	r7
    1a50:	1e44      	subs	r4, r0, #1
    1a52:	b2e4      	uxtb	r4, r4

	ASSERT(callback);

	while (flags) {
		pos = ffs(flags) - 1;
		while (-1 != pos) {
    1a54:	b263      	sxtb	r3, r4
    1a56:	3301      	adds	r3, #1
    1a58:	d101      	bne.n	1a5e <_ext_irq_handler+0xa6>
    1a5a:	e009      	b.n	1a70 <_ext_irq_handler+0xb8>
			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
			}

			flags &= ~( 1ul << pos );
			pos = ffs(flags) - 1;
    1a5c:	4f0f      	ldr	r7, [pc, #60]	; (1a9c <_ext_irq_handler+0xe4>)
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = ( upper + lower ) >> 1;

				if (_map[middle].extint == pos) {
    1a5e:	b264      	sxtb	r4, r4
    1a60:	2c02      	cmp	r4, #2
    1a62:	d0e8      	beq.n	1a36 <_ext_irq_handler+0x7e>
    1a64:	2302      	movs	r3, #2
    1a66:	2600      	movs	r6, #0
    1a68:	2101      	movs	r1, #1
    1a6a:	2200      	movs	r2, #0
    1a6c:	20ff      	movs	r0, #255	; 0xff
    1a6e:	e7d2      	b.n	1a16 <_ext_irq_handler+0x5e>
        return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw) 
{
        return ((Eic *)hw)->INTFLAG.reg;
    1a70:	4b06      	ldr	r3, [pc, #24]	; (1a8c <_ext_irq_handler+0xd4>)
    1a72:	695a      	ldr	r2, [r3, #20]
			}

			flags &= ~( 1ul << pos );
			pos = ffs(flags) - 1;
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1a74:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1a76:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask) 
{
        ((Eic *)hw)->INTFLAG.reg = mask;
    1a78:	615a      	str	r2, [r3, #20]

	hri_eic_clear_INTFLAG_reg(EIC, flags);

	ASSERT(callback);

	while (flags) {
    1a7a:	9b01      	ldr	r3, [sp, #4]
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	d1ba      	bne.n	19f6 <_ext_irq_handler+0x3e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
		hri_eic_clear_INTFLAG_reg(EIC, flags);
	}
	(void)p;
}
    1a80:	b002      	add	sp, #8
    1a82:	bc1c      	pop	{r2, r3, r4}
    1a84:	4690      	mov	r8, r2
    1a86:	4699      	mov	r9, r3
    1a88:	46a2      	mov	sl, r4
    1a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a8c:	40002400 	.word	0x40002400
    1a90:	20000110 	.word	0x20000110
    1a94:	00008b28 	.word	0x00008b28
    1a98:	000016c9 	.word	0x000016c9
    1a9c:	000073f9 	.word	0x000073f9
    1aa0:	00008b20 	.word	0x00008b20

00001aa4 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void ( *cb )(const uint32_t pin))
{
    1aa4:	b538      	push	{r3, r4, r5, lr}
typedef uint8_t hri_eic_ctrla_reg_t;
typedef uint8_t hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while(((Eic *)hw)->SYNCBUSY.reg & reg) {};
    1aa6:	4928      	ldr	r1, [pc, #160]	; (1b48 <_ext_irq_init+0xa4>)
    1aa8:	2201      	movs	r2, #1
    1aaa:	684b      	ldr	r3, [r1, #4]
    1aac:	421a      	tst	r2, r3
    1aae:	d1fc      	bne.n	1aaa <_ext_irq_init+0x6>
    1ab0:	4925      	ldr	r1, [pc, #148]	; (1b48 <_ext_irq_init+0xa4>)
    1ab2:	2203      	movs	r2, #3
    1ab4:	684b      	ldr	r3, [r1, #4]
    1ab6:	421a      	tst	r2, r3
    1ab8:	d1fc      	bne.n	1ab4 <_ext_irq_init+0x10>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw) 
{
        uint8_t tmp;
        hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST|EIC_SYNCBUSY_ENABLE);
        tmp = ((Eic *)hw)->CTRLA.reg;
    1aba:	4b23      	ldr	r3, [pc, #140]	; (1b48 <_ext_irq_init+0xa4>)
    1abc:	781b      	ldrb	r3, [r3, #0]
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);

	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    1abe:	079b      	lsls	r3, r3, #30
    1ac0:	d43f      	bmi.n	1b42 <_ext_irq_init+0x9e>
typedef uint8_t hri_eic_ctrla_reg_t;
typedef uint8_t hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while(((Eic *)hw)->SYNCBUSY.reg & reg) {};
    1ac2:	4921      	ldr	r1, [pc, #132]	; (1b48 <_ext_irq_init+0xa4>)
    1ac4:	2201      	movs	r2, #1
    1ac6:	684b      	ldr	r3, [r1, #4]
    1ac8:	421a      	tst	r2, r3
    1aca:	d1fc      	bne.n	1ac6 <_ext_irq_init+0x22>

static inline void hri_eic_set_CTRLA_SWRST_bit(const void *const hw) 
{
        EIC_CRITICAL_SECTION_ENTER();
        hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST);
        ((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    1acc:	4a1e      	ldr	r2, [pc, #120]	; (1b48 <_ext_irq_init+0xa4>)
    1ace:	7811      	ldrb	r1, [r2, #0]
    1ad0:	2301      	movs	r3, #1
    1ad2:	430b      	orrs	r3, r1
    1ad4:	7013      	strb	r3, [r2, #0]
typedef uint8_t hri_eic_ctrla_reg_t;
typedef uint8_t hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while(((Eic *)hw)->SYNCBUSY.reg & reg) {};
    1ad6:	1c11      	adds	r1, r2, #0
    1ad8:	2201      	movs	r2, #1
    1ada:	684b      	ldr	r3, [r1, #4]
    1adc:	421a      	tst	r2, r3
    1ade:	d1fc      	bne.n	1ada <_ext_irq_init+0x36>
    1ae0:	4919      	ldr	r1, [pc, #100]	; (1b48 <_ext_irq_init+0xa4>)
    1ae2:	2203      	movs	r2, #3
    1ae4:	684b      	ldr	r3, [r1, #4]
    1ae6:	421a      	tst	r2, r3
    1ae8:	d1fc      	bne.n	1ae4 <_ext_irq_init+0x40>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value) 
{
        uint8_t tmp;
        EIC_CRITICAL_SECTION_ENTER();
        hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
        tmp = ((Eic *)hw)->CTRLA.reg;
    1aea:	4b17      	ldr	r3, [pc, #92]	; (1b48 <_ext_irq_init+0xa4>)
    1aec:	781a      	ldrb	r2, [r3, #0]
        tmp &= ~EIC_CTRLA_CKSEL;
    1aee:	2110      	movs	r1, #16
    1af0:	438a      	bics	r2, r1
        tmp |= value << EIC_CTRLA_CKSEL_Pos;
        ((Eic *)hw)->CTRLA.reg = tmp;
    1af2:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data) 
{
        EIC_CRITICAL_SECTION_ENTER();
        ((Eic *)hw)->NMICTRL.reg = data;
    1af4:	2200      	movs	r2, #0
    1af6:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data) 
{
        EIC_CRITICAL_SECTION_ENTER();
        ((Eic *)hw)->EVCTRL.reg = data;
    1af8:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data) 
{
        EIC_CRITICAL_SECTION_ENTER();
        ((Eic *)hw)->CONFIG[index].reg = data;
    1afa:	21a0      	movs	r1, #160	; 0xa0
    1afc:	0109      	lsls	r1, r1, #4
    1afe:	61d9      	str	r1, [r3, #28]
    1b00:	621a      	str	r2, [r3, #32]
typedef uint8_t hri_eic_ctrla_reg_t;
typedef uint8_t hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while(((Eic *)hw)->SYNCBUSY.reg & reg) {};
    1b02:	1c19      	adds	r1, r3, #0
    1b04:	3203      	adds	r2, #3
    1b06:	684b      	ldr	r3, [r1, #4]
    1b08:	421a      	tst	r2, r3
    1b0a:	d1fc      	bne.n	1b06 <_ext_irq_init+0x62>
    1b0c:	1c05      	adds	r5, r0, #0

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw) 
{
        EIC_CRITICAL_SECTION_ENTER();
        hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST|EIC_SYNCBUSY_ENABLE);
        ((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1b0e:	4a0e      	ldr	r2, [pc, #56]	; (1b48 <_ext_irq_init+0xa4>)
    1b10:	7811      	ldrb	r1, [r2, #0]
    1b12:	2302      	movs	r3, #2
    1b14:	430b      	orrs	r3, r1
    1b16:	7013      	strb	r3, [r2, #0]
			EIC_CONFIG_SENSE7(CONF_EIC_SENSE15) |
			0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	_irq.handler = _ext_irq_handler;
    1b18:	4c0c      	ldr	r4, [pc, #48]	; (1b4c <_ext_irq_init+0xa8>)
    1b1a:	4b0d      	ldr	r3, [pc, #52]	; (1b50 <_ext_irq_init+0xac>)
    1b1c:	6063      	str	r3, [r4, #4]
	_irq.parameter = NULL;
    1b1e:	2300      	movs	r3, #0
    1b20:	60a3      	str	r3, [r4, #8]
	_irq_disable(EIC_IRQn);
    1b22:	2003      	movs	r0, #3
    1b24:	4b0b      	ldr	r3, [pc, #44]	; (1b54 <_ext_irq_init+0xb0>)
    1b26:	4798      	blx	r3
	_irq_clear(EIC_IRQn);
    1b28:	2003      	movs	r0, #3
    1b2a:	4b0b      	ldr	r3, [pc, #44]	; (1b58 <_ext_irq_init+0xb4>)
    1b2c:	4798      	blx	r3
	_irq_register(EIC_IRQn, &_irq);
    1b2e:	1d21      	adds	r1, r4, #4
    1b30:	2003      	movs	r0, #3
    1b32:	4b0a      	ldr	r3, [pc, #40]	; (1b5c <_ext_irq_init+0xb8>)
    1b34:	4798      	blx	r3
	_irq_enable(EIC_IRQn);
    1b36:	2003      	movs	r0, #3
    1b38:	4b09      	ldr	r3, [pc, #36]	; (1b60 <_ext_irq_init+0xbc>)
    1b3a:	4798      	blx	r3

	callback = cb;
    1b3c:	6025      	str	r5, [r4, #0]

	return ERR_NONE;
    1b3e:	2000      	movs	r0, #0
    1b40:	e001      	b.n	1b46 <_ext_irq_init+0xa2>
int32_t _ext_irq_init(void ( *cb )(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);

	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
		return ERR_DENIED;
    1b42:	2011      	movs	r0, #17
    1b44:	4240      	negs	r0, r0
	_irq_enable(EIC_IRQn);

	callback = cb;

	return ERR_NONE;
}
    1b46:	bd38      	pop	{r3, r4, r5, pc}
    1b48:	40002400 	.word	0x40002400
    1b4c:	20000110 	.word	0x20000110
    1b50:	000019b9 	.word	0x000019b9
    1b54:	000018c1 	.word	0x000018c1
    1b58:	000018f1 	.word	0x000018f1
    1b5c:	0000191d 	.word	0x0000191d
    1b60:	00001909 	.word	0x00001909

00001b64 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    1b64:	2802      	cmp	r0, #2
    1b66:	d10c      	bne.n	1b82 <_ext_irq_enable+0x1e>

	if (INVALID_EXTINT_NUMBER == extint) {
		return -1;
	}

	if (enable) {
    1b68:	2900      	cmp	r1, #0
    1b6a:	d004      	beq.n	1b76 <_ext_irq_enable+0x12>
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_inten_reg_t mask) 
{
        ((Eic *)hw)->INTENSET.reg = mask;
    1b6c:	2204      	movs	r2, #4
    1b6e:	4b06      	ldr	r3, [pc, #24]	; (1b88 <_ext_irq_enable+0x24>)
    1b70:	611a      	str	r2, [r3, #16]
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    1b72:	2000      	movs	r0, #0
    1b74:	e007      	b.n	1b86 <_ext_irq_enable+0x22>
        ((Eic *)hw)->INTENSET.reg = data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_inten_reg_t mask) 
{
        ((Eic *)hw)->INTENCLR.reg = mask;
    1b76:	4b04      	ldr	r3, [pc, #16]	; (1b88 <_ext_irq_enable+0x24>)
    1b78:	2204      	movs	r2, #4
    1b7a:	60da      	str	r2, [r3, #12]
        return ((Eic *)hw)->INTFLAG.reg;
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask) 
{
        ((Eic *)hw)->INTFLAG.reg = mask;
    1b7c:	615a      	str	r2, [r3, #20]
    1b7e:	2000      	movs	r0, #0
    1b80:	e001      	b.n	1b86 <_ext_irq_enable+0x22>
			break;
		}
	}

	if (INVALID_EXTINT_NUMBER == extint) {
		return -1;
    1b82:	2001      	movs	r0, #1
    1b84:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
    1b86:	4770      	bx	lr
    1b88:	40002400 	.word	0x40002400

00001b8c <_gclk_init_generators>:
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->GENCTRL[index].reg = data;
    1b8c:	4b02      	ldr	r3, [pc, #8]	; (1b98 <_gclk_init_generators+0xc>)
    1b8e:	4a03      	ldr	r2, [pc, #12]	; (1b9c <_gclk_init_generators+0x10>)
    1b90:	621a      	str	r2, [r3, #32]
    1b92:	4a03      	ldr	r2, [pc, #12]	; (1ba0 <_gclk_init_generators+0x14>)
    1b94:	62da      	str	r2, [r3, #44]	; 0x2c
			(CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) |
			(CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos) |
			(CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos) |
			CONF_GCLK_GEN_7_SOURCE);
#endif
}
    1b96:	4770      	bx	lr
    1b98:	40001800 	.word	0x40001800
    1b9c:	00010107 	.word	0x00010107
    1ba0:	00012105 	.word	0x00012105

00001ba4 <_mclk_init>:
}

static inline void hri_mclk_write_BUPDIV_reg(const void *const hw, hri_mclk_bupdiv_reg_t data) 
{
        MCLK_CRITICAL_SECTION_ENTER();
        ((Mclk *)hw)->BUPDIV.reg = data;
    1ba4:	4b03      	ldr	r3, [pc, #12]	; (1bb4 <_mclk_init+0x10>)
    1ba6:	2208      	movs	r2, #8
    1ba8:	719a      	strb	r2, [r3, #6]
}

static inline void hri_mclk_write_LPDIV_reg(const void *const hw, hri_mclk_lpdiv_reg_t data) 
{
        MCLK_CRITICAL_SECTION_ENTER();
        ((Mclk *)hw)->LPDIV.reg = data;
    1baa:	3a04      	subs	r2, #4
    1bac:	715a      	strb	r2, [r3, #5]
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data) 
{
        MCLK_CRITICAL_SECTION_ENTER();
        ((Mclk *)hw)->CPUDIV.reg = data;
    1bae:	3a03      	subs	r2, #3
    1bb0:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    1bb2:	4770      	bx	lr
    1bb4:	40000400 	.word	0x40000400

00001bb8 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data) 
{
        OSC32KCTRL_CRITICAL_SECTION_ENTER();
        ((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1bb8:	4a05      	ldr	r2, [pc, #20]	; (1bd0 <_osc32kctrl_init_sources+0x18>)
    1bba:	4b06      	ldr	r3, [pc, #24]	; (1bd4 <_osc32kctrl_init_sources+0x1c>)
    1bbc:	615a      	str	r2, [r3, #20]
        return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw) 
{
        return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    1bbe:	1c19      	adds	r1, r3, #0
    1bc0:	2201      	movs	r2, #1
    1bc2:	68cb      	ldr	r3, [r1, #12]
			);
#endif

#if CONF_XOSC32K_CONFIG
#   if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw));
    1bc4:	421a      	tst	r2, r3
    1bc6:	d0fc      	beq.n	1bc2 <_osc32kctrl_init_sources+0xa>
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data) 
{
        OSC32KCTRL_CRITICAL_SECTION_ENTER();
        ((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1bc8:	2200      	movs	r2, #0
    1bca:	4b02      	ldr	r3, [pc, #8]	; (1bd4 <_osc32kctrl_init_sources+0x1c>)
    1bcc:	611a      	str	r2, [r3, #16]
#   endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1bce:	4770      	bx	lr
    1bd0:	0000054e 	.word	0x0000054e
    1bd4:	40001000 	.word	0x40001000

00001bd8 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data) 
{
        OSCCTRL_CRITICAL_SECTION_ENTER();
        ((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    1bd8:	220e      	movs	r2, #14
    1bda:	4b04      	ldr	r3, [pc, #16]	; (1bec <_oscctrl_init_sources+0x14>)
    1bdc:	751a      	strb	r2, [r3, #20]
        return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY) >> OSCCTRL_STATUS_XOSCRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC16MRDY_bit(const void *const hw) 
{
        return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    1bde:	1c19      	adds	r1, r3, #0
    1be0:	3202      	adds	r2, #2
    1be2:	68cb      	ldr	r3, [r1, #12]
#    endif
#endif

#if CONF_OSC16M_CONFIG == 1
#    if CONF_OSC16M_ENABLE == 1
			while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw)) {;
    1be4:	421a      	tst	r2, r3
    1be6:	d0fc      	beq.n	1be2 <_oscctrl_init_sources+0xa>
#    if CONF_OSC16M_ONDEMAND == 1
			hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#    endif
#endif
	(void)hw;
}
    1be8:	4770      	bx	lr
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	40000c00 	.word	0x40000c00

00001bf0 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
#    if CONF_DFLL_OVERWRITE_CALIBRATION == 0
#        define NVM_DFLL_COARSE_POS    26
#        define NVM_DFLL_COARSE_SIZE   6
			uint32_t coarse;
			coarse = *((uint32_t *)( NVMCTRL_OTP5 )) >> NVM_DFLL_COARSE_POS;
    1bf0:	4b1a      	ldr	r3, [pc, #104]	; (1c5c <_oscctrl_init_referenced_generators+0x6c>)
    1bf2:	681b      	ldr	r3, [r3, #0]
    1bf4:	0e98      	lsrs	r0, r3, #26
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data) 
{
        GCLK_CRITICAL_SECTION_ENTER();
        ((Gclk *)hw)->PCHCTRL[index].reg = data;
    1bf6:	2143      	movs	r1, #67	; 0x43
    1bf8:	2380      	movs	r3, #128	; 0x80
    1bfa:	4a19      	ldr	r2, [pc, #100]	; (1c60 <_oscctrl_init_referenced_generators+0x70>)
    1bfc:	50d1      	str	r1, [r2, r3]
}

static inline void hri_oscctrl_write_DFLLCTRL_reg(const void *const hw, hri_oscctrl_dfllctrl_reg_t data) 
{
        OSCCTRL_CRITICAL_SECTION_ENTER();
        ((Oscctrl *)hw)->DFLLCTRL.reg = data;
    1bfe:	2202      	movs	r2, #2
    1c00:	4b18      	ldr	r3, [pc, #96]	; (1c64 <_oscctrl_init_referenced_generators+0x74>)
    1c02:	831a      	strh	r2, [r3, #24]
        return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw) 
{
        return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1c04:	1c19      	adds	r1, r3, #0
    1c06:	32fe      	adds	r2, #254	; 0xfe
    1c08:	68cb      	ldr	r3, [r1, #12]
			0,
			( 1 << GCLK_PCHCTRL_CHEN_Pos ) |
			GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#    endif
		hri_oscctrl_write_DFLLCTRL_reg(hw, OSCCTRL_DFLLCTRL_ENABLE);
		while(!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw)) {;
    1c0a:	4213      	tst	r3, r2
    1c0c:	d0fc      	beq.n	1c08 <_oscctrl_init_referenced_generators+0x18>
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data) 
{
        OSCCTRL_CRITICAL_SECTION_ENTER();
        ((Oscctrl *)hw)->DFLLMUL.reg = data;
    1c0e:	4a16      	ldr	r2, [pc, #88]	; (1c68 <_oscctrl_init_referenced_generators+0x78>)
    1c10:	4b14      	ldr	r3, [pc, #80]	; (1c64 <_oscctrl_init_referenced_generators+0x74>)
    1c12:	621a      	str	r2, [r3, #32]
        return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw) 
{
        return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1c14:	1c19      	adds	r1, r3, #0
    1c16:	2280      	movs	r2, #128	; 0x80
    1c18:	0052      	lsls	r2, r2, #1
    1c1a:	68cb      	ldr	r3, [r1, #12]
		}
		hri_oscctrl_write_DFLLMUL_reg(hw, OSCCTRL_DFLLMUL_CSTEP(
				CONF_DFLL_CSTEP) |
			OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP) |
			OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
		while(!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw)) {;
    1c1c:	4213      	tst	r3, r2
    1c1e:	d0fc      	beq.n	1c1a <_oscctrl_init_referenced_generators+0x2a>
		}

#    if CONF_DFLL_OVERWRITE_CALIBRATION == 0
			/* FINE is set to fixed value, which defined by DFLL48M Characteristics */
			hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(coarse)
    1c20:	0283      	lsls	r3, r0, #10
    1c22:	2280      	movs	r2, #128	; 0x80
    1c24:	0092      	lsls	r2, r2, #2
    1c26:	4313      	orrs	r3, r2
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data) 
{
        OSCCTRL_CRITICAL_SECTION_ENTER();
        ((Oscctrl *)hw)->DFLLVAL.reg = data;
    1c28:	4a0e      	ldr	r2, [pc, #56]	; (1c64 <_oscctrl_init_referenced_generators+0x74>)
    1c2a:	61d3      	str	r3, [r2, #28]
}

static inline void hri_oscctrl_write_DFLLCTRL_reg(const void *const hw, hri_oscctrl_dfllctrl_reg_t data) 
{
        OSCCTRL_CRITICAL_SECTION_ENTER();
        ((Oscctrl *)hw)->DFLLCTRL.reg = data;
    1c2c:	4b0f      	ldr	r3, [pc, #60]	; (1c6c <_oscctrl_init_referenced_generators+0x7c>)
    1c2e:	8313      	strh	r3, [r2, #24]
}

static inline bool hri_oscctrl_get_DFLLCTRL_MODE_bit(const void *const hw) 
{
        uint16_t tmp;
        tmp = ((Oscctrl *)hw)->DFLLCTRL.reg;
    1c30:	8b13      	ldrh	r3, [r2, #24]
			( CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos ));
#endif

#if CONF_DFLL_CONFIG == 1

			if (hri_oscctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1c32:	075b      	lsls	r3, r3, #29
    1c34:	d507      	bpl.n	1c46 <_oscctrl_init_referenced_generators+0x56>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask) 
{
        uint32_t tmp; 
        tmp = ((Oscctrl *)hw)->STATUS.reg;
    1c36:	1c11      	adds	r1, r2, #0
        tmp &= mask;
    1c38:	2290      	movs	r2, #144	; 0x90
    1c3a:	0112      	lsls	r2, r2, #4
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask) 
{
        uint32_t tmp; 
        tmp = ((Oscctrl *)hw)->STATUS.reg;
    1c3c:	68cb      	ldr	r3, [r1, #12]
        tmp &= mask;
    1c3e:	4013      	ands	r3, r2
				hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY
				| OSCCTRL_STATUS_DFLLLCKC;

				while(hri_oscctrl_get_STATUS_reg(hw,
    1c40:	4293      	cmp	r3, r2
    1c42:	d1fb      	bne.n	1c3c <_oscctrl_init_referenced_generators+0x4c>
    1c44:	e005      	b.n	1c52 <_oscctrl_init_referenced_generators+0x62>
        return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw) 
{
        return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1c46:	4907      	ldr	r1, [pc, #28]	; (1c64 <_oscctrl_init_referenced_generators+0x74>)
    1c48:	2280      	movs	r2, #128	; 0x80
    1c4a:	0052      	lsls	r2, r2, #1
    1c4c:	68cb      	ldr	r3, [r1, #12]
					status_mask) != status_mask) {;
				}
			} else {
				while(!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw)) {;
    1c4e:	4213      	tst	r3, r2
    1c50:	d0fc      	beq.n	1c4c <_oscctrl_init_referenced_generators+0x5c>
        return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw) 
{
        return ((Gclk *)hw)->SYNCBUSY.reg;
    1c52:	4a03      	ldr	r2, [pc, #12]	; (1c60 <_oscctrl_init_referenced_generators+0x70>)
    1c54:	6853      	ldr	r3, [r2, #4]
				hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#    endif
#endif

#if CONF_DFLL_CONFIG == 1
			while(hri_gclk_read_SYNCBUSY_reg(GCLK)) {;
    1c56:	2b00      	cmp	r3, #0
    1c58:	d1fc      	bne.n	1c54 <_oscctrl_init_referenced_generators+0x64>
			}
#endif
		(void)hw, (void)tmp;
}
    1c5a:	4770      	bx	lr
    1c5c:	00806020 	.word	0x00806020
    1c60:	40001800 	.word	0x40001800
    1c64:	40000c00 	.word	0x40000c00
    1c68:	040105b8 	.word	0x040105b8
    1c6c:	00000b4c 	.word	0x00000b4c

00001c70 <_set_performance_level>:
	return ((Pm *)hw)->INTFLAG.reg;
}

static inline void hri_pm_clear_INTFLAG_reg(const void *const hw, hri_pm_intflag_reg_t mask)
{
	((Pm *)hw)->INTFLAG.reg = mask;
    1c70:	2380      	movs	r3, #128	; 0x80
    1c72:	05db      	lsls	r3, r3, #23
    1c74:	22ff      	movs	r2, #255	; 0xff
    1c76:	719a      	strb	r2, [r3, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    1c78:	789a      	ldrb	r2, [r3, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    1c7a:	2103      	movs	r1, #3
    1c7c:	438a      	bics	r2, r1
	tmp |= PM_PLCFG_PLSEL(data);
    1c7e:	4008      	ands	r0, r1
    1c80:	4310      	orrs	r0, r2
	((Pm *)hw)->PLCFG.reg = tmp;
    1c82:	7098      	strb	r0, [r3, #2]
	return tmp;
}

static inline hri_pm_intflag_reg_t hri_pm_read_INTFLAG_reg(const void *const hw)
{
	return ((Pm *)hw)->INTFLAG.reg;
    1c84:	1c1a      	adds	r2, r3, #0
    1c86:	7993      	ldrb	r3, [r2, #6]
 */
void _set_performance_level(const uint8_t level)
{
	hri_pm_clear_INTFLAG_reg(PM, 0xFF);
	hri_pm_write_PLCFG_PLSEL_bf(PM, level);
	while (!hri_pm_read_INTFLAG_reg(PM));
    1c88:	2b00      	cmp	r3, #0
    1c8a:	d0fc      	beq.n	1c86 <_set_performance_level+0x16>
}
    1c8c:	4770      	bx	lr
    1c8e:	46c0      	nop			; (mov r8, r8)

00001c90 <_gpio_set_direction>:
 * \brief Set direction on port with mask
 */
void _gpio_set_direction(const enum gpio_port port,
		const uint32_t mask,
		const enum gpio_direction direction)
{
    1c90:	b508      	push	{r3, lr}
	switch (direction) {
    1c92:	2a01      	cmp	r2, #1
    1c94:	d018      	beq.n	1cc8 <_gpio_set_direction+0x38>
    1c96:	2a00      	cmp	r2, #0
    1c98:	d002      	beq.n	1ca0 <_gpio_set_direction+0x10>
    1c9a:	2a02      	cmp	r2, #2
    1c9c:	d026      	beq.n	1cec <_gpio_set_direction+0x5c>
    1c9e:	e039      	b.n	1d14 <_gpio_set_direction+0x84>
        ((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ca0:	01c0      	lsls	r0, r0, #7
    1ca2:	23c0      	movs	r3, #192	; 0xc0
    1ca4:	05db      	lsls	r3, r3, #23
    1ca6:	18c3      	adds	r3, r0, r3
    1ca8:	6059      	str	r1, [r3, #4]
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				( mask & 0xffff ));
    1caa:	040b      	lsls	r3, r1, #16
    1cac:	0c1b      	lsrs	r3, r3, #16
		const enum gpio_direction direction)
{
	switch (direction) {
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
    1cae:	2280      	movs	r2, #128	; 0x80
    1cb0:	05d2      	lsls	r2, r2, #23
    1cb2:	4313      	orrs	r3, r2
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index, hri_port_wrconfig_reg_t data)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1cb4:	4a1a      	ldr	r2, [pc, #104]	; (1d20 <_gpio_set_direction+0x90>)
    1cb6:	4694      	mov	ip, r2
    1cb8:	4460      	add	r0, ip
    1cba:	6283      	str	r3, [r0, #40]	; 0x28
				( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
				PORT_WRCONFIG_WRPINCFG | (( mask & 0xffff0000 ) >> 16 ));
    1cbc:	0c09      	lsrs	r1, r1, #16
	switch (direction) {
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
    1cbe:	23c0      	movs	r3, #192	; 0xc0
    1cc0:	061b      	lsls	r3, r3, #24
    1cc2:	4319      	orrs	r1, r3
    1cc4:	6281      	str	r1, [r0, #40]	; 0x28
    1cc6:	e02a      	b.n	1d1e <_gpio_set_direction+0x8e>
        ((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1cc8:	01c0      	lsls	r0, r0, #7
    1cca:	23c0      	movs	r3, #192	; 0xc0
    1ccc:	05db      	lsls	r3, r3, #23
    1cce:	18c3      	adds	r3, r0, r3
    1cd0:	6059      	str	r1, [r3, #4]
		break;

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				PORT_WRCONFIG_INEN | ( mask & 0xffff ));
    1cd2:	040b      	lsls	r3, r1, #16
    1cd4:	0c1b      	lsrs	r3, r3, #16
				PORT_WRCONFIG_WRPINCFG | (( mask & 0xffff0000 ) >> 16 ));
		break;

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
    1cd6:	4a13      	ldr	r2, [pc, #76]	; (1d24 <_gpio_set_direction+0x94>)
    1cd8:	4313      	orrs	r3, r2
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index, hri_port_wrconfig_reg_t data)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1cda:	4a11      	ldr	r2, [pc, #68]	; (1d20 <_gpio_set_direction+0x90>)
    1cdc:	4694      	mov	ip, r2
    1cde:	4460      	add	r0, ip
    1ce0:	6283      	str	r3, [r0, #40]	; 0x28
				PORT_WRCONFIG_INEN | ( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
				PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN |
				(( mask & 0xffff0000 ) >> 16 ));
    1ce2:	0c09      	lsrs	r1, r1, #16

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				PORT_WRCONFIG_INEN | ( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
    1ce4:	4b10      	ldr	r3, [pc, #64]	; (1d28 <_gpio_set_direction+0x98>)
    1ce6:	4319      	orrs	r1, r3
    1ce8:	6281      	str	r1, [r0, #40]	; 0x28
    1cea:	e018      	b.n	1d1e <_gpio_set_direction+0x8e>
        return ((Port *)hw)->Group[submodule_index].DIR.reg & mask;
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1cec:	01c0      	lsls	r0, r0, #7
    1cee:	23c0      	movs	r3, #192	; 0xc0
    1cf0:	05db      	lsls	r3, r3, #23
    1cf2:	18c3      	adds	r3, r0, r3
    1cf4:	6099      	str	r1, [r3, #8]
		break;

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				( mask & 0xffff ));
    1cf6:	040b      	lsls	r3, r1, #16
    1cf8:	0c1b      	lsrs	r3, r3, #16
				(( mask & 0xffff0000 ) >> 16 ));
		break;

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
    1cfa:	2280      	movs	r2, #128	; 0x80
    1cfc:	05d2      	lsls	r2, r2, #23
    1cfe:	4313      	orrs	r3, r2
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index, hri_port_wrconfig_reg_t data)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d00:	4a07      	ldr	r2, [pc, #28]	; (1d20 <_gpio_set_direction+0x90>)
    1d02:	4694      	mov	ip, r2
    1d04:	4460      	add	r0, ip
    1d06:	6283      	str	r3, [r0, #40]	; 0x28
				( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
				PORT_WRCONFIG_WRPINCFG |(( mask & 0xffff0000 ) >> 16 ));
    1d08:	0c09      	lsrs	r1, r1, #16

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG |
				( mask & 0xffff ));
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_HWSEL |
    1d0a:	23c0      	movs	r3, #192	; 0xc0
    1d0c:	061b      	lsls	r3, r3, #24
    1d0e:	4319      	orrs	r1, r3
    1d10:	6281      	str	r1, [r0, #40]	; 0x28
    1d12:	e004      	b.n	1d1e <_gpio_set_direction+0x8e>
				PORT_WRCONFIG_WRPINCFG |(( mask & 0xffff0000 ) >> 16 ));
		break;

	default:
		ASSERT(false);
    1d14:	2000      	movs	r0, #0
    1d16:	4905      	ldr	r1, [pc, #20]	; (1d2c <_gpio_set_direction+0x9c>)
    1d18:	2253      	movs	r2, #83	; 0x53
    1d1a:	4b05      	ldr	r3, [pc, #20]	; (1d30 <_gpio_set_direction+0xa0>)
    1d1c:	4798      	blx	r3
	}
}
    1d1e:	bd08      	pop	{r3, pc}
    1d20:	40002800 	.word	0x40002800
    1d24:	40020000 	.word	0x40020000
    1d28:	c0020000 	.word	0xc0020000
    1d2c:	00008b44 	.word	0x00008b44
    1d30:	000016c9 	.word	0x000016c9

00001d34 <_gpio_set_level>:
 */
void _gpio_set_level(const enum gpio_port port,
		const uint32_t mask,
		const bool level)
{
	if(level) {
    1d34:	2a00      	cmp	r2, #0
    1d36:	d006      	beq.n	1d46 <_gpio_set_level+0x12>
        return ((Port *)hw)->Group[submodule_index].OUT.reg & mask;
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1d38:	01c0      	lsls	r0, r0, #7
    1d3a:	23c0      	movs	r3, #192	; 0xc0
    1d3c:	05db      	lsls	r3, r3, #23
    1d3e:	469c      	mov	ip, r3
    1d40:	4460      	add	r0, ip
    1d42:	6181      	str	r1, [r0, #24]
    1d44:	e004      	b.n	1d50 <_gpio_set_level+0x1c>
        ((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d46:	01c0      	lsls	r0, r0, #7
    1d48:	4b02      	ldr	r3, [pc, #8]	; (1d54 <_gpio_set_level+0x20>)
    1d4a:	469c      	mov	ip, r3
    1d4c:	4460      	add	r0, ip
    1d4e:	6041      	str	r1, [r0, #4]
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    1d50:	4770      	bx	lr
    1d52:	46c0      	nop			; (mov r8, r8)
    1d54:	60000010 	.word	0x60000010

00001d58 <_gpio_toggle_level>:
        ((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1d58:	01c0      	lsls	r0, r0, #7
    1d5a:	4b02      	ldr	r3, [pc, #8]	; (1d64 <_gpio_toggle_level+0xc>)
    1d5c:	469c      	mov	ip, r3
    1d5e:	4460      	add	r0, ip
    1d60:	6041      	str	r1, [r0, #4]
 * \brief Change output level to the opposite with mask
 */
void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
	hri_port_toggle_OUT_reg(PORT_IOBUS, port, mask);
}
    1d62:	4770      	bx	lr
    1d64:	60000018 	.word	0x60000018

00001d68 <_gpio_set_pin_pull_mode>:
 * \brief Set pin pull mode
 */
void _gpio_set_pin_pull_mode(const enum gpio_port port,
		const uint8_t pin,
		const enum gpio_pull_mode pull_mode)
{
    1d68:	b510      	push	{r4, lr}
	switch(pull_mode) {
    1d6a:	2a01      	cmp	r2, #1
    1d6c:	d00e      	beq.n	1d8c <_gpio_set_pin_pull_mode+0x24>
    1d6e:	2a00      	cmp	r2, #0
    1d70:	d002      	beq.n	1d78 <_gpio_set_pin_pull_mode+0x10>
    1d72:	2a02      	cmp	r2, #2
    1d74:	d01b      	beq.n	1dae <_gpio_set_pin_pull_mode+0x46>
    1d76:	e02b      	b.n	1dd0 <_gpio_set_pin_pull_mode+0x68>
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d78:	01c0      	lsls	r0, r0, #7
    1d7a:	1808      	adds	r0, r1, r0
    1d7c:	4b17      	ldr	r3, [pc, #92]	; (1ddc <_gpio_set_pin_pull_mode+0x74>)
    1d7e:	469c      	mov	ip, r3
    1d80:	4460      	add	r0, ip
    1d82:	7803      	ldrb	r3, [r0, #0]
    1d84:	2204      	movs	r2, #4
    1d86:	4393      	bics	r3, r2
    1d88:	7003      	strb	r3, [r0, #0]
    1d8a:	e026      	b.n	1dda <_gpio_set_pin_pull_mode+0x72>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
		break;

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    1d8c:	2301      	movs	r3, #1
    1d8e:	408b      	lsls	r3, r1
        ((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1d90:	01c0      	lsls	r0, r0, #7
    1d92:	22c0      	movs	r2, #192	; 0xc0
    1d94:	05d2      	lsls	r2, r2, #23
    1d96:	1884      	adds	r4, r0, r2
    1d98:	6063      	str	r3, [r4, #4]
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1d9a:	1808      	adds	r0, r1, r0
    1d9c:	4a0f      	ldr	r2, [pc, #60]	; (1ddc <_gpio_set_pin_pull_mode+0x74>)
    1d9e:	4694      	mov	ip, r2
    1da0:	4460      	add	r0, ip
    1da2:	7801      	ldrb	r1, [r0, #0]
    1da4:	2204      	movs	r2, #4
    1da6:	430a      	orrs	r2, r1
    1da8:	7002      	strb	r2, [r0, #0]
        return ((Port *)hw)->Group[submodule_index].OUT.reg & mask;
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1daa:	61a3      	str	r3, [r4, #24]
    1dac:	e015      	b.n	1dda <_gpio_set_pin_pull_mode+0x72>
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
		break;

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    1dae:	2201      	movs	r2, #1
    1db0:	408a      	lsls	r2, r1
        ((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1db2:	01c0      	lsls	r0, r0, #7
    1db4:	23c0      	movs	r3, #192	; 0xc0
    1db6:	05db      	lsls	r3, r3, #23
    1db8:	18c3      	adds	r3, r0, r3
    1dba:	605a      	str	r2, [r3, #4]
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
        PORT_CRITICAL_SECTION_ENTER();
        ((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1dbc:	1808      	adds	r0, r1, r0
    1dbe:	4907      	ldr	r1, [pc, #28]	; (1ddc <_gpio_set_pin_pull_mode+0x74>)
    1dc0:	468c      	mov	ip, r1
    1dc2:	4460      	add	r0, ip
    1dc4:	7804      	ldrb	r4, [r0, #0]
    1dc6:	2104      	movs	r1, #4
    1dc8:	4321      	orrs	r1, r4
    1dca:	7001      	strb	r1, [r0, #0]
        ((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
        ((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1dcc:	615a      	str	r2, [r3, #20]
    1dce:	e004      	b.n	1dda <_gpio_set_pin_pull_mode+0x72>
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
		break;

	default:
		ASSERT(false);
    1dd0:	2000      	movs	r0, #0
    1dd2:	4903      	ldr	r1, [pc, #12]	; (1de0 <_gpio_set_pin_pull_mode+0x78>)
    1dd4:	2299      	movs	r2, #153	; 0x99
    1dd6:	4b03      	ldr	r3, [pc, #12]	; (1de4 <_gpio_set_pin_pull_mode+0x7c>)
    1dd8:	4798      	blx	r3
		break;
	}
}
    1dda:	bd10      	pop	{r4, pc}
    1ddc:	40002840 	.word	0x40002840
    1de0:	00008b44 	.word	0x00008b44
    1de4:	000016c9 	.word	0x000016c9

00001de8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1de8:	b570      	push	{r4, r5, r6, lr}
	uint8_t port = GPIO_PORT(gpio);
    1dea:	0942      	lsrs	r2, r0, #5
	uint8_t pin  = GPIO_PIN(gpio);
    1dec:	b2c0      	uxtb	r0, r0
    1dee:	231f      	movs	r3, #31
    1df0:	4003      	ands	r3, r0
    1df2:	1c1e      	adds	r6, r3, #0

	if(function == GPIO_PIN_FUNCTION_OFF) {
    1df4:	1c4b      	adds	r3, r1, #1
    1df6:	d10b      	bne.n	1e10 <_gpio_set_pin_function+0x28>
    1df8:	23ff      	movs	r3, #255	; 0xff
    1dfa:	401a      	ands	r2, r3

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index, bool value)
{
        uint8_t tmp;
        PORT_CRITICAL_SECTION_ENTER();
        tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1dfc:	01d2      	lsls	r2, r2, #7
    1dfe:	18b3      	adds	r3, r6, r2
    1e00:	4a18      	ldr	r2, [pc, #96]	; (1e64 <_gpio_set_pin_function+0x7c>)
    1e02:	4694      	mov	ip, r2
    1e04:	4463      	add	r3, ip
    1e06:	781a      	ldrb	r2, [r3, #0]
        tmp &= ~PORT_PINCFG_PMUXEN;
    1e08:	3102      	adds	r1, #2
    1e0a:	438a      	bics	r2, r1
        tmp |= value << PORT_PINCFG_PMUXEN_Pos;
        ((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e0c:	701a      	strb	r2, [r3, #0]
    1e0e:	e027      	b.n	1e60 <_gpio_set_pin_function+0x78>
    1e10:	23ff      	movs	r3, #255	; 0xff
    1e12:	4013      	ands	r3, r2

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index, bool value)
{
        uint8_t tmp;
        PORT_CRITICAL_SECTION_ENTER();
        tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e14:	01da      	lsls	r2, r3, #7
    1e16:	18b2      	adds	r2, r6, r2
    1e18:	4c12      	ldr	r4, [pc, #72]	; (1e64 <_gpio_set_pin_function+0x7c>)
    1e1a:	46a4      	mov	ip, r4
    1e1c:	4462      	add	r2, ip
    1e1e:	7814      	ldrb	r4, [r2, #0]
        tmp &= ~PORT_PINCFG_PMUXEN;
    1e20:	2501      	movs	r5, #1
    1e22:	43ac      	bics	r4, r5
        tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1e24:	432c      	orrs	r4, r5
        ((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e26:	7014      	strb	r4, [r2, #0]
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
    1e28:	07c2      	lsls	r2, r0, #31
    1e2a:	d50d      	bpl.n	1e48 <_gpio_set_pin_function+0x60>

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index, hri_port_pmux_reg_t data)
{
        uint8_t tmp;
        PORT_CRITICAL_SECTION_ENTER();
        tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1e2c:	0872      	lsrs	r2, r6, #1
    1e2e:	01db      	lsls	r3, r3, #7
    1e30:	18d3      	adds	r3, r2, r3
    1e32:	4a0d      	ldr	r2, [pc, #52]	; (1e68 <_gpio_set_pin_function+0x80>)
    1e34:	4694      	mov	ip, r2
    1e36:	4463      	add	r3, ip
    1e38:	7818      	ldrb	r0, [r3, #0]
        tmp &= ~PORT_PMUX_PMUXO_Msk;
    1e3a:	220f      	movs	r2, #15
    1e3c:	4002      	ands	r2, r0
        tmp |= PORT_PMUX_PMUXO(data);
    1e3e:	0109      	lsls	r1, r1, #4
    1e40:	4311      	orrs	r1, r2
    1e42:	b2c9      	uxtb	r1, r1
        ((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1e44:	7019      	strb	r1, [r3, #0]
    1e46:	e00b      	b.n	1e60 <_gpio_set_pin_function+0x78>

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index, hri_port_pmux_reg_t data)
{
        uint8_t tmp;
        PORT_CRITICAL_SECTION_ENTER();
        tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1e48:	0872      	lsrs	r2, r6, #1
    1e4a:	01db      	lsls	r3, r3, #7
    1e4c:	18d3      	adds	r3, r2, r3
    1e4e:	4a06      	ldr	r2, [pc, #24]	; (1e68 <_gpio_set_pin_function+0x80>)
    1e50:	4694      	mov	ip, r2
    1e52:	4463      	add	r3, ip
    1e54:	781a      	ldrb	r2, [r3, #0]
        tmp &= ~PORT_PMUX_PMUXE_Msk;
    1e56:	200f      	movs	r0, #15
    1e58:	4382      	bics	r2, r0
        tmp |= PORT_PMUX_PMUXE(data);
    1e5a:	4001      	ands	r1, r0
    1e5c:	4311      	orrs	r1, r2
        ((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1e5e:	7019      	strb	r1, [r3, #0]
					port,
					pin >> 1,
					function & 0xffff);
		}
	}
}
    1e60:	bd70      	pop	{r4, r5, r6, pc}
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	40002840 	.word	0x40002840
    1e68:	40002830 	.word	0x40002830

00001e6c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(void *p)
{
    1e6c:	b510      	push	{r4, lr}
	struct _usart_async_device *device = (struct _usart_async_device *)p;
	void *hw = device->hw;
    1e6e:	6984      	ldr	r4, [r0, #24]
        return ((Sercom *)hw)->USART.STATUS.reg;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw) 
{
        return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1e70:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) &&
    1e72:	07db      	lsls	r3, r3, #31
    1e74:	d507      	bpl.n	1e86 <_sercom_usart_interrupt_handler+0x1a>
        ((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw) 
{
        return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1e76:	7da3      	ldrb	r3, [r4, #22]
    1e78:	07db      	lsls	r3, r3, #31
    1e7a:	d504      	bpl.n	1e86 <_sercom_usart_interrupt_handler+0x1a>
        ((Sercom *)hw)->USART.INTENSET.reg = value << SERCOM_USART_INTENSET_DRE_Pos;
}

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw) 
{
        ((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    1e7c:	2301      	movs	r3, #1
    1e7e:	7523      	strb	r3, [r4, #20]
			hri_sercomusart_get_INTEN_DRE_bit(hw)) {
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
    1e80:	6803      	ldr	r3, [r0, #0]
    1e82:	4798      	blx	r3
    1e84:	e023      	b.n	1ece <_sercom_usart_interrupt_handler+0x62>
        ((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw) 
{
        return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1e86:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) &&
    1e88:	079b      	lsls	r3, r3, #30
    1e8a:	d507      	bpl.n	1e9c <_sercom_usart_interrupt_handler+0x30>
        ((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw) 
{
        return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1e8c:	7da3      	ldrb	r3, [r4, #22]
    1e8e:	079b      	lsls	r3, r3, #30
    1e90:	d504      	bpl.n	1e9c <_sercom_usart_interrupt_handler+0x30>
        ((Sercom *)hw)->USART.INTENSET.reg = value << SERCOM_USART_INTENSET_TXC_Pos;
}

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw) 
{
        ((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_TXC;
    1e92:	2302      	movs	r3, #2
    1e94:	7523      	strb	r3, [r4, #20]
			hri_sercomusart_get_INTEN_TXC_bit(hw)) {
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
    1e96:	6883      	ldr	r3, [r0, #8]
    1e98:	4798      	blx	r3
    1e9a:	e018      	b.n	1ece <_sercom_usart_interrupt_handler+0x62>
        ((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw) 
{
        return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1e9c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1e9e:	075b      	lsls	r3, r3, #29
    1ea0:	d50b      	bpl.n	1eba <_sercom_usart_interrupt_handler+0x4e>
        SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw) 
{
        return ((Sercom *)hw)->USART.STATUS.reg;
    1ea2:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw) &
    1ea4:	2337      	movs	r3, #55	; 0x37
    1ea6:	421a      	tst	r2, r3
    1ea8:	d002      	beq.n	1eb0 <_sercom_usart_interrupt_handler+0x44>
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.STATUS.reg = mask;
    1eaa:	3308      	adds	r3, #8
    1eac:	8363      	strh	r3, [r4, #26]
    1eae:	e00e      	b.n	1ece <_sercom_usart_interrupt_handler+0x62>
        return ((Sercom *)hw)->USART.RXPL.reg;
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw) 
{
        return ((Sercom *)hw)->USART.DATA.reg;
    1eb0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
					SERCOM_USART_STATUS_COLL )) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1eb2:	b2c9      	uxtb	r1, r1
    1eb4:	6843      	ldr	r3, [r0, #4]
    1eb6:	4798      	blx	r3
    1eb8:	e009      	b.n	1ece <_sercom_usart_interrupt_handler+0x62>
        ((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw) 
{
        return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1eba:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1ebc:	09db      	lsrs	r3, r3, #7
    1ebe:	d006      	beq.n	1ece <_sercom_usart_interrupt_handler+0x62>
}

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw) 
{
        ((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1ec0:	2380      	movs	r3, #128	; 0x80
    1ec2:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    1ec4:	68c3      	ldr	r3, [r0, #12]
    1ec6:	4798      	blx	r3
        SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw) 
{
        return ((Sercom *)hw)->USART.STATUS.reg;
    1ec8:	8b63      	ldrh	r3, [r4, #26]
    1eca:	b29b      	uxth	r3, r3
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.STATUS.reg = mask;
    1ecc:	8363      	strh	r3, [r4, #26]
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}

}
    1ece:	bd10      	pop	{r4, pc}

00001ed0 <_sercom_get_irq_num>:
#endif

#if defined __SAML21E18B__ || defined __ATSAML21E18B__ || defined __SAML21G18B__ \
  || defined __ATSAML21G18B__ || defined __SAML21J18B__ || defined __ATSAML21J18B__
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
		return 5;
    1ed0:	2305      	movs	r3, #5
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

#if defined __SAML21E18B__ || defined __ATSAML21E18B__ || defined __SAML21G18B__ \
  || defined __ATSAML21G18B__ || defined __SAML21J18B__ || defined __ATSAML21J18B__
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    1ed2:	4a04      	ldr	r2, [pc, #16]	; (1ee4 <_sercom_get_irq_num+0x14>)
    1ed4:	4290      	cmp	r0, r2
    1ed6:	d001      	beq.n	1edc <_sercom_get_irq_num+0xc>
		return 5;
	}
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1ed8:	0380      	lsls	r0, r0, #14
    1eda:	0e03      	lsrs	r3, r0, #24
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1edc:	3308      	adds	r3, #8
    1ede:	b2d8      	uxtb	r0, r3
}
    1ee0:	4770      	bx	lr
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	43000400 	.word	0x43000400

00001ee8 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1ee8:	b510      	push	{r4, lr}
    1eea:	1e04      	subs	r4, r0, #0
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

#if defined __SAML21E18B__ || defined __ATSAML21E18B__ || defined __SAML21G18B__ \
  || defined __ATSAML21G18B__ || defined __SAML21J18B__ || defined __ATSAML21J18B__
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    1eec:	4b3c      	ldr	r3, [pc, #240]	; (1fe0 <_usart_init+0xf8>)
    1eee:	429c      	cmp	r4, r3
    1ef0:	d00c      	beq.n	1f0c <_usart_init+0x24>
		return 5;
	}
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1ef2:	0383      	lsls	r3, r0, #14
    1ef4:	0e1b      	lsrs	r3, r3, #24
{
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
		if (_usarts[i].number == sercom_offset) {
    1ef6:	d106      	bne.n	1f06 <_usart_init+0x1e>
    1ef8:	e003      	b.n	1f02 <_usart_init+0x1a>
static uint8_t _get_sercom_index(const void *const hw)
{
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1efa:	2101      	movs	r1, #1
    1efc:	e00f      	b.n	1f1e <_usart_init+0x36>
    1efe:	2102      	movs	r1, #2
    1f00:	e00d      	b.n	1f1e <_usart_init+0x36>
    1f02:	2100      	movs	r1, #0
    1f04:	e00b      	b.n	1f1e <_usart_init+0x36>
		if (_usarts[i].number == sercom_offset) {
    1f06:	2b03      	cmp	r3, #3
    1f08:	d101      	bne.n	1f0e <_usart_init+0x26>
    1f0a:	e7f6      	b.n	1efa <_usart_init+0x12>
#endif

#if defined __SAML21E18B__ || defined __ATSAML21E18B__ || defined __SAML21G18B__ \
  || defined __ATSAML21G18B__ || defined __SAML21J18B__ || defined __ATSAML21J18B__
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
		return 5;
    1f0c:	2305      	movs	r3, #5
{
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
		if (_usarts[i].number == sercom_offset) {
    1f0e:	2b04      	cmp	r3, #4
    1f10:	d0f5      	beq.n	1efe <_usart_init+0x16>
			return i;
		}
	}

	ASSERT(false);
    1f12:	2000      	movs	r0, #0
    1f14:	4933      	ldr	r1, [pc, #204]	; (1fe4 <_usart_init+0xfc>)
    1f16:	4a34      	ldr	r2, [pc, #208]	; (1fe8 <_usart_init+0x100>)
    1f18:	4b34      	ldr	r3, [pc, #208]	; (1fec <_usart_init+0x104>)
    1f1a:	4798      	blx	r3
	return 0;
    1f1c:	2100      	movs	r1, #0
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {};
    1f1e:	2201      	movs	r2, #1
    1f20:	69e3      	ldr	r3, [r4, #28]
    1f22:	421a      	tst	r2, r3
    1f24:	d1fc      	bne.n	1f20 <_usart_init+0x38>
    1f26:	2203      	movs	r2, #3
    1f28:	69e3      	ldr	r3, [r4, #28]
    1f2a:	421a      	tst	r2, r3
    1f2c:	d1fc      	bne.n	1f28 <_usart_init+0x40>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw) 
{
        uint32_t tmp;
        hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST|SERCOM_USART_SYNCBUSY_ENABLE);
        tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1f2e:	6823      	ldr	r3, [r4, #0]
static int32_t _usart_init(void *const hw)
{
	uint8_t i = _get_sercom_index(hw);

	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    1f30:	079b      	lsls	r3, r3, #30
    1f32:	d451      	bmi.n	1fd8 <_usart_init+0xf0>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {};
    1f34:	2201      	movs	r2, #1
    1f36:	69e3      	ldr	r3, [r4, #28]
    1f38:	421a      	tst	r2, r3
    1f3a:	d1fc      	bne.n	1f36 <_usart_init+0x4e>

static inline void hri_sercomusart_set_CTRLA_SWRST_bit(const void *const hw) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
        ((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    1f3c:	6822      	ldr	r2, [r4, #0]
    1f3e:	2301      	movs	r3, #1
    1f40:	4313      	orrs	r3, r2
    1f42:	6023      	str	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {};
    1f44:	2201      	movs	r2, #1
    1f46:	69e3      	ldr	r3, [r4, #28]
    1f48:	421a      	tst	r2, r3
    1f4a:	d1fc      	bne.n	1f46 <_usart_init+0x5e>
		return ERR_DENIED;
	}
	hri_sercomusart_set_CTRLA_SWRST_bit(hw);
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1f4c:	1c0a      	adds	r2, r1, #0
    1f4e:	008b      	lsls	r3, r1, #2
    1f50:	1859      	adds	r1, r3, r1
    1f52:	0089      	lsls	r1, r1, #2
    1f54:	4b26      	ldr	r3, [pc, #152]	; (1ff0 <_usart_init+0x108>)
    1f56:	1859      	adds	r1, r3, r1
    1f58:	6988      	ldr	r0, [r1, #24]
    1f5a:	2103      	movs	r1, #3
    1f5c:	69e3      	ldr	r3, [r4, #28]
    1f5e:	4219      	tst	r1, r3
    1f60:	d1fc      	bne.n	1f5c <_usart_init+0x74>

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST|SERCOM_USART_SYNCBUSY_ENABLE);
        ((Sercom *)hw)->USART.CTRLA.reg = data;
    1f62:	6020      	str	r0, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1f64:	0093      	lsls	r3, r2, #2
    1f66:	189b      	adds	r3, r3, r2
    1f68:	009b      	lsls	r3, r3, #2
    1f6a:	4921      	ldr	r1, [pc, #132]	; (1ff0 <_usart_init+0x108>)
    1f6c:	18cb      	adds	r3, r1, r3
    1f6e:	69db      	ldr	r3, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.CTRLB.reg = data;
    1f70:	6063      	str	r3, [r4, #4]

	if (( _usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1))
			|| ( _usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1f72:	23c0      	movs	r3, #192	; 0xc0
    1f74:	01db      	lsls	r3, r3, #7
    1f76:	4218      	tst	r0, r3
    1f78:	d016      	beq.n	1fa8 <_usart_init+0xc0>
		((Sercom *)hw )->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1f7a:	0093      	lsls	r3, r2, #2
    1f7c:	189b      	adds	r3, r3, r2
    1f7e:	009b      	lsls	r3, r3, #2
    1f80:	18cb      	adds	r3, r1, r3
    1f82:	8c19      	ldrh	r1, [r3, #32]
    1f84:	331c      	adds	r3, #28
    1f86:	04c9      	lsls	r1, r1, #19
    1f88:	0cc8      	lsrs	r0, r1, #19
    1f8a:	89a1      	ldrh	r1, [r4, #12]
    1f8c:	0b49      	lsrs	r1, r1, #13
    1f8e:	0349      	lsls	r1, r1, #13
    1f90:	4301      	orrs	r1, r0
    1f92:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw )->USART.BAUD.FRAC.FP = _usarts[i].fractional;
    1f94:	799b      	ldrb	r3, [r3, #6]
    1f96:	2107      	movs	r1, #7
    1f98:	400b      	ands	r3, r1
    1f9a:	0359      	lsls	r1, r3, #13
    1f9c:	89a3      	ldrh	r3, [r4, #12]
    1f9e:	04db      	lsls	r3, r3, #19
    1fa0:	0cdb      	lsrs	r3, r3, #19
    1fa2:	430b      	orrs	r3, r1
    1fa4:	81a3      	strh	r3, [r4, #12]
    1fa6:	e006      	b.n	1fb6 <_usart_init+0xce>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1fa8:	0093      	lsls	r3, r2, #2
    1faa:	189b      	adds	r3, r3, r2
    1fac:	009b      	lsls	r3, r3, #2
    1fae:	4910      	ldr	r1, [pc, #64]	; (1ff0 <_usart_init+0x108>)
    1fb0:	18cb      	adds	r3, r1, r3
    1fb2:	8c1b      	ldrh	r3, [r3, #32]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.BAUD.reg = data;
    1fb4:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1fb6:	490e      	ldr	r1, [pc, #56]	; (1ff0 <_usart_init+0x108>)
    1fb8:	0090      	lsls	r0, r2, #2
    1fba:	1883      	adds	r3, r0, r2
    1fbc:	009b      	lsls	r3, r3, #2
    1fbe:	18cb      	adds	r3, r1, r3
    1fc0:	331c      	adds	r3, #28
    1fc2:	79db      	ldrb	r3, [r3, #7]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.RXPL.reg = data;
    1fc4:	73a3      	strb	r3, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1fc6:	1882      	adds	r2, r0, r2
    1fc8:	0092      	lsls	r2, r2, #2
    1fca:	188a      	adds	r2, r1, r2
    1fcc:	3224      	adds	r2, #36	; 0x24
    1fce:	7812      	ldrb	r2, [r2, #0]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1fd0:	2330      	movs	r3, #48	; 0x30
    1fd2:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
    1fd4:	2000      	movs	r0, #0
    1fd6:	e001      	b.n	1fdc <_usart_init+0xf4>
{
	uint8_t i = _get_sercom_index(hw);

	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
		return ERR_DENIED;
    1fd8:	2011      	movs	r0, #17
    1fda:	4240      	negs	r0, r0

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    1fdc:	bd10      	pop	{r4, pc}
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	43000400 	.word	0x43000400
    1fe4:	00008bc4 	.word	0x00008bc4
    1fe8:	00000292 	.word	0x00000292
    1fec:	000016c9 	.word	0x000016c9
    1ff0:	00008b60 	.word	0x00008b60

00001ff4 <_usart_sync_init>:
/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device,
		void *const hw)
{
    1ff4:	b538      	push	{r3, r4, r5, lr}
    1ff6:	1c05      	adds	r5, r0, #0
    1ff8:	1c0c      	adds	r4, r1, #0
	ASSERT(device);
    1ffa:	1e43      	subs	r3, r0, #1
    1ffc:	4198      	sbcs	r0, r3
    1ffe:	b2c0      	uxtb	r0, r0
    2000:	4904      	ldr	r1, [pc, #16]	; (2014 <STACK_SIZE+0x14>)
    2002:	22c5      	movs	r2, #197	; 0xc5
    2004:	4b04      	ldr	r3, [pc, #16]	; (2018 <STACK_SIZE+0x18>)
    2006:	4798      	blx	r3

	device->hw = hw;
    2008:	602c      	str	r4, [r5, #0]

	return _usart_init(hw);
    200a:	1c20      	adds	r0, r4, #0
    200c:	4b03      	ldr	r3, [pc, #12]	; (201c <STACK_SIZE+0x1c>)
    200e:	4798      	blx	r3
}
    2010:	bd38      	pop	{r3, r4, r5, pc}
    2012:	46c0      	nop			; (mov r8, r8)
    2014:	00008bc4 	.word	0x00008bc4
    2018:	000016c9 	.word	0x000016c9
    201c:	00001ee9 	.word	0x00001ee9

00002020 <_usart_async_init>:
/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device,
		void *const hw)
{
    2020:	b570      	push	{r4, r5, r6, lr}
    2022:	1c04      	adds	r4, r0, #0
    2024:	1c0d      	adds	r5, r1, #0
	int32_t init_status;

	ASSERT(device);
    2026:	1e43      	subs	r3, r0, #1
    2028:	4198      	sbcs	r0, r3
    202a:	b2c0      	uxtb	r0, r0
    202c:	490f      	ldr	r1, [pc, #60]	; (206c <_usart_async_init+0x4c>)
    202e:	22d4      	movs	r2, #212	; 0xd4
    2030:	4b0f      	ldr	r3, [pc, #60]	; (2070 <_usart_async_init+0x50>)
    2032:	4798      	blx	r3

	init_status = _usart_init(hw);
    2034:	1c28      	adds	r0, r5, #0
    2036:	4b0f      	ldr	r3, [pc, #60]	; (2074 <_usart_async_init+0x54>)
    2038:	4798      	blx	r3
    203a:	1e06      	subs	r6, r0, #0
	if (init_status) {
    203c:	d114      	bne.n	2068 <_usart_async_init+0x48>
		return init_status;
	}
	device->hw = hw;
    203e:	61a5      	str	r5, [r4, #24]

	device->irq.handler = _sercom_usart_interrupt_handler;
    2040:	4b0d      	ldr	r3, [pc, #52]	; (2078 <_usart_async_init+0x58>)
    2042:	6123      	str	r3, [r4, #16]
	device->irq.parameter = (void *)device;
    2044:	6164      	str	r4, [r4, #20]
	_irq_disable((IRQn_Type)_sercom_get_irq_num(hw));
    2046:	1c28      	adds	r0, r5, #0
    2048:	4b0c      	ldr	r3, [pc, #48]	; (207c <_usart_async_init+0x5c>)
    204a:	4798      	blx	r3
    204c:	1c05      	adds	r5, r0, #0
    204e:	4b0c      	ldr	r3, [pc, #48]	; (2080 <_usart_async_init+0x60>)
    2050:	4798      	blx	r3
	_irq_clear((IRQn_Type)_sercom_get_irq_num(hw));
    2052:	1c28      	adds	r0, r5, #0
    2054:	4b0b      	ldr	r3, [pc, #44]	; (2084 <_usart_async_init+0x64>)
    2056:	4798      	blx	r3
	_irq_register(_sercom_get_irq_num(hw), &device->irq);
    2058:	1c21      	adds	r1, r4, #0
    205a:	3110      	adds	r1, #16
    205c:	1c28      	adds	r0, r5, #0
    205e:	4b0a      	ldr	r3, [pc, #40]	; (2088 <_usart_async_init+0x68>)
    2060:	4798      	blx	r3
	_irq_enable((IRQn_Type)_sercom_get_irq_num(hw));
    2062:	1c28      	adds	r0, r5, #0
    2064:	4b09      	ldr	r3, [pc, #36]	; (208c <_usart_async_init+0x6c>)
    2066:	4798      	blx	r3

	return ERR_NONE;
}
    2068:	1c30      	adds	r0, r6, #0
    206a:	bd70      	pop	{r4, r5, r6, pc}
    206c:	00008bc4 	.word	0x00008bc4
    2070:	000016c9 	.word	0x000016c9
    2074:	00001ee9 	.word	0x00001ee9
    2078:	00001e6d 	.word	0x00001e6d
    207c:	00001ed1 	.word	0x00001ed1
    2080:	000018c1 	.word	0x000018c1
    2084:	000018f1 	.word	0x000018f1
    2088:	0000191d 	.word	0x0000191d
    208c:	00001909 	.word	0x00001909

00002090 <_usart_async_deinit>:

/**
 * \brief De-initialize SERCOM USART
 */
void _usart_async_deinit(struct _usart_async_device *const device)
{
    2090:	b510      	push	{r4, lr}
    2092:	1c04      	adds	r4, r0, #0
	_irq_disable((IRQn_Type)_sercom_get_irq_num(device->hw));
    2094:	6980      	ldr	r0, [r0, #24]
    2096:	4b0b      	ldr	r3, [pc, #44]	; (20c4 <_usart_async_deinit+0x34>)
    2098:	4798      	blx	r3
    209a:	4b0b      	ldr	r3, [pc, #44]	; (20c8 <_usart_async_deinit+0x38>)
    209c:	4798      	blx	r3
	_usart_deinit(device->hw);
    209e:	69a3      	ldr	r3, [r4, #24]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {};
    20a0:	2103      	movs	r1, #3
    20a2:	69da      	ldr	r2, [r3, #28]
    20a4:	4211      	tst	r1, r2
    20a6:	d1fc      	bne.n	20a2 <_usart_async_deinit+0x12>

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST|SERCOM_USART_SYNCBUSY_ENABLE);
        ((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    20a8:	681a      	ldr	r2, [r3, #0]
    20aa:	2102      	movs	r1, #2
    20ac:	438a      	bics	r2, r1
    20ae:	601a      	str	r2, [r3, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {};
    20b0:	3901      	subs	r1, #1
    20b2:	69da      	ldr	r2, [r3, #28]
    20b4:	4211      	tst	r1, r2
    20b6:	d1fc      	bne.n	20b2 <_usart_async_deinit+0x22>

static inline void hri_sercomusart_set_CTRLA_SWRST_bit(const void *const hw) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
        ((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    20b8:	6819      	ldr	r1, [r3, #0]
    20ba:	2201      	movs	r2, #1
    20bc:	430a      	orrs	r2, r1
    20be:	601a      	str	r2, [r3, #0]
}
    20c0:	bd10      	pop	{r4, pc}
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	00001ed1 	.word	0x00001ed1
    20c8:	000018c1 	.word	0x000018c1

000020cc <_usart_sync_enable>:
/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    20cc:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {};
    20ce:	2103      	movs	r1, #3
    20d0:	69d3      	ldr	r3, [r2, #28]
    20d2:	4219      	tst	r1, r3
    20d4:	d1fc      	bne.n	20d0 <_usart_sync_enable+0x4>

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST|SERCOM_USART_SYNCBUSY_ENABLE);
        ((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    20d6:	6811      	ldr	r1, [r2, #0]
    20d8:	2302      	movs	r3, #2
    20da:	430b      	orrs	r3, r1
    20dc:	6013      	str	r3, [r2, #0]
}
    20de:	4770      	bx	lr

000020e0 <_usart_async_enable>:
/**
 * \brief Enable SERCOM module
 */
void _usart_async_enable(struct _usart_async_device *const device)
{
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    20e0:	6982      	ldr	r2, [r0, #24]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {};
    20e2:	2103      	movs	r1, #3
    20e4:	69d3      	ldr	r3, [r2, #28]
    20e6:	4219      	tst	r1, r3
    20e8:	d1fc      	bne.n	20e4 <_usart_async_enable+0x4>

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST|SERCOM_USART_SYNCBUSY_ENABLE);
        ((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    20ea:	6811      	ldr	r1, [r2, #0]
    20ec:	2302      	movs	r3, #2
    20ee:	430b      	orrs	r3, r1
    20f0:	6013      	str	r3, [r2, #0]
}
    20f2:	4770      	bx	lr

000020f4 <_usart_async_disable>:
/**
 * \brief Disable SERCOM module
 */
void _usart_async_disable(struct _usart_async_device *const device)
{
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    20f4:	6982      	ldr	r2, [r0, #24]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while(((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {};
    20f6:	2103      	movs	r1, #3
    20f8:	69d3      	ldr	r3, [r2, #28]
    20fa:	4219      	tst	r1, r3
    20fc:	d1fc      	bne.n	20f8 <_usart_async_disable+0x4>

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST|SERCOM_USART_SYNCBUSY_ENABLE);
        ((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    20fe:	6813      	ldr	r3, [r2, #0]
    2100:	2102      	movs	r1, #2
    2102:	438b      	bics	r3, r1
    2104:	6013      	str	r3, [r2, #0]
}
    2106:	4770      	bx	lr

00002108 <_usart_sync_write_byte>:
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device,
		uint8_t data)
{
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2108:	6803      	ldr	r3, [r0, #0]
    210a:	b289      	uxth	r1, r1
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data) 
{
        SERCOM_CRITICAL_SECTION_ENTER();
        ((Sercom *)hw)->USART.DATA.reg = data;
    210c:	8519      	strh	r1, [r3, #40]	; 0x28
}
    210e:	4770      	bx	lr

00002110 <_usart_async_write_byte>:
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device,
		uint8_t data)
{
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2110:	6983      	ldr	r3, [r0, #24]
    2112:	b289      	uxth	r1, r1
    2114:	8519      	strh	r1, [r3, #40]	; 0x28
}
    2116:	4770      	bx	lr

00002118 <_usart_sync_read_byte>:
/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
	return hri_sercomusart_read_DATA_reg(device->hw);
    2118:	6803      	ldr	r3, [r0, #0]
        return ((Sercom *)hw)->USART.RXPL.reg;
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw) 
{
        return ((Sercom *)hw)->USART.DATA.reg;
    211a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    211c:	b2c0      	uxtb	r0, r0
}
    211e:	4770      	bx	lr

00002120 <_usart_sync_is_byte_sent>:
/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_byte_sent(const struct _usart_sync_device *const device)
{
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    2120:	6803      	ldr	r3, [r0, #0]
        return ((Sercom *)hw)->USART.STATUS.reg;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw) 
{
        return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2122:	7e18      	ldrb	r0, [r3, #24]
    2124:	2301      	movs	r3, #1
    2126:	4018      	ands	r0, r3
}
    2128:	4770      	bx	lr
    212a:	46c0      	nop			; (mov r8, r8)

0000212c <_usart_async_is_byte_sent>:
/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_async_is_byte_sent(const struct _usart_async_device *const device)
{
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    212c:	6983      	ldr	r3, [r0, #24]
    212e:	7e18      	ldrb	r0, [r3, #24]
    2130:	2301      	movs	r3, #1
    2132:	4018      	ands	r0, r3
}
    2134:	4770      	bx	lr
    2136:	46c0      	nop			; (mov r8, r8)

00002138 <_usart_sync_is_byte_received>:
/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2138:	6803      	ldr	r3, [r0, #0]
        ((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw) 
{
        return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    213a:	7e18      	ldrb	r0, [r3, #24]
    213c:	0740      	lsls	r0, r0, #29
    213e:	0fc0      	lsrs	r0, r0, #31
}
    2140:	4770      	bx	lr
    2142:	46c0      	nop			; (mov r8, r8)

00002144 <_usart_async_set_flow_control_state>:
		struct _usart_async_device *const device,
		const union usart_flow_control_state state)
{
	(void)device;
	(void)state;
}
    2144:	4770      	bx	lr
    2146:	46c0      	nop			; (mov r8, r8)

00002148 <_usart_async_enable_byte_sent_irq>:
/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2148:	6983      	ldr	r3, [r0, #24]
        ((Sercom *)hw)->USART.INTFLAG.reg = mask;
}

static inline void hri_sercomusart_set_INTEN_DRE_bit(const void *const hw) 
{
        ((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    214a:	2201      	movs	r2, #1
    214c:	759a      	strb	r2, [r3, #22]
}
    214e:	4770      	bx	lr

00002150 <_usart_async_enable_tx_done_irq>:
/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2150:	6983      	ldr	r3, [r0, #24]
        ((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
}

static inline void hri_sercomusart_set_INTEN_TXC_bit(const void *const hw) 
{
        ((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2152:	2202      	movs	r2, #2
    2154:	759a      	strb	r2, [r3, #22]
}
    2156:	4770      	bx	lr

00002158 <_usart_async_set_irq_state>:
/**
 * \brief Enable/disable USART interrupt
 */
void _usart_async_set_irq_state(struct _usart_async_device *const device,
		const enum _usart_async_callback_type type, const bool state)
{
    2158:	b570      	push	{r4, r5, r6, lr}
    215a:	1c05      	adds	r5, r0, #0
    215c:	1c0e      	adds	r6, r1, #0
    215e:	1c14      	adds	r4, r2, #0
	ASSERT(device);
    2160:	1e43      	subs	r3, r0, #1
    2162:	4198      	sbcs	r0, r3
    2164:	b2c0      	uxtb	r0, r0
    2166:	4912      	ldr	r1, [pc, #72]	; (21b0 <_usart_async_set_irq_state+0x58>)
    2168:	4a12      	ldr	r2, [pc, #72]	; (21b4 <_usart_async_set_irq_state+0x5c>)
    216a:	4b13      	ldr	r3, [pc, #76]	; (21b8 <_usart_async_set_irq_state+0x60>)
    216c:	4798      	blx	r3

	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    216e:	2302      	movs	r3, #2
    2170:	1c32      	adds	r2, r6, #0
    2172:	439a      	bics	r2, r3
    2174:	d10a      	bne.n	218c <_usart_async_set_irq_state+0x34>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    2176:	69ab      	ldr	r3, [r5, #24]
        return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
}

static inline void hri_sercomusart_write_INTEN_DRE_bit(const void *const hw, bool value) 
{
        ((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2178:	2201      	movs	r2, #1
    217a:	751a      	strb	r2, [r3, #20]
        ((Sercom *)hw)->USART.INTENSET.reg = value << SERCOM_USART_INTENSET_DRE_Pos;
    217c:	759c      	strb	r4, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    217e:	69ab      	ldr	r3, [r5, #24]
        return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
}

static inline void hri_sercomusart_write_INTEN_TXC_bit(const void *const hw, bool value) 
{
        ((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2180:	3201      	adds	r2, #1
    2182:	751a      	strb	r2, [r3, #20]
        ((Sercom *)hw)->USART.INTENSET.reg = value << SERCOM_USART_INTENSET_TXC_Pos;
    2184:	0064      	lsls	r4, r4, #1
    2186:	b2e4      	uxtb	r4, r4
    2188:	759c      	strb	r4, [r3, #22]
    218a:	e010      	b.n	21ae <_usart_async_set_irq_state+0x56>
	}
	else if (USART_ASYNC_RX_DONE == type) {
    218c:	2e01      	cmp	r6, #1
    218e:	d106      	bne.n	219e <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    2190:	69ab      	ldr	r3, [r5, #24]
        return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_RXC) >> SERCOM_USART_INTENSET_RXC_Pos;
}

static inline void hri_sercomusart_write_INTEN_RXC_bit(const void *const hw, bool value) 
{
        ((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    2192:	2204      	movs	r2, #4
    2194:	751a      	strb	r2, [r3, #20]
        ((Sercom *)hw)->USART.INTENSET.reg = value << SERCOM_USART_INTENSET_RXC_Pos;
    2196:	00a4      	lsls	r4, r4, #2
    2198:	b2e4      	uxtb	r4, r4
    219a:	759c      	strb	r4, [r3, #22]
    219c:	e007      	b.n	21ae <_usart_async_set_irq_state+0x56>
	}
	else if (USART_ASYNC_ERROR == type) {
    219e:	2e03      	cmp	r6, #3
    21a0:	d105      	bne.n	21ae <_usart_async_set_irq_state+0x56>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    21a2:	69ab      	ldr	r3, [r5, #24]
        return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_ERROR) >> SERCOM_USART_INTENSET_ERROR_Pos;
}

static inline void hri_sercomusart_write_INTEN_ERROR_bit(const void *const hw, bool value) 
{
        ((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    21a4:	2280      	movs	r2, #128	; 0x80
    21a6:	751a      	strb	r2, [r3, #20]
        ((Sercom *)hw)->USART.INTENSET.reg = value << SERCOM_USART_INTENSET_ERROR_Pos;
    21a8:	01e4      	lsls	r4, r4, #7
    21aa:	b2e4      	uxtb	r4, r4
    21ac:	759c      	strb	r4, [r3, #22]
	}
}
    21ae:	bd70      	pop	{r4, r5, r6, pc}
    21b0:	00008bc4 	.word	0x00008bc4
    21b4:	0000024b 	.word	0x0000024b
    21b8:	000016c9 	.word	0x000016c9

000021bc <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(void *p)
{
    21bc:	b508      	push	{r3, lr}
	struct _timer_device *device = (struct _timer_device *)p;
	void *const hw = device->hw;
    21be:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT8.INTENCLR.reg = mask;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    21c0:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    21c2:	07d2      	lsls	r2, r2, #31
    21c4:	d503      	bpl.n	21ce <tc_interrupt_handler+0x12>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    21c6:	2201      	movs	r2, #1
    21c8:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    21ca:	6803      	ldr	r3, [r0, #0]
    21cc:	4798      	blx	r3
	}
}
    21ce:	bd08      	pop	{r3, pc}

000021d0 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    21d0:	b570      	push	{r4, r5, r6, lr}
    21d2:	1c06      	adds	r6, r0, #0
    21d4:	1e0c      	subs	r4, r1, #0
 *
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
	if ((uint32_t)TC4 == (uint32_t)hw) {
    21d6:	4b4f      	ldr	r3, [pc, #316]	; (2314 <_timer_init+0x144>)
    21d8:	429c      	cmp	r4, r3
    21da:	d100      	bne.n	21de <_timer_init+0xe>
    21dc:	e090      	b.n	2300 <_timer_init+0x130>
		return 4;
	}

	return ((uint32_t)hw - (uint32_t)TC0 ) >> 10;
    21de:	4b4e      	ldr	r3, [pc, #312]	; (2318 <_timer_init+0x148>)
    21e0:	18cb      	adds	r3, r1, r3
    21e2:	0a9b      	lsrs	r3, r3, #10
{
	uint8_t index = tc_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == index) {
    21e4:	b2db      	uxtb	r3, r3
    21e6:	2b00      	cmp	r3, #0
    21e8:	d000      	beq.n	21ec <_timer_init+0x1c>
    21ea:	e089      	b.n	2300 <_timer_init+0x130>
			return i;
    21ec:	2500      	movs	r5, #0
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
	int8_t i = get_tc_index(hw);

	device->hw = hw;
    21ee:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    21f0:	2001      	movs	r0, #1
    21f2:	494a      	ldr	r1, [pc, #296]	; (231c <_timer_init+0x14c>)
    21f4:	228a      	movs	r2, #138	; 0x8a
    21f6:	4b4a      	ldr	r3, [pc, #296]	; (2320 <_timer_init+0x150>)
    21f8:	4798      	blx	r3
typedef uint8_t hri_tc_status_reg_t;
typedef uint8_t hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while(((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {};
    21fa:	2201      	movs	r2, #1
    21fc:	6923      	ldr	r3, [r4, #16]
    21fe:	421a      	tst	r2, r3
    2200:	d1fc      	bne.n	21fc <_timer_init+0x2c>
    2202:	2203      	movs	r2, #3
    2204:	6923      	ldr	r3, [r4, #16]
    2206:	421a      	tst	r2, r3
    2208:	d1fc      	bne.n	2204 <_timer_init+0x34>

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST|TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    220a:	6823      	ldr	r3, [r4, #0]

	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);

	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    220c:	079b      	lsls	r3, r3, #30
    220e:	d474      	bmi.n	22fa <_timer_init+0x12a>
typedef uint8_t hri_tc_status_reg_t;
typedef uint8_t hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while(((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {};
    2210:	2201      	movs	r2, #1
    2212:	6923      	ldr	r3, [r4, #16]
    2214:	421a      	tst	r2, r3
    2216:	d1fc      	bne.n	2212 <_timer_init+0x42>

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2218:	6822      	ldr	r2, [r4, #0]
    221a:	2301      	movs	r3, #1
    221c:	4313      	orrs	r3, r2
    221e:	6023      	str	r3, [r4, #0]
typedef uint8_t hri_tc_status_reg_t;
typedef uint8_t hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while(((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {};
    2220:	2201      	movs	r2, #1
    2222:	6923      	ldr	r3, [r4, #16]
    2224:	421a      	tst	r2, r3
    2226:	d1fc      	bne.n	2222 <_timer_init+0x52>
	}

	hri_tc_set_CTRLA_SWRST_bit(hw);
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2228:	b26d      	sxtb	r5, r5
    222a:	00ab      	lsls	r3, r5, #2
    222c:	195b      	adds	r3, r3, r5
    222e:	009b      	lsls	r3, r3, #2
    2230:	4a3c      	ldr	r2, [pc, #240]	; (2324 <_timer_init+0x154>)
    2232:	18d3      	adds	r3, r2, r3
    2234:	6859      	ldr	r1, [r3, #4]
    2236:	2203      	movs	r2, #3
    2238:	6923      	ldr	r3, [r4, #16]
    223a:	421a      	tst	r2, r3
    223c:	d1fc      	bne.n	2238 <_timer_init+0x68>

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST|TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    223e:	6021      	str	r1, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2240:	00ab      	lsls	r3, r5, #2
    2242:	195b      	adds	r3, r3, r5
    2244:	009b      	lsls	r3, r3, #2
    2246:	4a37      	ldr	r2, [pc, #220]	; (2324 <_timer_init+0x154>)
    2248:	18d3      	adds	r3, r2, r3
    224a:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    224c:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    224e:	891b      	ldrh	r3, [r3, #8]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2250:	80e3      	strh	r3, [r4, #6]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2252:	2301      	movs	r3, #1
    2254:	7323      	strb	r3, [r4, #12]
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);

	if (( _tcs[i].ctrl_a & TC_CTRLA_MODE_Msk ) == TC_CTRLA_MODE_COUNT32) {
    2256:	330b      	adds	r3, #11
    2258:	400b      	ands	r3, r1
    225a:	2b08      	cmp	r3, #8
    225c:	d109      	bne.n	2272 <_timer_init+0xa2>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    225e:	00ab      	lsls	r3, r5, #2
    2260:	195d      	adds	r5, r3, r5
    2262:	00ad      	lsls	r5, r5, #2
    2264:	4b2f      	ldr	r3, [pc, #188]	; (2324 <_timer_init+0x154>)
    2266:	195b      	adds	r3, r3, r5
    2268:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc32_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    226a:	61e3      	str	r3, [r4, #28]
    226c:	2300      	movs	r3, #0
    226e:	6223      	str	r3, [r4, #32]
    2270:	e029      	b.n	22c6 <_timer_init+0xf6>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
	} else if (( _tcs[i].ctrl_a & TC_CTRLA_MODE_Msk ) ==
    2272:	2b00      	cmp	r3, #0
    2274:	d109      	bne.n	228a <_timer_init+0xba>
			TC_CTRLA_MODE_COUNT16) {
		hri_tccount16_write_CC_reg(hw, 0, (hri_tc_count16_reg_t)_tcs[i].cc0);
    2276:	00ab      	lsls	r3, r5, #2
    2278:	195d      	adds	r5, r3, r5
    227a:	00ad      	lsls	r5, r5, #2
    227c:	4b29      	ldr	r3, [pc, #164]	; (2324 <_timer_init+0x154>)
    227e:	195b      	adds	r3, r3, r5
    2280:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc16_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2282:	83a3      	strh	r3, [r4, #28]
    2284:	2300      	movs	r3, #0
    2286:	83e3      	strh	r3, [r4, #30]
    2288:	e01d      	b.n	22c6 <_timer_init+0xf6>
		hri_tccount16_write_CC_reg(hw, 1, (hri_tc_count16_reg_t)_tcs[i].cc1);
	} else if (( _tcs[i].ctrl_a & TC_CTRLA_MODE_Msk ) ==
    228a:	2b04      	cmp	r3, #4
    228c:	d11b      	bne.n	22c6 <_timer_init+0xf6>
			TC_CTRLA_MODE_COUNT8) {
		hri_tccount8_write_CC_reg(hw, 0, (hri_tc_count8_reg_t)_tcs[i].cc0);
    228e:	00ab      	lsls	r3, r5, #2
    2290:	195b      	adds	r3, r3, r5
    2292:	009b      	lsls	r3, r3, #2
    2294:	4a23      	ldr	r2, [pc, #140]	; (2324 <_timer_init+0x154>)
    2296:	18d3      	adds	r3, r2, r3
    2298:	7b19      	ldrb	r1, [r3, #12]
typedef uint8_t hri_tc_status_reg_t;
typedef uint8_t hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while(((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {};
    229a:	22ff      	movs	r2, #255	; 0xff
    229c:	6923      	ldr	r3, [r4, #16]
    229e:	421a      	tst	r2, r3
    22a0:	d1fc      	bne.n	229c <_timer_init+0xcc>

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    22a2:	7721      	strb	r1, [r4, #28]
typedef uint8_t hri_tc_status_reg_t;
typedef uint8_t hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while(((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {};
    22a4:	22ff      	movs	r2, #255	; 0xff
    22a6:	6923      	ldr	r3, [r4, #16]
    22a8:	421a      	tst	r2, r3
    22aa:	d1fc      	bne.n	22a6 <_timer_init+0xd6>

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    22ac:	2300      	movs	r3, #0
    22ae:	7763      	strb	r3, [r4, #29]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tc_count8_reg_t)_tcs[i].cc1);
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    22b0:	00ab      	lsls	r3, r5, #2
    22b2:	195d      	adds	r5, r3, r5
    22b4:	00ad      	lsls	r5, r5, #2
    22b6:	4b1b      	ldr	r3, [pc, #108]	; (2324 <_timer_init+0x154>)
    22b8:	195b      	adds	r3, r3, r5
    22ba:	7ad9      	ldrb	r1, [r3, #11]
typedef uint8_t hri_tc_status_reg_t;
typedef uint8_t hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while(((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {};
    22bc:	2220      	movs	r2, #32
    22be:	6923      	ldr	r3, [r4, #16]
    22c0:	421a      	tst	r2, r3
    22c2:	d1fc      	bne.n	22be <_timer_init+0xee>

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	((Tc *)hw)->COUNT8.PER.reg = data;
    22c4:	76e1      	strb	r1, [r4, #27]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    22c6:	2301      	movs	r3, #1
    22c8:	7263      	strb	r3, [r4, #9]
	}

	hri_tc_set_INTEN_OVF_bit(hw);

	device->irq.handler = tc_interrupt_handler;
    22ca:	4b17      	ldr	r3, [pc, #92]	; (2328 <_timer_init+0x158>)
    22cc:	6073      	str	r3, [r6, #4]
	device->irq.parameter = (void *)device;
    22ce:	60b6      	str	r6, [r6, #8]
	return -1;
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	return (((uint32_t)hw - (uint32_t)TC0 ) >> 10 );
    22d0:	4b11      	ldr	r3, [pc, #68]	; (2318 <_timer_init+0x148>)
    22d2:	469c      	mov	ip, r3
    22d4:	4464      	add	r4, ip
    22d6:	0aa4      	lsrs	r4, r4, #10

	hri_tc_set_INTEN_OVF_bit(hw);

	device->irq.handler = tc_interrupt_handler;
	device->irq.parameter = (void *)device;
	_irq_disable((IRQn_Type)((uint8_t)TC0_IRQn + _get_hardware_offset(hw)));
    22d8:	3411      	adds	r4, #17
    22da:	b2e4      	uxtb	r4, r4
    22dc:	1c20      	adds	r0, r4, #0
    22de:	4b13      	ldr	r3, [pc, #76]	; (232c <_timer_init+0x15c>)
    22e0:	4798      	blx	r3
	_irq_clear((IRQn_Type)((uint8_t)TC0_IRQn + _get_hardware_offset(hw)));
    22e2:	1c20      	adds	r0, r4, #0
    22e4:	4b12      	ldr	r3, [pc, #72]	; (2330 <_timer_init+0x160>)
    22e6:	4798      	blx	r3
	_irq_register((IRQn_Type)((uint8_t)TC0_IRQn + _get_hardware_offset(hw)),
    22e8:	1d31      	adds	r1, r6, #4
    22ea:	1c20      	adds	r0, r4, #0
    22ec:	4b11      	ldr	r3, [pc, #68]	; (2334 <_timer_init+0x164>)
    22ee:	4798      	blx	r3
			&device->irq);
	_irq_enable((IRQn_Type)((uint8_t)TC0_IRQn + _get_hardware_offset(hw)));
    22f0:	1c20      	adds	r0, r4, #0
    22f2:	4b11      	ldr	r3, [pc, #68]	; (2338 <_timer_init+0x168>)
    22f4:	4798      	blx	r3

	return ERR_NONE;
    22f6:	2000      	movs	r0, #0
    22f8:	e00a      	b.n	2310 <_timer_init+0x140>
	ASSERT(ARRAY_SIZE(_tcs));

	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);

	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
		return ERR_DENIED;
    22fa:	2011      	movs	r0, #17
    22fc:	4240      	negs	r0, r0
    22fe:	e007      	b.n	2310 <_timer_init+0x140>
		if (_tcs[i].number == index) {
			return i;
		}
	}

	ASSERT(false);
    2300:	2000      	movs	r0, #0
    2302:	4906      	ldr	r1, [pc, #24]	; (231c <_timer_init+0x14c>)
    2304:	2248      	movs	r2, #72	; 0x48
    2306:	32ff      	adds	r2, #255	; 0xff
    2308:	4b05      	ldr	r3, [pc, #20]	; (2320 <_timer_init+0x150>)
    230a:	4798      	blx	r3
	return -1;
    230c:	25ff      	movs	r5, #255	; 0xff
    230e:	e76e      	b.n	21ee <_timer_init+0x1e>
	_irq_register((IRQn_Type)((uint8_t)TC0_IRQn + _get_hardware_offset(hw)),
			&device->irq);
	_irq_enable((IRQn_Type)((uint8_t)TC0_IRQn + _get_hardware_offset(hw)));

	return ERR_NONE;
}
    2310:	bd70      	pop	{r4, r5, r6, pc}
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	43000800 	.word	0x43000800
    2318:	bdffe000 	.word	0xbdffe000
    231c:	00008bf8 	.word	0x00008bf8
    2320:	000016c9 	.word	0x000016c9
    2324:	00008be4 	.word	0x00008be4
    2328:	000021bd 	.word	0x000021bd
    232c:	000018c1 	.word	0x000018c1
    2330:	000018f1 	.word	0x000018f1
    2334:	0000191d 	.word	0x0000191d
    2338:	00001909 	.word	0x00001909

0000233c <_timer_start>:
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    233c:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t hri_tc_status_reg_t;
typedef uint8_t hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while(((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {};
    233e:	2103      	movs	r1, #3
    2340:	6913      	ldr	r3, [r2, #16]
    2342:	4219      	tst	r1, r3
    2344:	d1fc      	bne.n	2340 <_timer_start+0x4>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST|TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    2346:	6811      	ldr	r1, [r2, #0]
    2348:	2302      	movs	r3, #2
    234a:	430b      	orrs	r3, r1
    234c:	6013      	str	r3, [r2, #0]
}
    234e:	4770      	bx	lr

00002350 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2350:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t hri_tc_status_reg_t;
typedef uint8_t hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while(((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {};
    2352:	2103      	movs	r1, #3
    2354:	6913      	ldr	r3, [r2, #16]
    2356:	4219      	tst	r1, r3
    2358:	d1fc      	bne.n	2354 <_timer_is_started+0x4>

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST|TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    235a:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    235c:	0780      	lsls	r0, r0, #30
    235e:	0fc0      	lsrs	r0, r0, #31
}
    2360:	4770      	bx	lr
    2362:	46c0      	nop			; (mov r8, r8)

00002364 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
    2364:	2000      	movs	r0, #0
    2366:	4770      	bx	lr

00002368 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    2368:	b508      	push	{r3, lr}
	return -1;
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	return (((uint32_t)hw - (uint32_t)TC0 ) >> 10 );
    236a:	68c0      	ldr	r0, [r0, #12]
    236c:	4b04      	ldr	r3, [pc, #16]	; (2380 <_timer_set_irq+0x18>)
    236e:	469c      	mov	ip, r3
    2370:	4460      	add	r0, ip
    2372:	0a80      	lsrs	r0, r0, #10
 */
void _timer_set_irq(struct _timer_device *const device)
{
	void *const hw = device->hw;

	_irq_set((IRQn_Type)((uint8_t)TC0_IRQn + _get_hardware_offset(hw)));
    2374:	3011      	adds	r0, #17
    2376:	b2c0      	uxtb	r0, r0
    2378:	4b02      	ldr	r3, [pc, #8]	; (2384 <_timer_set_irq+0x1c>)
    237a:	4798      	blx	r3
}
    237c:	bd08      	pop	{r3, pc}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	bdffe000 	.word	0xbdffe000
    2384:	000018d9 	.word	0x000018d9

00002388 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2388:	b508      	push	{r3, lr}
	int n = 0;

	if (file != 0) {
    238a:	2800      	cmp	r0, #0
    238c:	d106      	bne.n	239c <_read+0x14>
    238e:	1c08      	adds	r0, r1, #0
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    2390:	1c11      	adds	r1, r2, #0
    2392:	4b05      	ldr	r3, [pc, #20]	; (23a8 <_read+0x20>)
    2394:	4798      	blx	r3
	if (n < 0) {
    2396:	2800      	cmp	r0, #0
    2398:	db03      	blt.n	23a2 <_read+0x1a>
    239a:	e004      	b.n	23a6 <_read+0x1e>
_read (int file, char * ptr, int len)
{
	int n = 0;

	if (file != 0) {
		return -1;
    239c:	2001      	movs	r0, #1
    239e:	4240      	negs	r0, r0
    23a0:	e001      	b.n	23a6 <_read+0x1e>
	}

	n = stdio_io_read((uint8_t *)ptr, len);
	if (n < 0) {
		return -1;
    23a2:	2001      	movs	r0, #1
    23a4:	4240      	negs	r0, r0
	}

	return n;
}
    23a6:	bd08      	pop	{r3, pc}
    23a8:	00002401 	.word	0x00002401

000023ac <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    23ac:	b508      	push	{r3, lr}
	int n = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    23ae:	1e43      	subs	r3, r0, #1
    23b0:	2b02      	cmp	r3, #2
    23b2:	d806      	bhi.n	23c2 <_write+0x16>
    23b4:	1c08      	adds	r0, r1, #0
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    23b6:	1c11      	adds	r1, r2, #0
    23b8:	4b05      	ldr	r3, [pc, #20]	; (23d0 <_write+0x24>)
    23ba:	4798      	blx	r3
	if (n < 0) {
    23bc:	2800      	cmp	r0, #0
    23be:	db03      	blt.n	23c8 <_write+0x1c>
    23c0:	e004      	b.n	23cc <_write+0x20>
_write (int file, char * ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    23c2:	2001      	movs	r0, #1
    23c4:	4240      	negs	r0, r0
    23c6:	e001      	b.n	23cc <_write+0x20>
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
	if (n < 0) {
		return -1;
    23c8:	2001      	movs	r0, #1
    23ca:	4240      	negs	r0, r0
	}

	return n;
}
    23cc:	bd08      	pop	{r3, pc}
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	00002425 	.word	0x00002425

000023d4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    23d4:	b570      	push	{r4, r5, r6, lr}
    23d6:	1c06      	adds	r6, r0, #0
# if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    23d8:	4d06      	ldr	r5, [pc, #24]	; (23f4 <stdio_io_init+0x20>)
    23da:	682b      	ldr	r3, [r5, #0]
    23dc:	6898      	ldr	r0, [r3, #8]
    23de:	2100      	movs	r1, #0
    23e0:	4c05      	ldr	r4, [pc, #20]	; (23f8 <stdio_io_init+0x24>)
    23e2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    23e4:	682b      	ldr	r3, [r5, #0]
    23e6:	6858      	ldr	r0, [r3, #4]
    23e8:	2100      	movs	r1, #0
    23ea:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    23ec:	4b03      	ldr	r3, [pc, #12]	; (23fc <stdio_io_init+0x28>)
    23ee:	601e      	str	r6, [r3, #0]
}
    23f0:	bd70      	pop	{r4, r5, r6, pc}
    23f2:	46c0      	nop			; (mov r8, r8)
    23f4:	20000094 	.word	0x20000094
    23f8:	00007685 	.word	0x00007685
    23fc:	2000011c 	.word	0x2000011c

00002400 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    2400:	b510      	push	{r4, lr}
    2402:	1c04      	adds	r4, r0, #0
	if (stdio_io == NULL) {
    2404:	4b05      	ldr	r3, [pc, #20]	; (241c <stdio_io_read+0x1c>)
    2406:	6818      	ldr	r0, [r3, #0]
    2408:	2800      	cmp	r0, #0
    240a:	d004      	beq.n	2416 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    240c:	b28a      	uxth	r2, r1
    240e:	1c21      	adds	r1, r4, #0
    2410:	4b03      	ldr	r3, [pc, #12]	; (2420 <stdio_io_read+0x20>)
    2412:	4798      	blx	r3
    2414:	e000      	b.n	2418 <stdio_io_read+0x18>
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
	if (stdio_io == NULL) {
		return 0;
    2416:	2000      	movs	r0, #0
	}
	return io_read(stdio_io, buf, len);
}
    2418:	bd10      	pop	{r4, pc}
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	2000011c 	.word	0x2000011c
    2420:	00000e89 	.word	0x00000e89

00002424 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    2424:	b510      	push	{r4, lr}
    2426:	1c04      	adds	r4, r0, #0
	if (stdio_io == NULL) {
    2428:	4b05      	ldr	r3, [pc, #20]	; (2440 <stdio_io_write+0x1c>)
    242a:	6818      	ldr	r0, [r3, #0]
    242c:	2800      	cmp	r0, #0
    242e:	d004      	beq.n	243a <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    2430:	b28a      	uxth	r2, r1
    2432:	1c21      	adds	r1, r4, #0
    2434:	4b03      	ldr	r3, [pc, #12]	; (2444 <stdio_io_write+0x20>)
    2436:	4798      	blx	r3
    2438:	e000      	b.n	243c <stdio_io_write+0x18>
}

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
	if (stdio_io == NULL) {
		return 0;
    243a:	2000      	movs	r0, #0
	}
	return io_write(stdio_io, buf, len);
}
    243c:	bd10      	pop	{r4, pc}
    243e:	46c0      	nop			; (mov r8, r8)
    2440:	2000011c 	.word	0x2000011c
    2444:	00000e55 	.word	0x00000e55

00002448 <ble_app_timer1_cb>:
		break;
	}
}

static void ble_app_timer1_cb(const struct timer_task *const timer_task)
{
    2448:	b508      	push	{r3, lr}
	if (ble_timer_cb[BLE_APP_TIMER_ID1] == NULL)
    244a:	4b03      	ldr	r3, [pc, #12]	; (2458 <ble_app_timer1_cb+0x10>)
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	2b00      	cmp	r3, #0
    2450:	d000      	beq.n	2454 <ble_app_timer1_cb+0xc>
	{
		return;
	}
	else
	{
		ble_timer_cb[BLE_APP_TIMER_ID1]();
    2452:	4798      	blx	r3
	}
}
    2454:	bd08      	pop	{r3, pc}
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	20000120 	.word	0x20000120

0000245c <ble_app_timer2_cb>:

static void ble_app_timer2_cb(const struct timer_task *const timer_task)
{
    245c:	b508      	push	{r3, lr}
	if (ble_timer_cb[BLE_APP_TIMER_ID2] == NULL)
    245e:	4b03      	ldr	r3, [pc, #12]	; (246c <ble_app_timer2_cb+0x10>)
    2460:	685b      	ldr	r3, [r3, #4]
    2462:	2b00      	cmp	r3, #0
    2464:	d000      	beq.n	2468 <ble_app_timer2_cb+0xc>
	{
		return;
	}
	else
	{
		ble_timer_cb[BLE_APP_TIMER_ID2]();
    2466:	4798      	blx	r3
	}
}
    2468:	bd08      	pop	{r3, pc}
    246a:	46c0      	nop			; (mov r8, r8)
    246c:	20000120 	.word	0x20000120

00002470 <ble_app_timer3_cb>:

static void ble_app_timer3_cb(const struct timer_task *const timer_task)
{
    2470:	b508      	push	{r3, lr}
	if (ble_timer_cb[BLE_APP_TIMER_ID3] == NULL)
    2472:	4b03      	ldr	r3, [pc, #12]	; (2480 <ble_app_timer3_cb+0x10>)
    2474:	689b      	ldr	r3, [r3, #8]
    2476:	2b00      	cmp	r3, #0
    2478:	d000      	beq.n	247c <ble_app_timer3_cb+0xc>
	{
		return;
	}
	else
	{
		ble_timer_cb[BLE_APP_TIMER_ID3]();
    247a:	4798      	blx	r3
	}
}
    247c:	bd08      	pop	{r3, pc}
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	20000120 	.word	0x20000120

00002484 <bsp_init>:
ble_timer_cb_t ble_timer_cb[MAX_SW_TIMER] = {NULL, NULL, NULL};

platform_hw_timer_callback_t bus_timer_callback;

void bsp_init(void)
{
    2484:	b508      	push	{r3, lr}
	system_init();
    2486:	4b01      	ldr	r3, [pc, #4]	; (248c <bsp_init+0x8>)
    2488:	4798      	blx	r3
}
    248a:	bd08      	pop	{r3, pc}
    248c:	00000369 	.word	0x00000369

00002490 <serial_console_init>:


void serial_console_init(void)
{
    2490:	b510      	push	{r4, lr}
	usart_sync_enable(&CONSOLE_UART);
    2492:	4c04      	ldr	r4, [pc, #16]	; (24a4 <serial_console_init+0x14>)
    2494:	1c20      	adds	r0, r4, #0
    2496:	4b04      	ldr	r3, [pc, #16]	; (24a8 <serial_console_init+0x18>)
    2498:	4798      	blx	r3
	stdio_io_init(&CONSOLE_UART.io);
    249a:	1c20      	adds	r0, r4, #0
    249c:	4b03      	ldr	r3, [pc, #12]	; (24ac <serial_console_init+0x1c>)
    249e:	4798      	blx	r3
}
    24a0:	bd10      	pop	{r4, pc}
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	20000e48 	.word	0x20000e48
    24a8:	0000169d 	.word	0x0000169d
    24ac:	000023d5 	.word	0x000023d5

000024b0 <LED_init>:
	console_rx_done = false;
	return 0;
}

void LED_init(void)
{
    24b0:	b510      	push	{r4, lr}
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin,
		const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(
    24b2:	2480      	movs	r4, #128	; 0x80
    24b4:	00e4      	lsls	r4, r4, #3
    24b6:	2001      	movs	r0, #1
    24b8:	1c21      	adds	r1, r4, #0
    24ba:	2202      	movs	r2, #2
    24bc:	4b08      	ldr	r3, [pc, #32]	; (24e0 <LED_init+0x30>)
    24be:	4798      	blx	r3
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin,
		const enum gpio_pull_mode pull_mode)
{
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    24c0:	2001      	movs	r0, #1
    24c2:	210a      	movs	r1, #10
    24c4:	2200      	movs	r2, #0
    24c6:	4b07      	ldr	r3, [pc, #28]	; (24e4 <LED_init+0x34>)
    24c8:	4798      	blx	r3
 *                      found in the header files for the device
 *                                            
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
    24ca:	202a      	movs	r0, #42	; 0x2a
    24cc:	2101      	movs	r1, #1
    24ce:	4249      	negs	r1, r1
    24d0:	4b05      	ldr	r3, [pc, #20]	; (24e8 <LED_init+0x38>)
    24d2:	4798      	blx	r3
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    24d4:	2001      	movs	r0, #1
    24d6:	1c21      	adds	r1, r4, #0
    24d8:	2201      	movs	r2, #1
    24da:	4b04      	ldr	r3, [pc, #16]	; (24ec <LED_init+0x3c>)
    24dc:	4798      	blx	r3
	gpio_set_pin_direction(BLE_APP_LED, GPIO_DIRECTION_OUT);
	gpio_set_pin_pull_mode(BLE_APP_LED, GPIO_PULL_OFF);
	gpio_set_pin_function(BLE_APP_LED, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_level(BLE_APP_LED, true);
}
    24de:	bd10      	pop	{r4, pc}
    24e0:	00001c91 	.word	0x00001c91
    24e4:	00001d69 	.word	0x00001d69
    24e8:	00001de9 	.word	0x00001de9
    24ec:	00001d35 	.word	0x00001d35

000024f0 <LED_Toggle>:
{
	gpio_set_pin_level(BLE_APP_LED, true);
}

void LED_Toggle(void)
{
    24f0:	b508      	push	{r3, lr}
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    24f2:	2001      	movs	r0, #1
    24f4:	2180      	movs	r1, #128	; 0x80
    24f6:	00c9      	lsls	r1, r1, #3
    24f8:	4b01      	ldr	r3, [pc, #4]	; (2500 <LED_Toggle+0x10>)
    24fa:	4798      	blx	r3
	gpio_toggle_pin_level(BLE_APP_LED);
}
    24fc:	bd08      	pop	{r3, pc}
    24fe:	46c0      	nop			; (mov r8, r8)
    2500:	00001d59 	.word	0x00001d59

00002504 <button_register_callback>:

void button_register_callback(ble_button_cb_t button_cb)
{
    2504:	b508      	push	{r3, lr}
    2506:	1c01      	adds	r1, r0, #0
	ext_irq_register(PIN_PA02, button_cb);
    2508:	2002      	movs	r0, #2
    250a:	4b01      	ldr	r3, [pc, #4]	; (2510 <button_register_callback+0xc>)
    250c:	4798      	blx	r3
}
    250e:	bd08      	pop	{r3, pc}
    2510:	00000dd9 	.word	0x00000dd9

00002514 <ble_timer_start>:

void ble_timer_start(ble_app_timer_t timer_id,
uint32_t time,
ble_timer_mode_t timer_mode,
ble_timer_cb_t timer_cb)
{
    2514:	b510      	push	{r4, lr}
	if (MAX_SW_TIMER < timer_id)
    2516:	2803      	cmp	r0, #3
    2518:	d83e      	bhi.n	2598 <ble_timer_start+0x84>
	{
		/* Invalid timer id */
		return;
	}

	switch(timer_id)
    251a:	2801      	cmp	r0, #1
    251c:	d016      	beq.n	254c <ble_timer_start+0x38>
    251e:	2800      	cmp	r0, #0
    2520:	d002      	beq.n	2528 <ble_timer_start+0x14>
    2522:	2802      	cmp	r0, #2
    2524:	d024      	beq.n	2570 <ble_timer_start+0x5c>
    2526:	e034      	b.n	2592 <ble_timer_start+0x7e>
	{
		case BLE_APP_TIMER_ID1:
		{
			if (!bsp_timer_status[BLE_APP_TIMER_ID1])
    2528:	481c      	ldr	r0, [pc, #112]	; (259c <ble_timer_start+0x88>)
    252a:	7c00      	ldrb	r0, [r0, #16]
    252c:	2800      	cmp	r0, #0
    252e:	d130      	bne.n	2592 <ble_timer_start+0x7e>
			{
				ble_timer_cb[BLE_APP_TIMER_ID1] = timer_cb;
    2530:	4c1a      	ldr	r4, [pc, #104]	; (259c <ble_timer_start+0x88>)
    2532:	6023      	str	r3, [r4, #0]
				app_timer_1_task.interval = time;
    2534:	4b1a      	ldr	r3, [pc, #104]	; (25a0 <ble_timer_start+0x8c>)
    2536:	6099      	str	r1, [r3, #8]
				app_timer_1_task.cb = ble_app_timer1_cb;
    2538:	491a      	ldr	r1, [pc, #104]	; (25a4 <ble_timer_start+0x90>)
    253a:	60d9      	str	r1, [r3, #12]
				app_timer_1_task.mode = timer_mode;
    253c:	741a      	strb	r2, [r3, #16]
				timer_add_task(&TIMER_0, &app_timer_1_task);
    253e:	481a      	ldr	r0, [pc, #104]	; (25a8 <ble_timer_start+0x94>)
    2540:	1c19      	adds	r1, r3, #0
    2542:	4b1a      	ldr	r3, [pc, #104]	; (25ac <ble_timer_start+0x98>)
    2544:	4798      	blx	r3
				bsp_timer_status[BLE_APP_TIMER_ID1] = true;
    2546:	2301      	movs	r3, #1
    2548:	7423      	strb	r3, [r4, #16]
    254a:	e022      	b.n	2592 <ble_timer_start+0x7e>
		}
		break;

		case BLE_APP_TIMER_ID2:
		{			
			if (!bsp_timer_status[BLE_APP_TIMER_ID2])
    254c:	4813      	ldr	r0, [pc, #76]	; (259c <ble_timer_start+0x88>)
    254e:	7c40      	ldrb	r0, [r0, #17]
    2550:	2800      	cmp	r0, #0
    2552:	d11e      	bne.n	2592 <ble_timer_start+0x7e>
			{
				ble_timer_cb[BLE_APP_TIMER_ID2] = timer_cb;
    2554:	4c11      	ldr	r4, [pc, #68]	; (259c <ble_timer_start+0x88>)
    2556:	6063      	str	r3, [r4, #4]
				app_timer_2_task.interval = time;
    2558:	4b15      	ldr	r3, [pc, #84]	; (25b0 <ble_timer_start+0x9c>)
    255a:	6099      	str	r1, [r3, #8]
				app_timer_2_task.cb = ble_app_timer2_cb;
    255c:	4915      	ldr	r1, [pc, #84]	; (25b4 <ble_timer_start+0xa0>)
    255e:	60d9      	str	r1, [r3, #12]
				app_timer_2_task.mode = timer_mode;
    2560:	741a      	strb	r2, [r3, #16]
				timer_add_task(&TIMER_0, &app_timer_2_task);
    2562:	4811      	ldr	r0, [pc, #68]	; (25a8 <ble_timer_start+0x94>)
    2564:	1c19      	adds	r1, r3, #0
    2566:	4b11      	ldr	r3, [pc, #68]	; (25ac <ble_timer_start+0x98>)
    2568:	4798      	blx	r3
				bsp_timer_status[BLE_APP_TIMER_ID2] = true;
    256a:	2301      	movs	r3, #1
    256c:	7463      	strb	r3, [r4, #17]
    256e:	e010      	b.n	2592 <ble_timer_start+0x7e>
		}
		break;
		
		case BLE_APP_TIMER_ID3:
		{			
			if (!bsp_timer_status[BLE_APP_TIMER_ID3])
    2570:	480a      	ldr	r0, [pc, #40]	; (259c <ble_timer_start+0x88>)
    2572:	7c80      	ldrb	r0, [r0, #18]
    2574:	2800      	cmp	r0, #0
    2576:	d10c      	bne.n	2592 <ble_timer_start+0x7e>
			{
				ble_timer_cb[BLE_APP_TIMER_ID3] = timer_cb;
    2578:	4c08      	ldr	r4, [pc, #32]	; (259c <ble_timer_start+0x88>)
    257a:	60a3      	str	r3, [r4, #8]
				app_timer_3_task.interval = time;
    257c:	4b0e      	ldr	r3, [pc, #56]	; (25b8 <ble_timer_start+0xa4>)
    257e:	6099      	str	r1, [r3, #8]
				app_timer_3_task.cb = ble_app_timer3_cb;
    2580:	490e      	ldr	r1, [pc, #56]	; (25bc <ble_timer_start+0xa8>)
    2582:	60d9      	str	r1, [r3, #12]
				app_timer_3_task.mode = timer_mode;
    2584:	741a      	strb	r2, [r3, #16]
				timer_add_task(&TIMER_0, &app_timer_3_task);
    2586:	4808      	ldr	r0, [pc, #32]	; (25a8 <ble_timer_start+0x94>)
    2588:	1c19      	adds	r1, r3, #0
    258a:	4b08      	ldr	r3, [pc, #32]	; (25ac <ble_timer_start+0x98>)
    258c:	4798      	blx	r3
				bsp_timer_status[BLE_APP_TIMER_ID3] = true;
    258e:	2301      	movs	r3, #1
    2590:	74a3      	strb	r3, [r4, #18]
		break;

		default:
		break;
	}
	timer_start(&TIMER_0);
    2592:	4805      	ldr	r0, [pc, #20]	; (25a8 <ble_timer_start+0x94>)
    2594:	4b0a      	ldr	r3, [pc, #40]	; (25c0 <ble_timer_start+0xac>)
    2596:	4798      	blx	r3
}
    2598:	bd10      	pop	{r4, pc}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	20000120 	.word	0x20000120
    25a0:	20000f40 	.word	0x20000f40
    25a4:	00002449 	.word	0x00002449
    25a8:	20000ea4 	.word	0x20000ea4
    25ac:	00001031 	.word	0x00001031
    25b0:	20001030 	.word	0x20001030
    25b4:	0000245d 	.word	0x0000245d
    25b8:	2000101c 	.word	0x2000101c
    25bc:	00002471 	.word	0x00002471
    25c0:	00000ff5 	.word	0x00000ff5

000025c4 <ble_timer_stop>:

void ble_timer_stop(ble_app_timer_t timer_id)
{
    25c4:	b508      	push	{r3, lr}
	if (MAX_SW_TIMER < timer_id)
    25c6:	2803      	cmp	r0, #3
    25c8:	d829      	bhi.n	261e <ble_timer_stop+0x5a>
	{
		/* Invalid timer id */
		return;
	}

	switch(timer_id)
    25ca:	2801      	cmp	r0, #1
    25cc:	d010      	beq.n	25f0 <ble_timer_stop+0x2c>
    25ce:	2800      	cmp	r0, #0
    25d0:	d002      	beq.n	25d8 <ble_timer_stop+0x14>
    25d2:	2802      	cmp	r0, #2
    25d4:	d018      	beq.n	2608 <ble_timer_stop+0x44>
    25d6:	e022      	b.n	261e <ble_timer_stop+0x5a>
	{
		case BLE_APP_TIMER_ID1:
		{
			if (bsp_timer_status[BLE_APP_TIMER_ID1])
    25d8:	4b11      	ldr	r3, [pc, #68]	; (2620 <ble_timer_stop+0x5c>)
    25da:	7c1b      	ldrb	r3, [r3, #16]
    25dc:	2b00      	cmp	r3, #0
    25de:	d01e      	beq.n	261e <ble_timer_stop+0x5a>
			{
				timer_remove_task(&TIMER_0, &app_timer_1_task);
    25e0:	4810      	ldr	r0, [pc, #64]	; (2624 <ble_timer_stop+0x60>)
    25e2:	4911      	ldr	r1, [pc, #68]	; (2628 <ble_timer_stop+0x64>)
    25e4:	4b11      	ldr	r3, [pc, #68]	; (262c <ble_timer_stop+0x68>)
    25e6:	4798      	blx	r3
				bsp_timer_status[BLE_APP_TIMER_ID1] = false;
    25e8:	2200      	movs	r2, #0
    25ea:	4b0d      	ldr	r3, [pc, #52]	; (2620 <ble_timer_stop+0x5c>)
    25ec:	741a      	strb	r2, [r3, #16]
    25ee:	e016      	b.n	261e <ble_timer_stop+0x5a>
		}
		break;

		case BLE_APP_TIMER_ID2:
		{
			if (bsp_timer_status[BLE_APP_TIMER_ID2])
    25f0:	4b0b      	ldr	r3, [pc, #44]	; (2620 <ble_timer_stop+0x5c>)
    25f2:	7c5b      	ldrb	r3, [r3, #17]
    25f4:	2b00      	cmp	r3, #0
    25f6:	d012      	beq.n	261e <ble_timer_stop+0x5a>
			{
				timer_remove_task(&TIMER_0, &app_timer_2_task);
    25f8:	480a      	ldr	r0, [pc, #40]	; (2624 <ble_timer_stop+0x60>)
    25fa:	490d      	ldr	r1, [pc, #52]	; (2630 <ble_timer_stop+0x6c>)
    25fc:	4b0b      	ldr	r3, [pc, #44]	; (262c <ble_timer_stop+0x68>)
    25fe:	4798      	blx	r3
				bsp_timer_status[BLE_APP_TIMER_ID2] = false;
    2600:	2200      	movs	r2, #0
    2602:	4b07      	ldr	r3, [pc, #28]	; (2620 <ble_timer_stop+0x5c>)
    2604:	745a      	strb	r2, [r3, #17]
    2606:	e00a      	b.n	261e <ble_timer_stop+0x5a>
		}
		break;
		
		case BLE_APP_TIMER_ID3:
		{
			if (bsp_timer_status[BLE_APP_TIMER_ID3])
    2608:	4b05      	ldr	r3, [pc, #20]	; (2620 <ble_timer_stop+0x5c>)
    260a:	7c9b      	ldrb	r3, [r3, #18]
    260c:	2b00      	cmp	r3, #0
    260e:	d006      	beq.n	261e <ble_timer_stop+0x5a>
			{
				timer_remove_task(&TIMER_0, &app_timer_3_task);
    2610:	4804      	ldr	r0, [pc, #16]	; (2624 <ble_timer_stop+0x60>)
    2612:	4908      	ldr	r1, [pc, #32]	; (2634 <ble_timer_stop+0x70>)
    2614:	4b05      	ldr	r3, [pc, #20]	; (262c <ble_timer_stop+0x68>)
    2616:	4798      	blx	r3
				bsp_timer_status[BLE_APP_TIMER_ID3] = false;
    2618:	2200      	movs	r2, #0
    261a:	4b01      	ldr	r3, [pc, #4]	; (2620 <ble_timer_stop+0x5c>)
    261c:	749a      	strb	r2, [r3, #18]
		break;

		default:
		break;
	}
}
    261e:	bd08      	pop	{r3, pc}
    2620:	20000120 	.word	0x20000120
    2624:	20000ea4 	.word	0x20000ea4
    2628:	20000f40 	.word	0x20000f40
    262c:	000010d9 	.word	0x000010d9
    2630:	20001030 	.word	0x20001030
    2634:	2000101c 	.word	0x2000101c

00002638 <platform_configure_timer>:
	}
}

void platform_configure_timer(platform_hw_timer_callback_t bus_tc_cb_ptr)
{
	bus_timer_callback = bus_tc_cb_ptr;
    2638:	4b01      	ldr	r3, [pc, #4]	; (2640 <platform_configure_timer+0x8>)
    263a:	6018      	str	r0, [r3, #0]
}
    263c:	4770      	bx	lr
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	20000f38 	.word	0x20000f38

00002644 <platform_start_bus_timer>:

void platform_start_bus_timer(uint32_t timeout)
{
    2644:	b510      	push	{r4, lr}
	if (timeout == 0xFFFFFFFF)
    2646:	1c43      	adds	r3, r0, #1
    2648:	d008      	beq.n	265c <platform_start_bus_timer+0x18>
	{
		return;
	}
	ble_timer_start(BLE_APP_TIMER_ID1, MS_TIMER(timeout), BLE_TIMER_REPEAT, (ble_timer_cb_t)bus_timer_callback);
    264a:	0041      	lsls	r1, r0, #1
    264c:	1809      	adds	r1, r1, r0
    264e:	0109      	lsls	r1, r1, #4
    2650:	4b03      	ldr	r3, [pc, #12]	; (2660 <platform_start_bus_timer+0x1c>)
    2652:	681b      	ldr	r3, [r3, #0]
    2654:	2000      	movs	r0, #0
    2656:	2201      	movs	r2, #1
    2658:	4c02      	ldr	r4, [pc, #8]	; (2664 <platform_start_bus_timer+0x20>)
    265a:	47a0      	blx	r4
}
    265c:	bd10      	pop	{r4, pc}
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	20000f38 	.word	0x20000f38
    2664:	00002515 	.word	0x00002515

00002668 <platform_stop_bus_timer>:

void platform_stop_bus_timer(void)
{
    2668:	b508      	push	{r3, lr}
	ble_timer_stop(BLE_APP_TIMER_ID1);
    266a:	2000      	movs	r0, #0
    266c:	4b01      	ldr	r3, [pc, #4]	; (2674 <platform_stop_bus_timer+0xc>)
    266e:	4798      	blx	r3
}
    2670:	bd08      	pop	{r3, pc}
    2672:	46c0      	nop			; (mov r8, r8)
    2674:	000025c5 	.word	0x000025c5

00002678 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
    2678:	2000      	movs	r0, #0
    267a:	4770      	bx	lr

0000267c <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
    267c:	2000      	movs	r0, #0
    267e:	4770      	bx	lr

00002680 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
    2680:	78c0      	ldrb	r0, [r0, #3]
    2682:	2800      	cmp	r0, #0
    2684:	d000      	beq.n	2688 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
    2686:	20e2      	movs	r0, #226	; 0xe2
}
    2688:	4770      	bx	lr
    268a:	46c0      	nop			; (mov r8, r8)

0000268c <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
    268c:	2000      	movs	r0, #0
    268e:	4770      	bx	lr

00002690 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
    2690:	b508      	push	{r3, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
    2692:	7800      	ldrb	r0, [r0, #0]
    2694:	2800      	cmp	r0, #0
    2696:	d006      	beq.n	26a6 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
    2698:	4803      	ldr	r0, [pc, #12]	; (26a8 <ble_scan_report_handler+0x18>)
    269a:	4b04      	ldr	r3, [pc, #16]	; (26ac <ble_scan_report_handler+0x1c>)
    269c:	4798      	blx	r3
    269e:	4804      	ldr	r0, [pc, #16]	; (26b0 <ble_scan_report_handler+0x20>)
    26a0:	4b04      	ldr	r3, [pc, #16]	; (26b4 <ble_scan_report_handler+0x24>)
    26a2:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
    26a4:	20e2      	movs	r0, #226	; 0xe2
}
    26a6:	bd08      	pop	{r3, pc}
    26a8:	00008708 	.word	0x00008708
    26ac:	000075f9 	.word	0x000075f9
    26b0:	00008dd0 	.word	0x00008dd0
    26b4:	000074d9 	.word	0x000074d9

000026b8 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
    26b8:	b510      	push	{r4, lr}
    26ba:	1c03      	adds	r3, r0, #0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
    26bc:	78c0      	ldrb	r0, [r0, #3]
    26be:	2800      	cmp	r0, #0
    26c0:	d009      	beq.n	26d6 <ble_mtu_changed_cmd_complete_handler+0x1e>
    26c2:	1c1c      	adds	r4, r3, #0
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
    26c4:	4804      	ldr	r0, [pc, #16]	; (26d8 <ble_mtu_changed_cmd_complete_handler+0x20>)
    26c6:	4b05      	ldr	r3, [pc, #20]	; (26dc <ble_mtu_changed_cmd_complete_handler+0x24>)
    26c8:	4798      	blx	r3
    26ca:	8821      	ldrh	r1, [r4, #0]
    26cc:	78a2      	ldrb	r2, [r4, #2]
    26ce:	4804      	ldr	r0, [pc, #16]	; (26e0 <ble_mtu_changed_cmd_complete_handler+0x28>)
    26d0:	4b04      	ldr	r3, [pc, #16]	; (26e4 <ble_mtu_changed_cmd_complete_handler+0x2c>)
    26d2:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
    26d4:	20e2      	movs	r0, #226	; 0xe2
}
    26d6:	bd10      	pop	{r4, pc}
    26d8:	00008708 	.word	0x00008708
    26dc:	000075f9 	.word	0x000075f9
    26e0:	00008de4 	.word	0x00008de4
    26e4:	000074d9 	.word	0x000074d9

000026e8 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
    26e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ea:	1c04      	adds	r4, r0, #0
    26ec:	4b19      	ldr	r3, [pc, #100]	; (2754 <ble_disconnected_state_handler+0x6c>)
    26ee:	229b      	movs	r2, #155	; 0x9b
    26f0:	0092      	lsls	r2, r2, #2
    26f2:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
    26f4:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    26f6:	2600      	movs	r6, #0
    26f8:	1c18      	adds	r0, r3, #0
    26fa:	1c1a      	adds	r2, r3, #0
    26fc:	3a56      	subs	r2, #86	; 0x56
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
    26fe:	8811      	ldrh	r1, [r2, #0]
    2700:	8822      	ldrh	r2, [r4, #0]
    2702:	4291      	cmp	r1, r2
    2704:	d119      	bne.n	273a <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
    2706:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
    2708:	2a05      	cmp	r2, #5
    270a:	d001      	beq.n	2710 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
    270c:	2a08      	cmp	r2, #8
    270e:	d101      	bne.n	2714 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
    2710:	7007      	strb	r7, [r0, #0]
    2712:	e012      	b.n	273a <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
    2714:	2a07      	cmp	r2, #7
    2716:	d80f      	bhi.n	2738 <ble_disconnected_state_handler+0x50>
    2718:	0092      	lsls	r2, r2, #2
    271a:	490f      	ldr	r1, [pc, #60]	; (2758 <ble_disconnected_state_handler+0x70>)
    271c:	588a      	ldr	r2, [r1, r2]
    271e:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    2720:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
    2722:	4a0e      	ldr	r2, [pc, #56]	; (275c <ble_disconnected_state_handler+0x74>)
    2724:	7812      	ldrb	r2, [r2, #0]
    2726:	2a00      	cmp	r2, #0
    2728:	d007      	beq.n	273a <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
    272a:	4a0c      	ldr	r2, [pc, #48]	; (275c <ble_disconnected_state_handler+0x74>)
    272c:	7812      	ldrb	r2, [r2, #0]
    272e:	3a01      	subs	r2, #1
    2730:	b2d2      	uxtb	r2, r2
    2732:	490a      	ldr	r1, [pc, #40]	; (275c <ble_disconnected_state_handler+0x74>)
    2734:	700a      	strb	r2, [r1, #0]
    2736:	e000      	b.n	273a <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    2738:	7006      	strb	r6, [r0, #0]
    273a:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    273c:	42ab      	cmp	r3, r5
    273e:	d1db      	bne.n	26f8 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
    2740:	4807      	ldr	r0, [pc, #28]	; (2760 <ble_disconnected_state_handler+0x78>)
    2742:	4b08      	ldr	r3, [pc, #32]	; (2764 <ble_disconnected_state_handler+0x7c>)
    2744:	4798      	blx	r3
    2746:	78e1      	ldrb	r1, [r4, #3]
    2748:	8822      	ldrh	r2, [r4, #0]
    274a:	4807      	ldr	r0, [pc, #28]	; (2768 <ble_disconnected_state_handler+0x80>)
    274c:	4b07      	ldr	r3, [pc, #28]	; (276c <ble_disconnected_state_handler+0x84>)
    274e:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
    2750:	2000      	movs	r0, #0
    2752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2754:	200010be 	.word	0x200010be
    2758:	00008c18 	.word	0x00008c18
    275c:	200012cc 	.word	0x200012cc
    2760:	00008708 	.word	0x00008708
    2764:	000075f9 	.word	0x000075f9
    2768:	00008e1c 	.word	0x00008e1c
    276c:	000074d9 	.word	0x000074d9

00002770 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
    2770:	b570      	push	{r4, r5, r6, lr}
    2772:	1c06      	adds	r6, r0, #0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
    2774:	8801      	ldrh	r1, [r0, #0]
    2776:	4b26      	ldr	r3, [pc, #152]	; (2810 <ble_encryption_status_change_handler+0xa0>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    2778:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
    277a:	891a      	ldrh	r2, [r3, #8]
    277c:	428a      	cmp	r2, r1
    277e:	d104      	bne.n	278a <ble_encryption_status_change_handler+0x1a>
    2780:	1c1a      	adds	r2, r3, #0
    2782:	325e      	adds	r2, #94	; 0x5e
    2784:	7812      	ldrb	r2, [r2, #0]
    2786:	2a06      	cmp	r2, #6
    2788:	d02a      	beq.n	27e0 <ble_encryption_status_change_handler+0x70>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    278a:	3401      	adds	r4, #1
    278c:	b2e4      	uxtb	r4, r4
    278e:	337c      	adds	r3, #124	; 0x7c
    2790:	2c05      	cmp	r4, #5
    2792:	d1f2      	bne.n	277a <ble_encryption_status_change_handler+0xa>
    2794:	e035      	b.n	2802 <ble_encryption_status_change_handler+0x92>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
    2796:	491e      	ldr	r1, [pc, #120]	; (2810 <ble_encryption_status_change_handler+0xa0>)
    2798:	0163      	lsls	r3, r4, #5
    279a:	1b1a      	subs	r2, r3, r4
    279c:	0092      	lsls	r2, r2, #2
    279e:	188a      	adds	r2, r1, r2
    27a0:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
    27a2:	1c13      	adds	r3, r2, #0
    27a4:	3358      	adds	r3, #88	; 0x58
    27a6:	2207      	movs	r2, #7
    27a8:	719a      	strb	r2, [r3, #6]
		DBG_LOG("Encryption failed");
    27aa:	481a      	ldr	r0, [pc, #104]	; (2814 <ble_encryption_status_change_handler+0xa4>)
    27ac:	4b1a      	ldr	r3, [pc, #104]	; (2818 <ble_encryption_status_change_handler+0xa8>)
    27ae:	4798      	blx	r3
    27b0:	481a      	ldr	r0, [pc, #104]	; (281c <ble_encryption_status_change_handler+0xac>)
    27b2:	4b1b      	ldr	r3, [pc, #108]	; (2820 <ble_encryption_status_change_handler+0xb0>)
    27b4:	4798      	blx	r3
		return AT_BLE_FAILURE;
    27b6:	25e2      	movs	r5, #226	; 0xe2
    27b8:	e027      	b.n	280a <ble_encryption_status_change_handler+0x9a>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
    27ba:	4816      	ldr	r0, [pc, #88]	; (2814 <ble_encryption_status_change_handler+0xa4>)
    27bc:	4b16      	ldr	r3, [pc, #88]	; (2818 <ble_encryption_status_change_handler+0xa8>)
    27be:	4798      	blx	r3
    27c0:	4818      	ldr	r0, [pc, #96]	; (2824 <ble_encryption_status_change_handler+0xb4>)
    27c2:	4b17      	ldr	r3, [pc, #92]	; (2820 <ble_encryption_status_change_handler+0xb0>)
    27c4:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
    27c6:	237c      	movs	r3, #124	; 0x7c
    27c8:	435c      	muls	r4, r3
    27ca:	4b11      	ldr	r3, [pc, #68]	; (2810 <ble_encryption_status_change_handler+0xa0>)
    27cc:	191b      	adds	r3, r3, r4
    27ce:	1c1a      	adds	r2, r3, #0
    27d0:	3258      	adds	r2, #88	; 0x58
    27d2:	2108      	movs	r1, #8
    27d4:	7191      	strb	r1, [r2, #6]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
    27d6:	78f2      	ldrb	r2, [r6, #3]
    27d8:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
    27da:	78b2      	ldrb	r2, [r6, #2]
    27dc:	761a      	strb	r2, [r3, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
    27de:	e014      	b.n	280a <ble_encryption_status_change_handler+0x9a>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
    27e0:	78b5      	ldrb	r5, [r6, #2]
    27e2:	2d00      	cmp	r5, #0
    27e4:	d1d7      	bne.n	2796 <ble_encryption_status_change_handler+0x26>
    27e6:	e7e8      	b.n	27ba <ble_encryption_status_change_handler+0x4a>
	{
		DBG_LOG("Encryption completed successfully");
    27e8:	4e0a      	ldr	r6, [pc, #40]	; (2814 <ble_encryption_status_change_handler+0xa4>)
    27ea:	1c30      	adds	r0, r6, #0
    27ec:	4d0a      	ldr	r5, [pc, #40]	; (2818 <ble_encryption_status_change_handler+0xa8>)
    27ee:	47a8      	blx	r5
    27f0:	480c      	ldr	r0, [pc, #48]	; (2824 <ble_encryption_status_change_handler+0xb4>)
    27f2:	4c0b      	ldr	r4, [pc, #44]	; (2820 <ble_encryption_status_change_handler+0xb0>)
    27f4:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
    27f6:	1c30      	adds	r0, r6, #0
    27f8:	47a8      	blx	r5
    27fa:	480b      	ldr	r0, [pc, #44]	; (2828 <ble_encryption_status_change_handler+0xb8>)
    27fc:	47a0      	blx	r4
			return AT_BLE_FAILURE;
    27fe:	25e2      	movs	r5, #226	; 0xe2
    2800:	e003      	b.n	280a <ble_encryption_status_change_handler+0x9a>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
    2802:	78b5      	ldrb	r5, [r6, #2]
    2804:	2d00      	cmp	r5, #0
    2806:	d1c6      	bne.n	2796 <ble_encryption_status_change_handler+0x26>
    2808:	e7ee      	b.n	27e8 <ble_encryption_status_change_handler+0x78>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
    280a:	1c28      	adds	r0, r5, #0
    280c:	bd70      	pop	{r4, r5, r6, pc}
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	20001060 	.word	0x20001060
    2814:	00008708 	.word	0x00008708
    2818:	000075f9 	.word	0x000075f9
    281c:	00008e4c 	.word	0x00008e4c
    2820:	000074d9 	.word	0x000074d9
    2824:	00008e60 	.word	0x00008e60
    2828:	00008e84 	.word	0x00008e84

0000282c <ble_scan_info_handler>:
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_OBSERVER_MODE, false,true)) ;
}

/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
    282c:	b510      	push	{r4, lr}
    282e:	1c01      	adds	r1, r0, #0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
    2830:	4b15      	ldr	r3, [pc, #84]	; (2888 <ble_scan_info_handler+0x5c>)
    2832:	781b      	ldrb	r3, [r3, #0]
    2834:	b2db      	uxtb	r3, r3
    2836:	2b13      	cmp	r3, #19
    2838:	d812      	bhi.n	2860 <ble_scan_info_handler+0x34>
	{
		// store the advertising report data into scan_info[]
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
    283a:	4c13      	ldr	r4, [pc, #76]	; (2888 <ble_scan_info_handler+0x5c>)
    283c:	7823      	ldrb	r3, [r4, #0]
    283e:	b2db      	uxtb	r3, r3
    2840:	0098      	lsls	r0, r3, #2
    2842:	18c0      	adds	r0, r0, r3
    2844:	00c0      	lsls	r0, r0, #3
    2846:	18c3      	adds	r3, r0, r3
    2848:	4810      	ldr	r0, [pc, #64]	; (288c <ble_scan_info_handler+0x60>)
    284a:	18c0      	adds	r0, r0, r3
    284c:	2229      	movs	r2, #41	; 0x29
    284e:	4b10      	ldr	r3, [pc, #64]	; (2890 <ble_scan_info_handler+0x64>)
    2850:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
    2852:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
    2854:	7823      	ldrb	r3, [r4, #0]
    2856:	3301      	adds	r3, #1
    2858:	b2db      	uxtb	r3, r3
    285a:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
    285c:	2000      	movs	r0, #0
    285e:	e012      	b.n	2886 <ble_scan_info_handler+0x5a>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
    2860:	480c      	ldr	r0, [pc, #48]	; (2894 <ble_scan_info_handler+0x68>)
    2862:	4b0d      	ldr	r3, [pc, #52]	; (2898 <ble_scan_info_handler+0x6c>)
    2864:	4798      	blx	r3
    2866:	480d      	ldr	r0, [pc, #52]	; (289c <ble_scan_info_handler+0x70>)
    2868:	4b0d      	ldr	r3, [pc, #52]	; (28a0 <ble_scan_info_handler+0x74>)
    286a:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
    286c:	4b0d      	ldr	r3, [pc, #52]	; (28a4 <ble_scan_info_handler+0x78>)
    286e:	4798      	blx	r3
    2870:	1c03      	adds	r3, r0, #0
		{
			DBG_LOG("Failed to stop scanning");
		}
		
		return AT_BLE_FAILURE;
    2872:	20e2      	movs	r0, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
    2874:	2b00      	cmp	r3, #0
    2876:	d006      	beq.n	2886 <ble_scan_info_handler+0x5a>
		{
			DBG_LOG("Failed to stop scanning");
    2878:	4806      	ldr	r0, [pc, #24]	; (2894 <ble_scan_info_handler+0x68>)
    287a:	4b07      	ldr	r3, [pc, #28]	; (2898 <ble_scan_info_handler+0x6c>)
    287c:	4798      	blx	r3
    287e:	480a      	ldr	r0, [pc, #40]	; (28a8 <ble_scan_info_handler+0x7c>)
    2880:	4b07      	ldr	r3, [pc, #28]	; (28a0 <ble_scan_info_handler+0x74>)
    2882:	4798      	blx	r3
		}
		
		return AT_BLE_FAILURE;
    2884:	20e2      	movs	r0, #226	; 0xe2
	}
}
    2886:	bd10      	pop	{r4, pc}
    2888:	20000134 	.word	0x20000134
    288c:	20001358 	.word	0x20001358
    2890:	000074b7 	.word	0x000074b7
    2894:	00008708 	.word	0x00008708
    2898:	000075f9 	.word	0x000075f9
    289c:	00008eac 	.word	0x00008eac
    28a0:	000074d9 	.word	0x000074d9
    28a4:	0000468d 	.word	0x0000468d
    28a8:	00008ee4 	.word	0x00008ee4

000028ac <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
    28ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28ae:	464f      	mov	r7, r9
    28b0:	4646      	mov	r6, r8
    28b2:	b4c0      	push	{r6, r7}
    28b4:	1c06      	adds	r6, r0, #0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
    28b6:	8845      	ldrh	r5, [r0, #2]
    28b8:	4a3a      	ldr	r2, [pc, #232]	; (29a4 <ble_pair_done_handler+0xf8>)
    28ba:	2300      	movs	r3, #0
    28bc:	b2dc      	uxtb	r4, r3
    28be:	1c19      	adds	r1, r3, #0
    28c0:	8910      	ldrh	r0, [r2, #8]
    28c2:	42a8      	cmp	r0, r5
    28c4:	d110      	bne.n	28e8 <ble_pair_done_handler+0x3c>
    28c6:	1c10      	adds	r0, r2, #0
    28c8:	305e      	adds	r0, #94	; 0x5e
    28ca:	7800      	ldrb	r0, [r0, #0]
    28cc:	2803      	cmp	r0, #3
    28ce:	d10b      	bne.n	28e8 <ble_pair_done_handler+0x3c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
    28d0:	015b      	lsls	r3, r3, #5
    28d2:	1a5b      	subs	r3, r3, r1
    28d4:	0099      	lsls	r1, r3, #2
    28d6:	4b33      	ldr	r3, [pc, #204]	; (29a4 <ble_pair_done_handler+0xf8>)
    28d8:	185b      	adds	r3, r3, r1
    28da:	3358      	adds	r3, #88	; 0x58
    28dc:	2205      	movs	r2, #5
    28de:	719a      	strb	r2, [r3, #6]
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
    28e0:	7935      	ldrb	r5, [r6, #4]
    28e2:	2d00      	cmp	r5, #0
    28e4:	d034      	beq.n	2950 <ble_pair_done_handler+0xa4>
    28e6:	e006      	b.n	28f6 <ble_pair_done_handler+0x4a>
    28e8:	3401      	adds	r4, #1
    28ea:	b2e4      	uxtb	r4, r4
    28ec:	3301      	adds	r3, #1
    28ee:	327c      	adds	r2, #124	; 0x7c
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    28f0:	2b05      	cmp	r3, #5
    28f2:	d1e3      	bne.n	28bc <ble_pair_done_handler+0x10>
    28f4:	e028      	b.n	2948 <ble_pair_done_handler+0x9c>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING_FAILED;
    28f6:	0163      	lsls	r3, r4, #5
    28f8:	1b1c      	subs	r4, r3, r4
    28fa:	00a4      	lsls	r4, r4, #2
    28fc:	4b29      	ldr	r3, [pc, #164]	; (29a4 <ble_pair_done_handler+0xf8>)
    28fe:	191c      	adds	r4, r3, r4
    2900:	3458      	adds	r4, #88	; 0x58
    2902:	2304      	movs	r3, #4
    2904:	71a3      	strb	r3, [r4, #6]
		DBG_LOG("Pairing failed...Disconnecting");
    2906:	4828      	ldr	r0, [pc, #160]	; (29a8 <ble_pair_done_handler+0xfc>)
    2908:	4b28      	ldr	r3, [pc, #160]	; (29ac <ble_pair_done_handler+0x100>)
    290a:	4798      	blx	r3
    290c:	4828      	ldr	r0, [pc, #160]	; (29b0 <ble_pair_done_handler+0x104>)
    290e:	4b29      	ldr	r3, [pc, #164]	; (29b4 <ble_pair_done_handler+0x108>)
    2910:	4798      	blx	r3
		if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
    2912:	8870      	ldrh	r0, [r6, #2]
    2914:	2113      	movs	r1, #19
    2916:	4b28      	ldr	r3, [pc, #160]	; (29b8 <ble_pair_done_handler+0x10c>)
    2918:	4798      	blx	r3
    291a:	1e05      	subs	r5, r0, #0
    291c:	d03d      	beq.n	299a <ble_pair_done_handler+0xee>
		{
			DBG_LOG("Disconnect Request Failed");
    291e:	4822      	ldr	r0, [pc, #136]	; (29a8 <ble_pair_done_handler+0xfc>)
    2920:	4b22      	ldr	r3, [pc, #136]	; (29ac <ble_pair_done_handler+0x100>)
    2922:	4798      	blx	r3
    2924:	4825      	ldr	r0, [pc, #148]	; (29bc <ble_pair_done_handler+0x110>)
    2926:	4b23      	ldr	r3, [pc, #140]	; (29b4 <ble_pair_done_handler+0x108>)
    2928:	4798      	blx	r3
			return AT_BLE_FAILURE;
    292a:	25e2      	movs	r5, #226	; 0xe2
    292c:	e035      	b.n	299a <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
    292e:	4e1e      	ldr	r6, [pc, #120]	; (29a8 <ble_pair_done_handler+0xfc>)
    2930:	1c30      	adds	r0, r6, #0
    2932:	4d1e      	ldr	r5, [pc, #120]	; (29ac <ble_pair_done_handler+0x100>)
    2934:	47a8      	blx	r5
    2936:	4822      	ldr	r0, [pc, #136]	; (29c0 <ble_pair_done_handler+0x114>)
    2938:	4c1e      	ldr	r4, [pc, #120]	; (29b4 <ble_pair_done_handler+0x108>)
    293a:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
    293c:	1c30      	adds	r0, r6, #0
    293e:	47a8      	blx	r5
    2940:	4820      	ldr	r0, [pc, #128]	; (29c4 <ble_pair_done_handler+0x118>)
    2942:	47a0      	blx	r4
			return AT_BLE_FAILURE;
    2944:	25e2      	movs	r5, #226	; 0xe2
    2946:	e028      	b.n	299a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
    2948:	7933      	ldrb	r3, [r6, #4]
    294a:	2b00      	cmp	r3, #0
    294c:	d0ef      	beq.n	292e <ble_pair_done_handler+0x82>
    294e:	e7d2      	b.n	28f6 <ble_pair_done_handler+0x4a>
	{
		DBG_LOG("Pairing procedure completed successfully");
    2950:	4815      	ldr	r0, [pc, #84]	; (29a8 <ble_pair_done_handler+0xfc>)
    2952:	4b16      	ldr	r3, [pc, #88]	; (29ac <ble_pair_done_handler+0x100>)
    2954:	4798      	blx	r3
    2956:	481a      	ldr	r0, [pc, #104]	; (29c0 <ble_pair_done_handler+0x114>)
    2958:	4b16      	ldr	r3, [pc, #88]	; (29b4 <ble_pair_done_handler+0x108>)
    295a:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
    295c:	7832      	ldrb	r2, [r6, #0]
    295e:	4f11      	ldr	r7, [pc, #68]	; (29a4 <ble_pair_done_handler+0xf8>)
    2960:	237c      	movs	r3, #124	; 0x7c
    2962:	435c      	muls	r4, r3
    2964:	193b      	adds	r3, r7, r4
    2966:	4699      	mov	r9, r3
    2968:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
    296a:	7932      	ldrb	r2, [r6, #4]
    296c:	761a      	strb	r2, [r3, #24]
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
    296e:	4648      	mov	r0, r9
    2970:	3036      	adds	r0, #54	; 0x36
    2972:	1c31      	adds	r1, r6, #0
    2974:	3122      	adds	r1, #34	; 0x22
    2976:	2210      	movs	r2, #16
    2978:	4b13      	ldr	r3, [pc, #76]	; (29c8 <ble_pair_done_handler+0x11c>)
    297a:	4698      	mov	r8, r3
    297c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
    297e:	4648      	mov	r0, r9
    2980:	3046      	adds	r0, #70	; 0x46
    2982:	1c31      	adds	r1, r6, #0
    2984:	3132      	adds	r1, #50	; 0x32
    2986:	2217      	movs	r2, #23
    2988:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
    298a:	4648      	mov	r0, r9
    298c:	301a      	adds	r0, #26
    298e:	1db1      	adds	r1, r6, #6
    2990:	221c      	movs	r2, #28
    2992:	47c0      	blx	r8
			ble_dev_info->conn_state = BLE_DEVICE_PAIRED;
    2994:	2205      	movs	r2, #5
    2996:	235e      	movs	r3, #94	; 0x5e
    2998:	54fa      	strb	r2, [r7, r3]
			DBG_LOG("Disconnect Request Failed");
			return AT_BLE_FAILURE;
		}
	}
	return AT_BLE_SUCCESS;
}
    299a:	1c28      	adds	r0, r5, #0
    299c:	bc0c      	pop	{r2, r3}
    299e:	4690      	mov	r8, r2
    29a0:	4699      	mov	r9, r3
    29a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29a4:	20001060 	.word	0x20001060
    29a8:	00008708 	.word	0x00008708
    29ac:	000075f9 	.word	0x000075f9
    29b0:	00008efc 	.word	0x00008efc
    29b4:	000074d9 	.word	0x000074d9
    29b8:	000046ad 	.word	0x000046ad
    29bc:	00008f1c 	.word	0x00008f1c
    29c0:	00008f38 	.word	0x00008f38
    29c4:	00008f64 	.word	0x00008f64
    29c8:	000074b7 	.word	0x000074b7

000029cc <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
    29cc:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
    29ce:	8800      	ldrh	r0, [r0, #0]
    29d0:	2101      	movs	r1, #1
    29d2:	2201      	movs	r2, #1
    29d4:	2378      	movs	r3, #120	; 0x78
    29d6:	4c02      	ldr	r4, [pc, #8]	; (29e0 <ble_conn_param_update_req+0x14>)
    29d8:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
    29da:	2000      	movs	r0, #0
    29dc:	bd10      	pop	{r4, pc}
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	000046cd 	.word	0x000046cd

000029e4 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
    29e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29e6:	4657      	mov	r7, sl
    29e8:	464e      	mov	r6, r9
    29ea:	4645      	mov	r5, r8
    29ec:	b4e0      	push	{r5, r6, r7}
    29ee:	b084      	sub	sp, #16
    29f0:	1c04      	adds	r4, r0, #0
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    29f2:	8806      	ldrh	r6, [r0, #0]
    29f4:	496c      	ldr	r1, [pc, #432]	; (2ba8 <ble_slave_security_request_handler+0x1c4>)
    29f6:	1c0a      	adds	r2, r1, #0
    29f8:	2300      	movs	r3, #0
    29fa:	b2dd      	uxtb	r5, r3
    29fc:	1c1f      	adds	r7, r3, #0
    29fe:	8910      	ldrh	r0, [r2, #8]
    2a00:	42b0      	cmp	r0, r6
    2a02:	d114      	bne.n	2a2e <ble_slave_security_request_handler+0x4a>
    2a04:	1c10      	adds	r0, r2, #0
    2a06:	305e      	adds	r0, #94	; 0x5e
    2a08:	7800      	ldrb	r0, [r0, #0]
    2a0a:	2802      	cmp	r0, #2
    2a0c:	d10f      	bne.n	2a2e <ble_slave_security_request_handler+0x4a>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
    2a0e:	4a66      	ldr	r2, [pc, #408]	; (2ba8 <ble_slave_security_request_handler+0x1c4>)
    2a10:	015b      	lsls	r3, r3, #5
    2a12:	1bdb      	subs	r3, r3, r7
    2a14:	009b      	lsls	r3, r3, #2
    2a16:	18d3      	adds	r3, r2, r3
    2a18:	3358      	adds	r3, #88	; 0x58
    2a1a:	3004      	adds	r0, #4
    2a1c:	7198      	strb	r0, [r3, #6]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
    2a1e:	016b      	lsls	r3, r5, #5
    2a20:	1b5b      	subs	r3, r3, r5
    2a22:	009b      	lsls	r3, r3, #2
    2a24:	18d3      	adds	r3, r2, r3
    2a26:	7d1a      	ldrb	r2, [r3, #20]
    2a28:	07d3      	lsls	r3, r2, #31
    2a2a:	d405      	bmi.n	2a38 <ble_slave_security_request_handler+0x54>
    2a2c:	e01b      	b.n	2a66 <ble_slave_security_request_handler+0x82>
    2a2e:	3301      	adds	r3, #1
    2a30:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    2a32:	2b05      	cmp	r3, #5
    2a34:	d1e1      	bne.n	29fa <ble_slave_security_request_handler+0x16>
    2a36:	e01e      	b.n	2a76 <ble_slave_security_request_handler+0x92>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
    2a38:	78e3      	ldrb	r3, [r4, #3]
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d013      	beq.n	2a66 <ble_slave_security_request_handler+0x82>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
    2a3e:	8820      	ldrh	r0, [r4, #0]
    2a40:	0169      	lsls	r1, r5, #5
    2a42:	1b49      	subs	r1, r1, r5
    2a44:	008d      	lsls	r5, r1, #2
    2a46:	4958      	ldr	r1, [pc, #352]	; (2ba8 <ble_slave_security_request_handler+0x1c4>)
    2a48:	1949      	adds	r1, r1, r5
    2a4a:	311a      	adds	r1, #26
    2a4c:	4b57      	ldr	r3, [pc, #348]	; (2bac <ble_slave_security_request_handler+0x1c8>)
    2a4e:	4798      	blx	r3
    2a50:	2800      	cmp	r0, #0
    2a52:	d100      	bne.n	2a56 <ble_slave_security_request_handler+0x72>
    2a54:	e0a2      	b.n	2b9c <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
    2a56:	4856      	ldr	r0, [pc, #344]	; (2bb0 <ble_slave_security_request_handler+0x1cc>)
    2a58:	4b56      	ldr	r3, [pc, #344]	; (2bb4 <ble_slave_security_request_handler+0x1d0>)
    2a5a:	4798      	blx	r3
    2a5c:	4856      	ldr	r0, [pc, #344]	; (2bb8 <ble_slave_security_request_handler+0x1d4>)
    2a5e:	4b57      	ldr	r3, [pc, #348]	; (2bbc <ble_slave_security_request_handler+0x1d8>)
    2a60:	4798      	blx	r3
				return AT_BLE_FAILURE;
    2a62:	20e2      	movs	r0, #226	; 0xe2
    2a64:	e09a      	b.n	2b9c <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    2a66:	016b      	lsls	r3, r5, #5
    2a68:	1b5d      	subs	r5, r3, r5
    2a6a:	00ad      	lsls	r5, r5, #2
    2a6c:	4b4e      	ldr	r3, [pc, #312]	; (2ba8 <ble_slave_security_request_handler+0x1c4>)
    2a6e:	195d      	adds	r5, r3, r5
    2a70:	3558      	adds	r5, #88	; 0x58
    2a72:	2302      	movs	r3, #2
    2a74:	71ab      	strb	r3, [r5, #6]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    2a76:	8825      	ldrh	r5, [r4, #0]
    2a78:	2200      	movs	r2, #0
    2a7a:	b2d3      	uxtb	r3, r2
    2a7c:	1c16      	adds	r6, r2, #0
    2a7e:	8908      	ldrh	r0, [r1, #8]
    2a80:	42a8      	cmp	r0, r5
    2a82:	d10d      	bne.n	2aa0 <ble_slave_security_request_handler+0xbc>
    2a84:	1c08      	adds	r0, r1, #0
    2a86:	305e      	adds	r0, #94	; 0x5e
    2a88:	7800      	ldrb	r0, [r0, #0]
    2a8a:	2802      	cmp	r0, #2
    2a8c:	d108      	bne.n	2aa0 <ble_slave_security_request_handler+0xbc>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
    2a8e:	0152      	lsls	r2, r2, #5
    2a90:	1b92      	subs	r2, r2, r6
    2a92:	0096      	lsls	r6, r2, #2
    2a94:	4a44      	ldr	r2, [pc, #272]	; (2ba8 <ble_slave_security_request_handler+0x1c4>)
    2a96:	1992      	adds	r2, r2, r6
    2a98:	3258      	adds	r2, #88	; 0x58
    2a9a:	2103      	movs	r1, #3
    2a9c:	7191      	strb	r1, [r2, #6]
			break;
    2a9e:	e005      	b.n	2aac <ble_slave_security_request_handler+0xc8>
    2aa0:	3301      	adds	r3, #1
    2aa2:	b2db      	uxtb	r3, r3
    2aa4:	3201      	adds	r2, #1
    2aa6:	317c      	adds	r1, #124	; 0x7c
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    2aa8:	2a05      	cmp	r2, #5
    2aaa:	d1e6      	bne.n	2a7a <ble_slave_security_request_handler+0x96>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
    2aac:	aa01      	add	r2, sp, #4
    2aae:	2102      	movs	r1, #2
    2ab0:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
    2ab2:	78e1      	ldrb	r1, [r4, #3]
    2ab4:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
    2ab6:	2101      	movs	r1, #1
    2ab8:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
    2aba:	3103      	adds	r1, #3
    2abc:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
    2abe:	2100      	movs	r1, #0
    2ac0:	70d1      	strb	r1, [r2, #3]
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
    2ac2:	1c1f      	adds	r7, r3, #0
    2ac4:	015a      	lsls	r2, r3, #5
    2ac6:	1ad2      	subs	r2, r2, r3
    2ac8:	0092      	lsls	r2, r2, #2
    2aca:	4937      	ldr	r1, [pc, #220]	; (2ba8 <ble_slave_security_request_handler+0x1c4>)
    2acc:	5c52      	ldrb	r2, [r2, r1]
    2ace:	2a02      	cmp	r2, #2
    2ad0:	d104      	bne.n	2adc <ble_slave_security_request_handler+0xf8>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    2ad2:	aa01      	add	r2, sp, #4
    2ad4:	2103      	movs	r1, #3
    2ad6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    2ad8:	71d1      	strb	r1, [r2, #7]
    2ada:	e044      	b.n	2b66 <ble_slave_security_request_handler+0x182>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
    2adc:	aa01      	add	r2, sp, #4
    2ade:	2101      	movs	r1, #1
    2ae0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
    2ae2:	71d1      	strb	r1, [r2, #7]
    2ae4:	e03f      	b.n	2b66 <ble_slave_security_request_handler+0x182>
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    2ae6:	47c8      	blx	r9
    2ae8:	4643      	mov	r3, r8
    2aea:	4018      	ands	r0, r3
    2aec:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
    2aee:	47c8      	blx	r9
    2af0:	4643      	mov	r3, r8
    2af2:	4018      	ands	r0, r3
    2af4:	74b0      	strb	r0, [r6, #18]
    2af6:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
    2af8:	42ae      	cmp	r6, r5
    2afa:	d1f4      	bne.n	2ae6 <ble_slave_security_request_handler+0x102>
    2afc:	4653      	mov	r3, sl
    2afe:	3370      	adds	r3, #112	; 0x70
    2b00:	4a29      	ldr	r2, [pc, #164]	; (2ba8 <ble_slave_security_request_handler+0x1c4>)
    2b02:	189e      	adds	r6, r3, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    2b04:	4b2e      	ldr	r3, [pc, #184]	; (2bc0 <ble_slave_security_request_handler+0x1dc>)
    2b06:	4699      	mov	r9, r3
    2b08:	230f      	movs	r3, #15
    2b0a:	4698      	mov	r8, r3
    2b0c:	47c8      	blx	r9
    2b0e:	4643      	mov	r3, r8
    2b10:	4018      	ands	r0, r3
    2b12:	7028      	strb	r0, [r5, #0]
    2b14:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
    2b16:	42b5      	cmp	r5, r6
    2b18:	d1f8      	bne.n	2b0c <ble_slave_security_request_handler+0x128>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
    2b1a:	4b29      	ldr	r3, [pc, #164]	; (2bc0 <ble_slave_security_request_handler+0x1dc>)
    2b1c:	4798      	blx	r3
    2b1e:	017b      	lsls	r3, r7, #5
    2b20:	1bdb      	subs	r3, r3, r7
    2b22:	009b      	lsls	r3, r3, #2
    2b24:	4a20      	ldr	r2, [pc, #128]	; (2ba8 <ble_slave_security_request_handler+0x1c4>)
    2b26:	18d3      	adds	r3, r2, r3
    2b28:	1c1a      	adds	r2, r3, #0
    2b2a:	3270      	adds	r2, #112	; 0x70
    2b2c:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
    2b2e:	3378      	adds	r3, #120	; 0x78
    2b30:	2210      	movs	r2, #16
    2b32:	709a      	strb	r2, [r3, #2]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
    2b34:	8820      	ldrh	r0, [r4, #0]
    2b36:	017a      	lsls	r2, r7, #5
    2b38:	1bd7      	subs	r7, r2, r7
    2b3a:	00bf      	lsls	r7, r7, #2
    2b3c:	3760      	adds	r7, #96	; 0x60
    2b3e:	4a1a      	ldr	r2, [pc, #104]	; (2ba8 <ble_slave_security_request_handler+0x1c4>)
    2b40:	18ba      	adds	r2, r7, r2
    2b42:	a901      	add	r1, sp, #4
    2b44:	2300      	movs	r3, #0
    2b46:	4c1f      	ldr	r4, [pc, #124]	; (2bc4 <ble_slave_security_request_handler+0x1e0>)
    2b48:	47a0      	blx	r4
    2b4a:	2800      	cmp	r0, #0
    2b4c:	d026      	beq.n	2b9c <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
    2b4e:	ab01      	add	r3, sp, #4
    2b50:	2200      	movs	r2, #0
    2b52:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
    2b54:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
    2b56:	4816      	ldr	r0, [pc, #88]	; (2bb0 <ble_slave_security_request_handler+0x1cc>)
    2b58:	4b16      	ldr	r3, [pc, #88]	; (2bb4 <ble_slave_security_request_handler+0x1d0>)
    2b5a:	4798      	blx	r3
    2b5c:	481a      	ldr	r0, [pc, #104]	; (2bc8 <ble_slave_security_request_handler+0x1e4>)
    2b5e:	4b17      	ldr	r3, [pc, #92]	; (2bbc <ble_slave_security_request_handler+0x1d8>)
    2b60:	4798      	blx	r3
		return AT_BLE_FAILURE;
    2b62:	20e2      	movs	r0, #226	; 0xe2
    2b64:	e01a      	b.n	2b9c <ble_slave_security_request_handler+0x1b8>
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
	}
	features.max_key_size = 16;
    2b66:	aa01      	add	r2, sp, #4
    2b68:	2110      	movs	r1, #16
    2b6a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
    2b6c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
    2b6e:	017a      	lsls	r2, r7, #5
    2b70:	1bd2      	subs	r2, r2, r7
    2b72:	0092      	lsls	r2, r2, #2
    2b74:	490c      	ldr	r1, [pc, #48]	; (2ba8 <ble_slave_security_request_handler+0x1c4>)
    2b76:	188a      	adds	r2, r1, r2
    2b78:	7e12      	ldrb	r2, [r2, #24]
    2b7a:	2a40      	cmp	r2, #64	; 0x40
    2b7c:	d1da      	bne.n	2b34 <ble_slave_security_request_handler+0x150>
    2b7e:	015a      	lsls	r2, r3, #5
    2b80:	1ad3      	subs	r3, r2, r3
    2b82:	009b      	lsls	r3, r3, #2
    2b84:	469a      	mov	sl, r3
    2b86:	1c1e      	adds	r6, r3, #0
    2b88:	3660      	adds	r6, #96	; 0x60
    2b8a:	1876      	adds	r6, r6, r1
    2b8c:	4655      	mov	r5, sl
    2b8e:	3568      	adds	r5, #104	; 0x68
    2b90:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    2b92:	4b0b      	ldr	r3, [pc, #44]	; (2bc0 <ble_slave_security_request_handler+0x1dc>)
    2b94:	4699      	mov	r9, r3
    2b96:	230f      	movs	r3, #15
    2b98:	4698      	mov	r8, r3
    2b9a:	e7a4      	b.n	2ae6 <ble_slave_security_request_handler+0x102>
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
    2b9c:	b004      	add	sp, #16
    2b9e:	bc1c      	pop	{r2, r3, r4}
    2ba0:	4690      	mov	r8, r2
    2ba2:	4699      	mov	r9, r3
    2ba4:	46a2      	mov	sl, r4
    2ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ba8:	20001060 	.word	0x20001060
    2bac:	00005535 	.word	0x00005535
    2bb0:	00008708 	.word	0x00008708
    2bb4:	000075f9 	.word	0x000075f9
    2bb8:	00008f94 	.word	0x00008f94
    2bbc:	000074d9 	.word	0x000074d9
    2bc0:	0000760d 	.word	0x0000760d
    2bc4:	000051fd 	.word	0x000051fd
    2bc8:	00008fac 	.word	0x00008fac

00002bcc <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
    2bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bce:	4657      	mov	r7, sl
    2bd0:	464e      	mov	r6, r9
    2bd2:	4645      	mov	r5, r8
    2bd4:	b4e0      	push	{r5, r6, r7}
    2bd6:	b084      	sub	sp, #16
    2bd8:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
    2bda:	8804      	ldrh	r4, [r0, #0]
    2bdc:	4949      	ldr	r1, [pc, #292]	; (2d04 <ble_pair_request_handler+0x138>)
    2bde:	2200      	movs	r2, #0
    2be0:	b2d3      	uxtb	r3, r2
    2be2:	1c15      	adds	r5, r2, #0
    2be4:	8908      	ldrh	r0, [r1, #8]
    2be6:	42a0      	cmp	r0, r4
    2be8:	d10d      	bne.n	2c06 <ble_pair_request_handler+0x3a>
    2bea:	1c08      	adds	r0, r1, #0
    2bec:	305e      	adds	r0, #94	; 0x5e
    2bee:	7800      	ldrb	r0, [r0, #0]
    2bf0:	2802      	cmp	r0, #2
    2bf2:	d108      	bne.n	2c06 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
    2bf4:	0152      	lsls	r2, r2, #5
    2bf6:	1b52      	subs	r2, r2, r5
    2bf8:	0095      	lsls	r5, r2, #2
    2bfa:	4a42      	ldr	r2, [pc, #264]	; (2d04 <ble_pair_request_handler+0x138>)
    2bfc:	1952      	adds	r2, r2, r5
    2bfe:	3258      	adds	r2, #88	; 0x58
    2c00:	2103      	movs	r1, #3
    2c02:	7191      	strb	r1, [r2, #6]
			break;
    2c04:	e005      	b.n	2c12 <ble_pair_request_handler+0x46>
    2c06:	3301      	adds	r3, #1
    2c08:	b2db      	uxtb	r3, r3
    2c0a:	3201      	adds	r2, #1
    2c0c:	317c      	adds	r1, #124	; 0x7c
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    2c0e:	2a05      	cmp	r2, #5
    2c10:	d1e6      	bne.n	2be0 <ble_pair_request_handler+0x14>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
    2c12:	aa01      	add	r2, sp, #4
    2c14:	2102      	movs	r1, #2
    2c16:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
    2c18:	3901      	subs	r1, #1
    2c1a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
    2c1c:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
    2c1e:	2100      	movs	r1, #0
    2c20:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
    2c22:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
    2c24:	1c1f      	adds	r7, r3, #0
    2c26:	015a      	lsls	r2, r3, #5
    2c28:	1ad2      	subs	r2, r2, r3
    2c2a:	0092      	lsls	r2, r2, #2
    2c2c:	4935      	ldr	r1, [pc, #212]	; (2d04 <ble_pair_request_handler+0x138>)
    2c2e:	5c52      	ldrb	r2, [r2, r1]
    2c30:	2a02      	cmp	r2, #2
    2c32:	d104      	bne.n	2c3e <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    2c34:	aa01      	add	r2, sp, #4
    2c36:	2103      	movs	r1, #3
    2c38:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
    2c3a:	71d1      	strb	r1, [r2, #7]
    2c3c:	e041      	b.n	2cc2 <ble_pair_request_handler+0xf6>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
    2c3e:	aa01      	add	r2, sp, #4
    2c40:	2101      	movs	r1, #1
    2c42:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
    2c44:	71d1      	strb	r1, [r2, #7]
    2c46:	e03c      	b.n	2cc2 <ble_pair_request_handler+0xf6>
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    2c48:	47c8      	blx	r9
    2c4a:	4030      	ands	r0, r6
    2c4c:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
    2c4e:	47c8      	blx	r9
    2c50:	4030      	ands	r0, r6
    2c52:	74a8      	strb	r0, [r5, #18]
    2c54:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
    2c56:	42a5      	cmp	r5, r4
    2c58:	d1f6      	bne.n	2c48 <ble_pair_request_handler+0x7c>
    2c5a:	4653      	mov	r3, sl
    2c5c:	3370      	adds	r3, #112	; 0x70
    2c5e:	4a29      	ldr	r2, [pc, #164]	; (2d04 <ble_pair_request_handler+0x138>)
    2c60:	189d      	adds	r5, r3, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    2c62:	4b29      	ldr	r3, [pc, #164]	; (2d08 <ble_pair_request_handler+0x13c>)
    2c64:	4699      	mov	r9, r3
    2c66:	260f      	movs	r6, #15
    2c68:	47c8      	blx	r9
    2c6a:	4030      	ands	r0, r6
    2c6c:	7020      	strb	r0, [r4, #0]
    2c6e:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
    2c70:	42ac      	cmp	r4, r5
    2c72:	d1f9      	bne.n	2c68 <ble_pair_request_handler+0x9c>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
    2c74:	4b24      	ldr	r3, [pc, #144]	; (2d08 <ble_pair_request_handler+0x13c>)
    2c76:	4798      	blx	r3
    2c78:	017b      	lsls	r3, r7, #5
    2c7a:	1bdb      	subs	r3, r3, r7
    2c7c:	009b      	lsls	r3, r3, #2
    2c7e:	4a21      	ldr	r2, [pc, #132]	; (2d04 <ble_pair_request_handler+0x138>)
    2c80:	18d3      	adds	r3, r2, r3
    2c82:	1c1a      	adds	r2, r3, #0
    2c84:	3270      	adds	r2, #112	; 0x70
    2c86:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
    2c88:	3378      	adds	r3, #120	; 0x78
    2c8a:	2210      	movs	r2, #16
    2c8c:	709a      	strb	r2, [r3, #2]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
    2c8e:	4643      	mov	r3, r8
    2c90:	8818      	ldrh	r0, [r3, #0]
    2c92:	017a      	lsls	r2, r7, #5
    2c94:	1bd7      	subs	r7, r2, r7
    2c96:	00bf      	lsls	r7, r7, #2
    2c98:	3760      	adds	r7, #96	; 0x60
    2c9a:	4a1a      	ldr	r2, [pc, #104]	; (2d04 <ble_pair_request_handler+0x138>)
    2c9c:	18ba      	adds	r2, r7, r2
    2c9e:	a901      	add	r1, sp, #4
    2ca0:	2300      	movs	r3, #0
    2ca2:	4c1a      	ldr	r4, [pc, #104]	; (2d0c <ble_pair_request_handler+0x140>)
    2ca4:	47a0      	blx	r4
    2ca6:	2800      	cmp	r0, #0
    2ca8:	d025      	beq.n	2cf6 <ble_pair_request_handler+0x12a>
	{
		features.bond = false;
    2caa:	ab01      	add	r3, sp, #4
    2cac:	2200      	movs	r2, #0
    2cae:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
    2cb0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
    2cb2:	4817      	ldr	r0, [pc, #92]	; (2d10 <ble_pair_request_handler+0x144>)
    2cb4:	4b17      	ldr	r3, [pc, #92]	; (2d14 <ble_pair_request_handler+0x148>)
    2cb6:	4798      	blx	r3
    2cb8:	4817      	ldr	r0, [pc, #92]	; (2d18 <ble_pair_request_handler+0x14c>)
    2cba:	4b18      	ldr	r3, [pc, #96]	; (2d1c <ble_pair_request_handler+0x150>)
    2cbc:	4798      	blx	r3
		return AT_BLE_FAILURE;
    2cbe:	20e2      	movs	r0, #226	; 0xe2
    2cc0:	e019      	b.n	2cf6 <ble_pair_request_handler+0x12a>
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
	}
			
	features.max_key_size = 16;
    2cc2:	aa01      	add	r2, sp, #4
    2cc4:	2110      	movs	r1, #16
    2cc6:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
    2cc8:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
    2cca:	017a      	lsls	r2, r7, #5
    2ccc:	1bd2      	subs	r2, r2, r7
    2cce:	0092      	lsls	r2, r2, #2
    2cd0:	490c      	ldr	r1, [pc, #48]	; (2d04 <ble_pair_request_handler+0x138>)
    2cd2:	188a      	adds	r2, r1, r2
    2cd4:	7e12      	ldrb	r2, [r2, #24]
    2cd6:	2a40      	cmp	r2, #64	; 0x40
    2cd8:	d1d9      	bne.n	2c8e <ble_pair_request_handler+0xc2>
    2cda:	015a      	lsls	r2, r3, #5
    2cdc:	1ad3      	subs	r3, r2, r3
    2cde:	009b      	lsls	r3, r3, #2
    2ce0:	469a      	mov	sl, r3
    2ce2:	1c1d      	adds	r5, r3, #0
    2ce4:	3560      	adds	r5, #96	; 0x60
    2ce6:	186d      	adds	r5, r5, r1
    2ce8:	4654      	mov	r4, sl
    2cea:	3468      	adds	r4, #104	; 0x68
    2cec:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
    2cee:	4b06      	ldr	r3, [pc, #24]	; (2d08 <ble_pair_request_handler+0x13c>)
    2cf0:	4699      	mov	r9, r3
    2cf2:	260f      	movs	r6, #15
    2cf4:	e7a8      	b.n	2c48 <ble_pair_request_handler+0x7c>
		features.mitm_protection = false;
		DBG_LOG("Pair Request - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
    2cf6:	b004      	add	sp, #16
    2cf8:	bc1c      	pop	{r2, r3, r4}
    2cfa:	4690      	mov	r8, r2
    2cfc:	4699      	mov	r9, r3
    2cfe:	46a2      	mov	sl, r4
    2d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d02:	46c0      	nop			; (mov r8, r8)
    2d04:	20001060 	.word	0x20001060
    2d08:	0000760d 	.word	0x0000760d
    2d0c:	000051fd 	.word	0x000051fd
    2d10:	00008708 	.word	0x00008708
    2d14:	000075f9 	.word	0x000075f9
    2d18:	00008fd8 	.word	0x00008fd8
    2d1c:	000074d9 	.word	0x000074d9

00002d20 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
    2d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d22:	b085      	sub	sp, #20
    2d24:	1c05      	adds	r5, r0, #0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
    2d26:	a802      	add	r0, sp, #8
    2d28:	492e      	ldr	r1, [pc, #184]	; (2de4 <ble_pair_key_request_handler+0xc4>)
    2d2a:	2206      	movs	r2, #6
    2d2c:	4e2e      	ldr	r6, [pc, #184]	; (2de8 <ble_pair_key_request_handler+0xc8>)
    2d2e:	47b0      	blx	r6
	uint8_t idx = 0;
    uint8_t pin = 0;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
    2d30:	ac01      	add	r4, sp, #4
    2d32:	1c20      	adds	r0, r4, #0
    2d34:	1c29      	adds	r1, r5, #0
    2d36:	2204      	movs	r2, #4
    2d38:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
    2d3a:	78e3      	ldrb	r3, [r4, #3]
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d11e      	bne.n	2d7e <ble_pair_key_request_handler+0x5e>
	  DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
    2d40:	4f2a      	ldr	r7, [pc, #168]	; (2dec <ble_pair_key_request_handler+0xcc>)
    2d42:	1c38      	adds	r0, r7, #0
    2d44:	4e2a      	ldr	r6, [pc, #168]	; (2df0 <ble_pair_key_request_handler+0xd0>)
    2d46:	47b0      	blx	r6
    2d48:	482a      	ldr	r0, [pc, #168]	; (2df4 <ble_pair_key_request_handler+0xd4>)
    2d4a:	4c2b      	ldr	r4, [pc, #172]	; (2df8 <ble_pair_key_request_handler+0xd8>)
    2d4c:	47a0      	blx	r4
	  for (idx = 0; idx < 6;) {          
		//pin = getchar_timeout(PIN_TIMEOUT);
		if (!pin) {
			DBG_LOG("Pin Timeout");
    2d4e:	1c38      	adds	r0, r7, #0
    2d50:	47b0      	blx	r6
    2d52:	482a      	ldr	r0, [pc, #168]	; (2dfc <ble_pair_key_request_handler+0xdc>)
    2d54:	47a0      	blx	r4
			DBG_LOG("Disconnecting ...");
    2d56:	1c38      	adds	r0, r7, #0
    2d58:	47b0      	blx	r6
    2d5a:	4829      	ldr	r0, [pc, #164]	; (2e00 <ble_pair_key_request_handler+0xe0>)
    2d5c:	47a0      	blx	r4
			if (!(at_ble_disconnect(pair_key->handle,
    2d5e:	8828      	ldrh	r0, [r5, #0]
    2d60:	2113      	movs	r1, #19
    2d62:	4b28      	ldr	r3, [pc, #160]	; (2e04 <ble_pair_key_request_handler+0xe4>)
    2d64:	4798      	blx	r3
    2d66:	1c03      	adds	r3, r0, #0
						AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
				DBG_LOG("Disconnect Request Failed");
			}
			return AT_BLE_FAILURE;
    2d68:	20e2      	movs	r0, #226	; 0xe2
	  for (idx = 0; idx < 6;) {          
		//pin = getchar_timeout(PIN_TIMEOUT);
		if (!pin) {
			DBG_LOG("Pin Timeout");
			DBG_LOG("Disconnecting ...");
			if (!(at_ble_disconnect(pair_key->handle,
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d037      	beq.n	2dde <ble_pair_key_request_handler+0xbe>
						AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
				DBG_LOG("Disconnect Request Failed");
    2d6e:	481f      	ldr	r0, [pc, #124]	; (2dec <ble_pair_key_request_handler+0xcc>)
    2d70:	4b1f      	ldr	r3, [pc, #124]	; (2df0 <ble_pair_key_request_handler+0xd0>)
    2d72:	4798      	blx	r3
    2d74:	4824      	ldr	r0, [pc, #144]	; (2e08 <ble_pair_key_request_handler+0xe8>)
    2d76:	4b20      	ldr	r3, [pc, #128]	; (2df8 <ble_pair_key_request_handler+0xd8>)
    2d78:	4798      	blx	r3
			}
			return AT_BLE_FAILURE;
    2d7a:	20e2      	movs	r0, #226	; 0xe2
    2d7c:	e02f      	b.n	2dde <ble_pair_key_request_handler+0xbe>
		} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
    2d7e:	ab01      	add	r3, sp, #4
    2d80:	885a      	ldrh	r2, [r3, #2]
    2d82:	2380      	movs	r3, #128	; 0x80
    2d84:	005b      	lsls	r3, r3, #1
    2d86:	429a      	cmp	r2, r3
    2d88:	d11d      	bne.n	2dc6 <ble_pair_key_request_handler+0xa6>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
    2d8a:	4818      	ldr	r0, [pc, #96]	; (2dec <ble_pair_key_request_handler+0xcc>)
    2d8c:	4b18      	ldr	r3, [pc, #96]	; (2df0 <ble_pair_key_request_handler+0xd0>)
    2d8e:	4798      	blx	r3
    2d90:	481e      	ldr	r0, [pc, #120]	; (2e0c <ble_pair_key_request_handler+0xec>)
    2d92:	4b19      	ldr	r3, [pc, #100]	; (2df8 <ble_pair_key_request_handler+0xd8>)
    2d94:	4798      	blx	r3
    2d96:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
    2d98:	4e1d      	ldr	r6, [pc, #116]	; (2e10 <ble_pair_key_request_handler+0xf0>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
    2d9a:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
    2d9c:	5ce0      	ldrb	r0, [r4, r3]
    2d9e:	47b0      	blx	r6
    2da0:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
    2da2:	2c06      	cmp	r4, #6
    2da4:	d1f9      	bne.n	2d9a <ble_pair_key_request_handler+0x7a>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
    2da6:	8828      	ldrh	r0, [r5, #0]
    2da8:	ab01      	add	r3, sp, #4
    2daa:	7899      	ldrb	r1, [r3, #2]
    2dac:	aa02      	add	r2, sp, #8
    2dae:	4b19      	ldr	r3, [pc, #100]	; (2e14 <ble_pair_key_request_handler+0xf4>)
    2db0:	4798      	blx	r3
    2db2:	2800      	cmp	r0, #0
    2db4:	d013      	beq.n	2dde <ble_pair_key_request_handler+0xbe>
          {
                  DBG_LOG("Pair-key reply failed");
    2db6:	480d      	ldr	r0, [pc, #52]	; (2dec <ble_pair_key_request_handler+0xcc>)
    2db8:	4b0d      	ldr	r3, [pc, #52]	; (2df0 <ble_pair_key_request_handler+0xd0>)
    2dba:	4798      	blx	r3
    2dbc:	4816      	ldr	r0, [pc, #88]	; (2e18 <ble_pair_key_request_handler+0xf8>)
    2dbe:	4b0e      	ldr	r3, [pc, #56]	; (2df8 <ble_pair_key_request_handler+0xd8>)
    2dc0:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
    2dc2:	2000      	movs	r0, #0
    2dc4:	e00b      	b.n	2dde <ble_pair_key_request_handler+0xbe>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
    2dc6:	ab01      	add	r3, sp, #4
    2dc8:	789b      	ldrb	r3, [r3, #2]
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
    2dca:	2000      	movs	r0, #0
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
    2dcc:	2b01      	cmp	r3, #1
    2dce:	d106      	bne.n	2dde <ble_pair_key_request_handler+0xbe>
		{
			DBG_LOG("OOB Feature Not supported");
    2dd0:	4806      	ldr	r0, [pc, #24]	; (2dec <ble_pair_key_request_handler+0xcc>)
    2dd2:	4b07      	ldr	r3, [pc, #28]	; (2df0 <ble_pair_key_request_handler+0xd0>)
    2dd4:	4798      	blx	r3
    2dd6:	4811      	ldr	r0, [pc, #68]	; (2e1c <ble_pair_key_request_handler+0xfc>)
    2dd8:	4b07      	ldr	r3, [pc, #28]	; (2df8 <ble_pair_key_request_handler+0xd8>)
    2dda:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
    2ddc:	2000      	movs	r0, #0
}
    2dde:	b005      	add	sp, #20
    2de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2de2:	46c0      	nop			; (mov r8, r8)
    2de4:	00008d40 	.word	0x00008d40
    2de8:	000074b7 	.word	0x000074b7
    2dec:	00008708 	.word	0x00008708
    2df0:	000075f9 	.word	0x000075f9
    2df4:	00009000 	.word	0x00009000
    2df8:	000074d9 	.word	0x000074d9
    2dfc:	00009028 	.word	0x00009028
    2e00:	00009034 	.word	0x00009034
    2e04:	000046ad 	.word	0x000046ad
    2e08:	00008f1c 	.word	0x00008f1c
    2e0c:	00009048 	.word	0x00009048
    2e10:	0000750d 	.word	0x0000750d
    2e14:	00005409 	.word	0x00005409
    2e18:	00009080 	.word	0x00009080
    2e1c:	00009098 	.word	0x00009098

00002e20 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
    2e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e22:	1c06      	adds	r6, r0, #0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
    2e24:	8801      	ldrh	r1, [r0, #0]
    2e26:	4b30      	ldr	r3, [pc, #192]	; (2ee8 <ble_encryption_request_handler+0xc8>)
    2e28:	2400      	movs	r4, #0
    2e2a:	b2e5      	uxtb	r5, r4
    2e2c:	891a      	ldrh	r2, [r3, #8]
    2e2e:	428a      	cmp	r2, r1
    2e30:	d116      	bne.n	2e60 <ble_encryption_request_handler+0x40>
    2e32:	1c1a      	adds	r2, r3, #0
    2e34:	325e      	adds	r2, #94	; 0x5e
    2e36:	7812      	ldrb	r2, [r2, #0]
    2e38:	2a01      	cmp	r2, #1
    2e3a:	d911      	bls.n	2e60 <ble_encryption_request_handler+0x40>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
    2e3c:	492a      	ldr	r1, [pc, #168]	; (2ee8 <ble_encryption_request_handler+0xc8>)
    2e3e:	0162      	lsls	r2, r4, #5
    2e40:	1b12      	subs	r2, r2, r4
    2e42:	0092      	lsls	r2, r2, #2
    2e44:	188a      	adds	r2, r1, r2
    2e46:	3258      	adds	r2, #88	; 0x58
    2e48:	2306      	movs	r3, #6
    2e4a:	7193      	strb	r3, [r2, #6]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
    2e4c:	016b      	lsls	r3, r5, #5
    2e4e:	1b5b      	subs	r3, r3, r5
    2e50:	009b      	lsls	r3, r3, #2
    2e52:	18cb      	adds	r3, r1, r3
    2e54:	3370      	adds	r3, #112	; 0x70
    2e56:	881a      	ldrh	r2, [r3, #0]
    2e58:	8873      	ldrh	r3, [r6, #2]
    2e5a:	429a      	cmp	r2, r3
    2e5c:	d113      	bne.n	2e86 <ble_encryption_request_handler+0x66>
    2e5e:	e006      	b.n	2e6e <ble_encryption_request_handler+0x4e>
    2e60:	3501      	adds	r5, #1
    2e62:	b2ed      	uxtb	r5, r5
    2e64:	3401      	adds	r4, #1
    2e66:	337c      	adds	r3, #124	; 0x7c
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    2e68:	2c05      	cmp	r4, #5
    2e6a:	d1de      	bne.n	2e2a <ble_encryption_request_handler+0xa>
    2e6c:	e00b      	b.n	2e86 <ble_encryption_request_handler+0x66>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
    2e6e:	1d30      	adds	r0, r6, #4
    2e70:	0169      	lsls	r1, r5, #5
    2e72:	1b49      	subs	r1, r1, r5
    2e74:	0089      	lsls	r1, r1, #2
    2e76:	4b1c      	ldr	r3, [pc, #112]	; (2ee8 <ble_encryption_request_handler+0xc8>)
    2e78:	1859      	adds	r1, r3, r1
    2e7a:	3172      	adds	r1, #114	; 0x72
    2e7c:	2208      	movs	r2, #8
    2e7e:	4b1b      	ldr	r3, [pc, #108]	; (2eec <ble_encryption_request_handler+0xcc>)
    2e80:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
    2e82:	2800      	cmp	r0, #0
    2e84:	d015      	beq.n	2eb2 <ble_encryption_request_handler+0x92>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
    2e86:	4f1a      	ldr	r7, [pc, #104]	; (2ef0 <ble_encryption_request_handler+0xd0>)
    2e88:	1c38      	adds	r0, r7, #0
    2e8a:	4e1a      	ldr	r6, [pc, #104]	; (2ef4 <ble_encryption_request_handler+0xd4>)
    2e8c:	47b0      	blx	r6
    2e8e:	481a      	ldr	r0, [pc, #104]	; (2ef8 <ble_encryption_request_handler+0xd8>)
    2e90:	4c1a      	ldr	r4, [pc, #104]	; (2efc <ble_encryption_request_handler+0xdc>)
    2e92:	47a0      	blx	r4
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
    2e94:	1c38      	adds	r0, r7, #0
    2e96:	47b0      	blx	r6
    2e98:	4819      	ldr	r0, [pc, #100]	; (2f00 <ble_encryption_request_handler+0xe0>)
    2e9a:	47a0      	blx	r4
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
    2e9c:	016b      	lsls	r3, r5, #5
    2e9e:	1b5d      	subs	r5, r3, r5
    2ea0:	00ad      	lsls	r5, r5, #2
    2ea2:	4b11      	ldr	r3, [pc, #68]	; (2ee8 <ble_encryption_request_handler+0xc8>)
    2ea4:	195d      	adds	r5, r3, r5
    2ea6:	8928      	ldrh	r0, [r5, #8]
    2ea8:	2105      	movs	r1, #5
    2eaa:	4b16      	ldr	r3, [pc, #88]	; (2f04 <ble_encryption_request_handler+0xe4>)
    2eac:	4798      	blx	r3
		return AT_BLE_FAILURE;
    2eae:	20e2      	movs	r0, #226	; 0xe2
    2eb0:	e018      	b.n	2ee4 <ble_encryption_request_handler+0xc4>
    2eb2:	23ff      	movs	r3, #255	; 0xff
    2eb4:	401c      	ands	r4, r3
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
    2eb6:	8830      	ldrh	r0, [r6, #0]
    2eb8:	4b0b      	ldr	r3, [pc, #44]	; (2ee8 <ble_encryption_request_handler+0xc8>)
    2eba:	0162      	lsls	r2, r4, #5
    2ebc:	1b11      	subs	r1, r2, r4
    2ebe:	0089      	lsls	r1, r1, #2
    2ec0:	1859      	adds	r1, r3, r1
    2ec2:	7d09      	ldrb	r1, [r1, #20]
    2ec4:	1b14      	subs	r4, r2, r4
    2ec6:	00a4      	lsls	r4, r4, #2
    2ec8:	3460      	adds	r4, #96	; 0x60
    2eca:	18e3      	adds	r3, r4, r3
    2ecc:	2201      	movs	r2, #1
    2ece:	4c0e      	ldr	r4, [pc, #56]	; (2f08 <ble_encryption_request_handler+0xe8>)
    2ed0:	47a0      	blx	r4
    2ed2:	2800      	cmp	r0, #0
    2ed4:	d006      	beq.n	2ee4 <ble_encryption_request_handler+0xc4>
	{
		DBG_LOG("Encryption Request Reply Failed");
    2ed6:	4806      	ldr	r0, [pc, #24]	; (2ef0 <ble_encryption_request_handler+0xd0>)
    2ed8:	4b06      	ldr	r3, [pc, #24]	; (2ef4 <ble_encryption_request_handler+0xd4>)
    2eda:	4798      	blx	r3
    2edc:	480b      	ldr	r0, [pc, #44]	; (2f0c <ble_encryption_request_handler+0xec>)
    2ede:	4b07      	ldr	r3, [pc, #28]	; (2efc <ble_encryption_request_handler+0xdc>)
    2ee0:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
    2ee2:	2000      	movs	r0, #0
}
    2ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	20001060 	.word	0x20001060
    2eec:	00007499 	.word	0x00007499
    2ef0:	00008708 	.word	0x00008708
    2ef4:	000075f9 	.word	0x000075f9
    2ef8:	000090b4 	.word	0x000090b4
    2efc:	000074d9 	.word	0x000074d9
    2f00:	000090ec 	.word	0x000090ec
    2f04:	000046ad 	.word	0x000046ad
    2f08:	000055f9 	.word	0x000055f9
    2f0c:	00009144 	.word	0x00009144

00002f10 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
    2f10:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
    2f12:	2a00      	cmp	r2, #0
    2f14:	d047      	beq.n	2fa6 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
    2f16:	2906      	cmp	r1, #6
    2f18:	d847      	bhi.n	2faa <ble_mgr_events_callback_handler+0x9a>
    2f1a:	0089      	lsls	r1, r1, #2
    2f1c:	4b28      	ldr	r3, [pc, #160]	; (2fc0 <ble_mgr_events_callback_handler+0xb0>)
    2f1e:	585b      	ldr	r3, [r3, r1]
    2f20:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
    2f22:	4b28      	ldr	r3, [pc, #160]	; (2fc4 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
    2f24:	2405      	movs	r4, #5
    2f26:	e00a      	b.n	2f3e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
    2f28:	4b27      	ldr	r3, [pc, #156]	; (2fc8 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
    2f2a:	2401      	movs	r4, #1
			}
			break;
    2f2c:	e007      	b.n	2f3e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
    2f2e:	4b27      	ldr	r3, [pc, #156]	; (2fcc <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
    2f30:	2405      	movs	r4, #5
			}
			break;
    2f32:	e004      	b.n	2f3e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
    2f34:	4b26      	ldr	r3, [pc, #152]	; (2fd0 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
    2f36:	2401      	movs	r4, #1
			}
			break;
    2f38:	e001      	b.n	2f3e <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
    2f3a:	4b26      	ldr	r3, [pc, #152]	; (2fd4 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
    2f3c:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
    2f3e:	2800      	cmp	r0, #0
    2f40:	d116      	bne.n	2f70 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
    2f42:	6819      	ldr	r1, [r3, #0]
    2f44:	2900      	cmp	r1, #0
    2f46:	d10b      	bne.n	2f60 <ble_mgr_events_callback_handler+0x50>
    2f48:	e006      	b.n	2f58 <ble_mgr_events_callback_handler+0x48>
    2f4a:	1c1d      	adds	r5, r3, #0
    2f4c:	3304      	adds	r3, #4
    2f4e:	1f18      	subs	r0, r3, #4
    2f50:	6800      	ldr	r0, [r0, #0]
    2f52:	2800      	cmp	r0, #0
    2f54:	d106      	bne.n	2f64 <ble_mgr_events_callback_handler+0x54>
    2f56:	e000      	b.n	2f5a <ble_mgr_events_callback_handler+0x4a>
    2f58:	1c1d      	adds	r5, r3, #0
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
    2f5a:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
    2f5c:	2101      	movs	r1, #1
						break;
    2f5e:	e02c      	b.n	2fba <ble_mgr_events_callback_handler+0xaa>
    2f60:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
    2f62:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
    2f64:	3101      	adds	r1, #1
    2f66:	b2c9      	uxtb	r1, r1
    2f68:	42a1      	cmp	r1, r4
    2f6a:	d3ee      	bcc.n	2f4a <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
    2f6c:	2100      	movs	r1, #0
    2f6e:	e024      	b.n	2fba <ble_mgr_events_callback_handler+0xaa>
    2f70:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
    2f72:	2801      	cmp	r0, #1
    2f74:	d121      	bne.n	2fba <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
    2f76:	6819      	ldr	r1, [r3, #0]
    2f78:	4291      	cmp	r1, r2
    2f7a:	d10c      	bne.n	2f96 <ble_mgr_events_callback_handler+0x86>
    2f7c:	e006      	b.n	2f8c <ble_mgr_events_callback_handler+0x7c>
    2f7e:	1c1d      	adds	r5, r3, #0
    2f80:	3304      	adds	r3, #4
    2f82:	1f18      	subs	r0, r3, #4
    2f84:	6800      	ldr	r0, [r0, #0]
    2f86:	4290      	cmp	r0, r2
    2f88:	d107      	bne.n	2f9a <ble_mgr_events_callback_handler+0x8a>
    2f8a:	e000      	b.n	2f8e <ble_mgr_events_callback_handler+0x7e>
    2f8c:	1c1d      	adds	r5, r3, #0
					{
						ble_event_cb_ptr[idx] = NULL;
    2f8e:	2300      	movs	r3, #0
    2f90:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
    2f92:	2101      	movs	r1, #1
						break;
    2f94:	e011      	b.n	2fba <ble_mgr_events_callback_handler+0xaa>
    2f96:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
    2f98:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
    2f9a:	3101      	adds	r1, #1
    2f9c:	b2c9      	uxtb	r1, r1
    2f9e:	42a1      	cmp	r1, r4
    2fa0:	d3ed      	bcc.n	2f7e <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
    2fa2:	2100      	movs	r1, #0
    2fa4:	e009      	b.n	2fba <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
    2fa6:	2100      	movs	r1, #0
    2fa8:	e007      	b.n	2fba <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
    2faa:	2100      	movs	r1, #0
    2fac:	e005      	b.n	2fba <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
    2fae:	4b0a      	ldr	r3, [pc, #40]	; (2fd8 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
    2fb0:	2405      	movs	r4, #5
    2fb2:	e7c4      	b.n	2f3e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
    2fb4:	4b09      	ldr	r3, [pc, #36]	; (2fdc <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
    2fb6:	2401      	movs	r4, #1
    2fb8:	e7c1      	b.n	2f3e <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
    2fba:	1c08      	adds	r0, r1, #0
    2fbc:	bd30      	pop	{r4, r5, pc}
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	00008c38 	.word	0x00008c38
    2fc4:	2000104c 	.word	0x2000104c
    2fc8:	20001048 	.word	0x20001048
    2fcc:	200012d0 	.word	0x200012d0
    2fd0:	20001898 	.word	0x20001898
    2fd4:	200012e4 	.word	0x200012e4
    2fd8:	200012f8 	.word	0x200012f8
    2fdc:	20001354 	.word	0x20001354

00002fe0 <ble_device_init>:

at_ble_init_config_t pf_cfg;

/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
    2fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fe2:	4647      	mov	r7, r8
    2fe4:	b480      	push	{r7}
    2fe6:	b090      	sub	sp, #64	; 0x40
    2fe8:	1c05      	adds	r5, r0, #0
	char *dev_name = NULL;

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
    2fea:	4a6c      	ldr	r2, [pc, #432]	; (319c <ble_device_init+0x1bc>)
    2fec:	2300      	movs	r3, #0
    2fee:	6013      	str	r3, [r2, #0]
    2ff0:	6053      	str	r3, [r2, #4]
    2ff2:	6093      	str	r3, [r2, #8]
    2ff4:	60d3      	str	r3, [r2, #12]
    2ff6:	6113      	str	r3, [r2, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
    2ff8:	4a69      	ldr	r2, [pc, #420]	; (31a0 <ble_device_init+0x1c0>)
    2ffa:	6013      	str	r3, [r2, #0]
    2ffc:	6053      	str	r3, [r2, #4]
    2ffe:	6093      	str	r3, [r2, #8]
    3000:	60d3      	str	r3, [r2, #12]
    3002:	6113      	str	r3, [r2, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
    3004:	4a67      	ldr	r2, [pc, #412]	; (31a4 <ble_device_init+0x1c4>)
    3006:	6013      	str	r3, [r2, #0]
    3008:	6053      	str	r3, [r2, #4]
    300a:	6093      	str	r3, [r2, #8]
    300c:	60d3      	str	r3, [r2, #12]
    300e:	6113      	str	r3, [r2, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
    3010:	4a65      	ldr	r2, [pc, #404]	; (31a8 <ble_device_init+0x1c8>)
    3012:	6013      	str	r3, [r2, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
    3014:	4a65      	ldr	r2, [pc, #404]	; (31ac <ble_device_init+0x1cc>)
    3016:	6013      	str	r3, [r2, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
    3018:	4a65      	ldr	r2, [pc, #404]	; (31b0 <ble_device_init+0x1d0>)
    301a:	6013      	str	r3, [r2, #0]
    301c:	6053      	str	r3, [r2, #4]
    301e:	6093      	str	r3, [r2, #8]
    3020:	60d3      	str	r3, [r2, #12]
    3022:	6113      	str	r3, [r2, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
    3024:	4a63      	ldr	r2, [pc, #396]	; (31b4 <ble_device_init+0x1d4>)
    3026:	6013      	str	r3, [r2, #0]
    3028:	4c63      	ldr	r4, [pc, #396]	; (31b8 <ble_device_init+0x1d8>)
    302a:	239b      	movs	r3, #155	; 0x9b
    302c:	009b      	lsls	r3, r3, #2
    302e:	4698      	mov	r8, r3
    3030:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
    3032:	4f62      	ldr	r7, [pc, #392]	; (31bc <ble_device_init+0x1dc>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    3034:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
    3036:	1c20      	adds	r0, r4, #0
    3038:	2100      	movs	r1, #0
    303a:	227c      	movs	r2, #124	; 0x7c
    303c:	47b8      	blx	r7
    303e:	1c23      	adds	r3, r4, #0
    3040:	335e      	adds	r3, #94	; 0x5e
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
    3042:	2200      	movs	r2, #0
    3044:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    3046:	7626      	strb	r6, [r4, #24]
    3048:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    304a:	4544      	cmp	r4, r8
    304c:	d1f3      	bne.n	3036 <ble_device_init+0x56>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
    304e:	4b5c      	ldr	r3, [pc, #368]	; (31c0 <ble_device_init+0x1e0>)
    3050:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
    3052:	4c5c      	ldr	r4, [pc, #368]	; (31c4 <ble_device_init+0x1e4>)
    3054:	4b5c      	ldr	r3, [pc, #368]	; (31c8 <ble_device_init+0x1e8>)
    3056:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)&att_db_data;
    3058:	4b5c      	ldr	r3, [pc, #368]	; (31cc <ble_device_init+0x1ec>)
    305a:	3304      	adds	r3, #4
    305c:	6023      	str	r3, [r4, #0]
#else
	pf_cfg.memPool.memSize = 0;
	pf_cfg.memPool.memStartAdd = NULL;
#endif
	/*Bus configuration*/
	pf_cfg.bus_info.bus_type = AT_BLE_UART;
    305e:	2301      	movs	r3, #1
    3060:	322c      	adds	r2, #44	; 0x2c
    3062:	54a3      	strb	r3, [r4, r2]

#if UART_FLOWCONTROL_6WIRE_MODE == true
	/* Enable Hardware Flow-control on BTLC1000 */
   pf_cfg.bus_info.bus_flow_control_enabled = true; // enable flow control
    3064:	3201      	adds	r2, #1
    3066:	54a3      	strb	r3, [r4, r2]
	/* Disable Hardware Flow-control on BTLC1000 */
   pf_cfg.bus_info.bus_flow_control_enabled = false; // Disable flow control
#endif

	/* Register Platform callback API's */
	pf_cfg.platform_api_list.at_ble_create_timer = platform_create_timer;
    3068:	4b59      	ldr	r3, [pc, #356]	; (31d0 <ble_device_init+0x1f0>)
    306a:	60a3      	str	r3, [r4, #8]
	pf_cfg.platform_api_list.at_ble_delete_timer = platform_delete_timer;
    306c:	4b59      	ldr	r3, [pc, #356]	; (31d4 <ble_device_init+0x1f4>)
    306e:	60e3      	str	r3, [r4, #12]
	pf_cfg.platform_api_list.at_ble_start_timer = platform_start_timer;
    3070:	4b59      	ldr	r3, [pc, #356]	; (31d8 <ble_device_init+0x1f8>)
    3072:	6123      	str	r3, [r4, #16]
	pf_cfg.platform_api_list.at_ble_stop_timer = platform_stop_timer;
    3074:	4b59      	ldr	r3, [pc, #356]	; (31dc <ble_device_init+0x1fc>)
    3076:	6163      	str	r3, [r4, #20]
	pf_cfg.platform_api_list.at_ble_sleep = platform_sleep;
    3078:	4b59      	ldr	r3, [pc, #356]	; (31e0 <ble_device_init+0x200>)
    307a:	61a3      	str	r3, [r4, #24]
	pf_cfg.platform_api_list.at_ble_gpio_set = platform_gpio_set;
    307c:	4b59      	ldr	r3, [pc, #356]	; (31e4 <ble_device_init+0x204>)
    307e:	61e3      	str	r3, [r4, #28]
	pf_cfg.platform_api_list.at_ble_send_sync = platform_send_sync;
    3080:	4b59      	ldr	r3, [pc, #356]	; (31e8 <ble_device_init+0x208>)
    3082:	6223      	str	r3, [r4, #32]
	pf_cfg.platform_api_list.at_ble_recv_async = platform_recv_async;
    3084:	4b59      	ldr	r3, [pc, #356]	; (31ec <ble_device_init+0x20c>)
    3086:	6263      	str	r3, [r4, #36]	; 0x24
	pf_cfg.platform_api_list.at_ble_reconfigure_usart = platform_configure_hw_fc_uart;
    3088:	4b59      	ldr	r3, [pc, #356]	; (31f0 <ble_device_init+0x210>)
    308a:	62a3      	str	r3, [r4, #40]	; 0x28
	
	platform_init(pf_cfg.bus_info.bus_type, pf_cfg.bus_info.bus_flow_control_enabled);
    308c:	2001      	movs	r0, #1
    308e:	2101      	movs	r1, #1
    3090:	4b58      	ldr	r3, [pc, #352]	; (31f4 <ble_device_init+0x214>)
    3092:	4798      	blx	r3

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing BTLC1000");
    3094:	4858      	ldr	r0, [pc, #352]	; (31f8 <ble_device_init+0x218>)
    3096:	4b59      	ldr	r3, [pc, #356]	; (31fc <ble_device_init+0x21c>)
    3098:	4798      	blx	r3
    309a:	4859      	ldr	r0, [pc, #356]	; (3200 <ble_device_init+0x220>)
    309c:	4b59      	ldr	r3, [pc, #356]	; (3204 <ble_device_init+0x224>)
    309e:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
    30a0:	1c20      	adds	r0, r4, #0
    30a2:	4b59      	ldr	r3, [pc, #356]	; (3208 <ble_device_init+0x228>)
    30a4:	4798      	blx	r3
    30a6:	2800      	cmp	r0, #0
    30a8:	d00b      	beq.n	30c2 <ble_device_init+0xe2>
	{
		DBG_LOG("BTLC1000 Initialization failed");
    30aa:	4e53      	ldr	r6, [pc, #332]	; (31f8 <ble_device_init+0x218>)
    30ac:	1c30      	adds	r0, r6, #0
    30ae:	4d53      	ldr	r5, [pc, #332]	; (31fc <ble_device_init+0x21c>)
    30b0:	47a8      	blx	r5
    30b2:	4856      	ldr	r0, [pc, #344]	; (320c <ble_device_init+0x22c>)
    30b4:	4c53      	ldr	r4, [pc, #332]	; (3204 <ble_device_init+0x224>)
    30b6:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
    30b8:	1c30      	adds	r0, r6, #0
    30ba:	47a8      	blx	r5
    30bc:	4854      	ldr	r0, [pc, #336]	; (3210 <ble_device_init+0x230>)
    30be:	47a0      	blx	r4
    30c0:	e7fe      	b.n	30c0 <ble_device_init+0xe0>
	platform_init(pf_cfg.bus_info.bus_type, pf_cfg.bus_info.bus_flow_control_enabled);
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
    30c2:	4c54      	ldr	r4, [pc, #336]	; (3214 <ble_device_init+0x234>)
    30c4:	2000      	movs	r0, #0
    30c6:	2100      	movs	r1, #0
    30c8:	1c22      	adds	r2, r4, #0
    30ca:	4e53      	ldr	r6, [pc, #332]	; (3218 <ble_device_init+0x238>)
    30cc:	47b0      	blx	r6
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
    30ce:	1c22      	adds	r2, r4, #0
    30d0:	324c      	adds	r2, #76	; 0x4c
    30d2:	2000      	movs	r0, #0
    30d4:	2102      	movs	r1, #2
    30d6:	47b0      	blx	r6
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
    30d8:	4850      	ldr	r0, [pc, #320]	; (321c <ble_device_init+0x23c>)
    30da:	2107      	movs	r1, #7
    30dc:	4b50      	ldr	r3, [pc, #320]	; (3220 <ble_device_init+0x240>)
    30de:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
    30e0:	2800      	cmp	r0, #0
    30e2:	d005      	beq.n	30f0 <ble_device_init+0x110>
	{
		DBG_LOG("Device name set failed");
    30e4:	4844      	ldr	r0, [pc, #272]	; (31f8 <ble_device_init+0x218>)
    30e6:	4b45      	ldr	r3, [pc, #276]	; (31fc <ble_device_init+0x21c>)
    30e8:	4798      	blx	r3
    30ea:	484e      	ldr	r0, [pc, #312]	; (3224 <ble_device_init+0x244>)
    30ec:	4b45      	ldr	r3, [pc, #276]	; (3204 <ble_device_init+0x224>)
    30ee:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
    30f0:	a804      	add	r0, sp, #16
    30f2:	494d      	ldr	r1, [pc, #308]	; (3228 <ble_device_init+0x248>)
    30f4:	3108      	adds	r1, #8
    30f6:	2207      	movs	r2, #7
    30f8:	4b4c      	ldr	r3, [pc, #304]	; (322c <ble_device_init+0x24c>)
    30fa:	4798      	blx	r3
	
	if (addr == NULL)
    30fc:	2d00      	cmp	r5, #0
    30fe:	d10c      	bne.n	311a <ble_device_init+0x13a>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
    3100:	a804      	add	r0, sp, #16
    3102:	4b4b      	ldr	r3, [pc, #300]	; (3230 <ble_device_init+0x250>)
    3104:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
    3106:	ad04      	add	r5, sp, #16
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
    3108:	2800      	cmp	r0, #0
    310a:	d006      	beq.n	311a <ble_device_init+0x13a>
		{
			DBG_LOG("BD address get failed");
    310c:	483a      	ldr	r0, [pc, #232]	; (31f8 <ble_device_init+0x218>)
    310e:	4b3b      	ldr	r3, [pc, #236]	; (31fc <ble_device_init+0x21c>)
    3110:	4798      	blx	r3
    3112:	4848      	ldr	r0, [pc, #288]	; (3234 <ble_device_init+0x254>)
    3114:	4b3b      	ldr	r3, [pc, #236]	; (3204 <ble_device_init+0x224>)
    3116:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
    3118:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
    311a:	4837      	ldr	r0, [pc, #220]	; (31f8 <ble_device_init+0x218>)
    311c:	4b37      	ldr	r3, [pc, #220]	; (31fc <ble_device_init+0x21c>)
    311e:	4798      	blx	r3
    3120:	79a9      	ldrb	r1, [r5, #6]
    3122:	796a      	ldrb	r2, [r5, #5]
    3124:	792b      	ldrb	r3, [r5, #4]
    3126:	78e8      	ldrb	r0, [r5, #3]
    3128:	9000      	str	r0, [sp, #0]
    312a:	78a8      	ldrb	r0, [r5, #2]
    312c:	9001      	str	r0, [sp, #4]
    312e:	7868      	ldrb	r0, [r5, #1]
    3130:	9002      	str	r0, [sp, #8]
    3132:	7828      	ldrb	r0, [r5, #0]
    3134:	9003      	str	r0, [sp, #12]
    3136:	4840      	ldr	r0, [pc, #256]	; (3238 <ble_device_init+0x258>)
    3138:	4c32      	ldr	r4, [pc, #200]	; (3204 <ble_device_init+0x224>)
    313a:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
    313c:	ac06      	add	r4, sp, #24
    313e:	230a      	movs	r3, #10
    3140:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
    3142:	4b3e      	ldr	r3, [pc, #248]	; (323c <ble_device_init+0x25c>)
    3144:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
    3146:	a807      	add	r0, sp, #28
    3148:	1c29      	adds	r1, r5, #0
    314a:	2207      	movs	r2, #7
    314c:	4b37      	ldr	r3, [pc, #220]	; (322c <ble_device_init+0x24c>)
    314e:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
    3150:	2300      	movs	r3, #0
    3152:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
    3154:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
    3156:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
    3158:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
    315a:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
    315c:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
    315e:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
    3160:	2380      	movs	r3, #128	; 0x80
    3162:	009b      	lsls	r3, r3, #2
    3164:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
    3166:	1c20      	adds	r0, r4, #0
    3168:	4b35      	ldr	r3, [pc, #212]	; (3240 <ble_device_init+0x260>)
    316a:	4798      	blx	r3
    316c:	2800      	cmp	r0, #0
    316e:	d005      	beq.n	317c <ble_device_init+0x19c>
	{
		DBG_LOG("Set BLE Device configuration failed");
    3170:	4821      	ldr	r0, [pc, #132]	; (31f8 <ble_device_init+0x218>)
    3172:	4b22      	ldr	r3, [pc, #136]	; (31fc <ble_device_init+0x21c>)
    3174:	4798      	blx	r3
    3176:	4833      	ldr	r0, [pc, #204]	; (3244 <ble_device_init+0x264>)
    3178:	4b22      	ldr	r3, [pc, #136]	; (3204 <ble_device_init+0x224>)
    317a:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
    317c:	1c28      	adds	r0, r5, #0
    317e:	4b32      	ldr	r3, [pc, #200]	; (3248 <ble_device_init+0x268>)
    3180:	4798      	blx	r3
    3182:	2800      	cmp	r0, #0
    3184:	d005      	beq.n	3192 <ble_device_init+0x1b2>
	{
		DBG_LOG("Set BLE Device Address failed");
    3186:	481c      	ldr	r0, [pc, #112]	; (31f8 <ble_device_init+0x218>)
    3188:	4b1c      	ldr	r3, [pc, #112]	; (31fc <ble_device_init+0x21c>)
    318a:	4798      	blx	r3
    318c:	482f      	ldr	r0, [pc, #188]	; (324c <ble_device_init+0x26c>)
    318e:	4b1d      	ldr	r3, [pc, #116]	; (3204 <ble_device_init+0x224>)
    3190:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
    3192:	b010      	add	sp, #64	; 0x40
    3194:	bc04      	pop	{r2}
    3196:	4690      	mov	r8, r2
    3198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    319a:	46c0      	nop			; (mov r8, r8)
    319c:	200012e4 	.word	0x200012e4
    31a0:	200012f8 	.word	0x200012f8
    31a4:	2000104c 	.word	0x2000104c
    31a8:	20001354 	.word	0x20001354
    31ac:	20001048 	.word	0x20001048
    31b0:	200012d0 	.word	0x200012d0
    31b4:	20001898 	.word	0x20001898
    31b8:	20001060 	.word	0x20001060
    31bc:	000074c9 	.word	0x000074c9
    31c0:	200012cc 	.word	0x200012cc
    31c4:	20001320 	.word	0x20001320
    31c8:	000004e2 	.word	0x000004e2
    31cc:	20000134 	.word	0x20000134
    31d0:	00003989 	.word	0x00003989
    31d4:	0000399d 	.word	0x0000399d
    31d8:	000039a9 	.word	0x000039a9
    31dc:	000039c9 	.word	0x000039c9
    31e0:	000039e5 	.word	0x000039e5
    31e4:	000038d9 	.word	0x000038d9
    31e8:	000038bd 	.word	0x000038bd
    31ec:	00003915 	.word	0x00003915
    31f0:	0000397d 	.word	0x0000397d
    31f4:	00003895 	.word	0x00003895
    31f8:	00008708 	.word	0x00008708
    31fc:	000075f9 	.word	0x000075f9
    3200:	00009164 	.word	0x00009164
    3204:	000074d9 	.word	0x000074d9
    3208:	00004311 	.word	0x00004311
    320c:	0000917c 	.word	0x0000917c
    3210:	0000919c 	.word	0x0000919c
    3214:	00008d50 	.word	0x00008d50
    3218:	00002f11 	.word	0x00002f11
    321c:	000091d8 	.word	0x000091d8
    3220:	0000418d 	.word	0x0000418d
    3224:	000091e0 	.word	0x000091e0
    3228:	00008d40 	.word	0x00008d40
    322c:	000074b7 	.word	0x000074b7
    3230:	000041e9 	.word	0x000041e9
    3234:	000091f8 	.word	0x000091f8
    3238:	00009210 	.word	0x00009210
    323c:	00003a98 	.word	0x00003a98
    3240:	0000420d 	.word	0x0000420d
    3244:	00009248 	.word	0x00009248
    3248:	00004479 	.word	0x00004479
    324c:	0000926c 	.word	0x0000926c

00003250 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
    3250:	b508      	push	{r3, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
    3252:	2101      	movs	r1, #1
    3254:	2201      	movs	r2, #1
    3256:	4b06      	ldr	r3, [pc, #24]	; (3270 <ble_send_slave_sec_request+0x20>)
    3258:	4798      	blx	r3
    325a:	2800      	cmp	r0, #0
    325c:	d006      	beq.n	326c <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
    325e:	4805      	ldr	r0, [pc, #20]	; (3274 <ble_send_slave_sec_request+0x24>)
    3260:	4b05      	ldr	r3, [pc, #20]	; (3278 <ble_send_slave_sec_request+0x28>)
    3262:	4798      	blx	r3
    3264:	4805      	ldr	r0, [pc, #20]	; (327c <ble_send_slave_sec_request+0x2c>)
    3266:	4b06      	ldr	r3, [pc, #24]	; (3280 <ble_send_slave_sec_request+0x30>)
    3268:	4798      	blx	r3
		}
	#endif
        ALL_UNUSED(conn_handle);
	return AT_BLE_FAILURE;
    326a:	20e2      	movs	r0, #226	; 0xe2
}
    326c:	bd08      	pop	{r3, pc}
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	000054b1 	.word	0x000054b1
    3274:	00008708 	.word	0x00008708
    3278:	000075f9 	.word	0x000075f9
    327c:	000092a8 	.word	0x000092a8
    3280:	000074d9 	.word	0x000074d9

00003284 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
    3284:	b5f0      	push	{r4, r5, r6, r7, lr}
    3286:	465f      	mov	r7, fp
    3288:	464e      	mov	r6, r9
    328a:	4645      	mov	r5, r8
    328c:	b4e0      	push	{r5, r6, r7}
    328e:	b09a      	sub	sp, #104	; 0x68
    3290:	1c05      	adds	r5, r0, #0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
    3292:	7a83      	ldrb	r3, [r0, #10]
    3294:	4699      	mov	r9, r3
    3296:	2b00      	cmp	r3, #0
    3298:	d000      	beq.n	329c <ble_connected_state_handler+0x18>
    329a:	e0d4      	b.n	3446 <ble_connected_state_handler+0x1c2>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
    329c:	4e75      	ldr	r6, [pc, #468]	; (3474 <ble_connected_state_handler+0x1f0>)
    329e:	1c30      	adds	r0, r6, #0
    32a0:	4f75      	ldr	r7, [pc, #468]	; (3478 <ble_connected_state_handler+0x1f4>)
    32a2:	47b8      	blx	r7
    32a4:	79a9      	ldrb	r1, [r5, #6]
    32a6:	796a      	ldrb	r2, [r5, #5]
    32a8:	792b      	ldrb	r3, [r5, #4]
    32aa:	78e8      	ldrb	r0, [r5, #3]
    32ac:	9000      	str	r0, [sp, #0]
    32ae:	78a8      	ldrb	r0, [r5, #2]
    32b0:	9001      	str	r0, [sp, #4]
    32b2:	7868      	ldrb	r0, [r5, #1]
    32b4:	9002      	str	r0, [sp, #8]
    32b6:	4871      	ldr	r0, [pc, #452]	; (347c <ble_connected_state_handler+0x1f8>)
    32b8:	4c71      	ldr	r4, [pc, #452]	; (3480 <ble_connected_state_handler+0x1fc>)
    32ba:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
    32bc:	1c30      	adds	r0, r6, #0
    32be:	47b8      	blx	r7
    32c0:	8929      	ldrh	r1, [r5, #8]
    32c2:	4870      	ldr	r0, [pc, #448]	; (3484 <ble_connected_state_handler+0x200>)
    32c4:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
    32c6:	4870      	ldr	r0, [pc, #448]	; (3488 <ble_connected_state_handler+0x204>)
    32c8:	1c29      	adds	r1, r5, #0
    32ca:	2212      	movs	r2, #18
    32cc:	4b6f      	ldr	r3, [pc, #444]	; (348c <ble_connected_state_handler+0x208>)
    32ce:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
    32d0:	9504      	str	r5, [sp, #16]
    32d2:	486f      	ldr	r0, [pc, #444]	; (3490 <ble_connected_state_handler+0x20c>)
    32d4:	3064      	adds	r0, #100	; 0x64
    32d6:	1c29      	adds	r1, r5, #0
    32d8:	2207      	movs	r2, #7
    32da:	4b6e      	ldr	r3, [pc, #440]	; (3494 <ble_connected_state_handler+0x210>)
    32dc:	4798      	blx	r3
    32de:	2800      	cmp	r0, #0
    32e0:	d002      	beq.n	32e8 <ble_connected_state_handler+0x64>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
    32e2:	782b      	ldrb	r3, [r5, #0]
    32e4:	2b02      	cmp	r3, #2
    32e6:	d004      	beq.n	32f2 <ble_connected_state_handler+0x6e>
    32e8:	4e6b      	ldr	r6, [pc, #428]	; (3498 <ble_connected_state_handler+0x214>)
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
						return AT_BLE_FAILURE;
    32ea:	2400      	movs	r4, #0
		
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
    32ec:	4b69      	ldr	r3, [pc, #420]	; (3494 <ble_connected_state_handler+0x210>)
    32ee:	469b      	mov	fp, r3
    32f0:	e02a      	b.n	3348 <ble_connected_state_handler+0xc4>
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
    32f2:	a806      	add	r0, sp, #24
    32f4:	2100      	movs	r1, #0
    32f6:	2250      	movs	r2, #80	; 0x50
    32f8:	4b68      	ldr	r3, [pc, #416]	; (349c <ble_connected_state_handler+0x218>)
    32fa:	4798      	blx	r3
    32fc:	4f68      	ldr	r7, [pc, #416]	; (34a0 <ble_connected_state_handler+0x21c>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
    32fe:	2300      	movs	r3, #0
    3300:	e00b      	b.n	331a <ble_connected_state_handler+0x96>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
    3302:	1c59      	adds	r1, r3, #1
    3304:	7814      	ldrb	r4, [r2, #0]
    3306:	a806      	add	r0, sp, #24
    3308:	54c4      	strb	r4, [r0, r3]
    330a:	3201      	adds	r2, #1
    330c:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
    330e:	42b3      	cmp	r3, r6
    3310:	d1f7      	bne.n	3302 <ble_connected_state_handler+0x7e>
    3312:	377c      	adds	r7, #124	; 0x7c
    3314:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
    3316:	2b50      	cmp	r3, #80	; 0x50
    3318:	d004      	beq.n	3324 <ble_connected_state_handler+0xa0>
    331a:	1c1e      	adds	r6, r3, #0
    331c:	3610      	adds	r6, #16
    331e:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
    3320:	1c3a      	adds	r2, r7, #0
    3322:	e7ee      	b.n	3302 <ble_connected_state_handler+0x7e>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
    3324:	2005      	movs	r0, #5
    3326:	1c29      	adds	r1, r5, #0
    3328:	aa06      	add	r2, sp, #24
    332a:	4b5e      	ldr	r3, [pc, #376]	; (34a4 <ble_connected_state_handler+0x220>)
    332c:	4798      	blx	r3
    332e:	4681      	mov	r9, r0
    3330:	2800      	cmp	r0, #0
    3332:	d100      	bne.n	3336 <ble_connected_state_handler+0xb2>
    3334:	e096      	b.n	3464 <ble_connected_state_handler+0x1e0>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
    3336:	484f      	ldr	r0, [pc, #316]	; (3474 <ble_connected_state_handler+0x1f0>)
    3338:	4b4f      	ldr	r3, [pc, #316]	; (3478 <ble_connected_state_handler+0x1f4>)
    333a:	4798      	blx	r3
    333c:	485a      	ldr	r0, [pc, #360]	; (34a8 <ble_connected_state_handler+0x224>)
    333e:	4b50      	ldr	r3, [pc, #320]	; (3480 <ble_connected_state_handler+0x1fc>)
    3340:	4798      	blx	r3
						return AT_BLE_FAILURE;
    3342:	23e2      	movs	r3, #226	; 0xe2
    3344:	4699      	mov	r9, r3
    3346:	e08d      	b.n	3464 <ble_connected_state_handler+0x1e0>
    3348:	b2e7      	uxtb	r7, r4
		
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
    334a:	9405      	str	r4, [sp, #20]
    334c:	1c30      	adds	r0, r6, #0
    334e:	9904      	ldr	r1, [sp, #16]
    3350:	2207      	movs	r2, #7
    3352:	47d8      	blx	fp
    3354:	2800      	cmp	r0, #0
    3356:	d109      	bne.n	336c <ble_connected_state_handler+0xe8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    3358:	9a05      	ldr	r2, [sp, #20]
    335a:	0153      	lsls	r3, r2, #5
    335c:	1a9b      	subs	r3, r3, r2
    335e:	009a      	lsls	r2, r3, #2
    3360:	4b4d      	ldr	r3, [pc, #308]	; (3498 <ble_connected_state_handler+0x214>)
    3362:	189b      	adds	r3, r3, r2
    3364:	3358      	adds	r3, #88	; 0x58
    3366:	2202      	movs	r2, #2
    3368:	719a      	strb	r2, [r3, #6]
    336a:	e041      	b.n	33f0 <ble_connected_state_handler+0x16c>
    336c:	3401      	adds	r4, #1
    336e:	367c      	adds	r6, #124	; 0x7c
		}
			
		
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    3370:	2c05      	cmp	r4, #5
    3372:	d1e9      	bne.n	3348 <ble_connected_state_handler+0xc4>
    3374:	e071      	b.n	345a <ble_connected_state_handler+0x1d6>
					at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
					return AT_BLE_FAILURE;
				}
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    3376:	235e      	movs	r3, #94	; 0x5e
    3378:	4a47      	ldr	r2, [pc, #284]	; (3498 <ble_connected_state_handler+0x214>)
    337a:	5cd3      	ldrb	r3, [r2, r3]
    337c:	2b00      	cmp	r3, #0
    337e:	d110      	bne.n	33a2 <ble_connected_state_handler+0x11e>
    3380:	e017      	b.n	33b2 <ble_connected_state_handler+0x12e>
			
			if (!conn_exists)
			{
				if (ble_device_count == BLE_MAX_DEVICE_CONNECTED)
				{
					DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
    3382:	483c      	ldr	r0, [pc, #240]	; (3474 <ble_connected_state_handler+0x1f0>)
    3384:	4b3c      	ldr	r3, [pc, #240]	; (3478 <ble_connected_state_handler+0x1f4>)
    3386:	4798      	blx	r3
    3388:	4b48      	ldr	r3, [pc, #288]	; (34ac <ble_connected_state_handler+0x228>)
    338a:	7819      	ldrb	r1, [r3, #0]
    338c:	b2c9      	uxtb	r1, r1
    338e:	4848      	ldr	r0, [pc, #288]	; (34b0 <ble_connected_state_handler+0x22c>)
    3390:	4b3b      	ldr	r3, [pc, #236]	; (3480 <ble_connected_state_handler+0x1fc>)
    3392:	4798      	blx	r3
					at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
    3394:	8928      	ldrh	r0, [r5, #8]
    3396:	2113      	movs	r1, #19
    3398:	4b46      	ldr	r3, [pc, #280]	; (34b4 <ble_connected_state_handler+0x230>)
    339a:	4798      	blx	r3
					return AT_BLE_FAILURE;
    339c:	23e2      	movs	r3, #226	; 0xe2
    339e:	4699      	mov	r9, r3
    33a0:	e060      	b.n	3464 <ble_connected_state_handler+0x1e0>
    33a2:	4a45      	ldr	r2, [pc, #276]	; (34b8 <ble_connected_state_handler+0x234>)
				}
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    33a4:	2301      	movs	r3, #1
    33a6:	b2df      	uxtb	r7, r3
    33a8:	1c1c      	adds	r4, r3, #0
    33aa:	7811      	ldrb	r1, [r2, #0]
    33ac:	2900      	cmp	r1, #0
    33ae:	d119      	bne.n	33e4 <ble_connected_state_handler+0x160>
    33b0:	e001      	b.n	33b6 <ble_connected_state_handler+0x132>
    33b2:	2400      	movs	r4, #0
    33b4:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
    33b6:	0163      	lsls	r3, r4, #5
    33b8:	4698      	mov	r8, r3
    33ba:	1b18      	subs	r0, r3, r4
    33bc:	0080      	lsls	r0, r0, #2
    33be:	4e36      	ldr	r6, [pc, #216]	; (3498 <ble_connected_state_handler+0x214>)
    33c0:	1980      	adds	r0, r0, r6
    33c2:	1c29      	adds	r1, r5, #0
    33c4:	2212      	movs	r2, #18
    33c6:	4b31      	ldr	r3, [pc, #196]	; (348c <ble_connected_state_handler+0x208>)
    33c8:	4798      	blx	r3
						ble_device_count++;
    33ca:	4a38      	ldr	r2, [pc, #224]	; (34ac <ble_connected_state_handler+0x228>)
    33cc:	7813      	ldrb	r3, [r2, #0]
    33ce:	3301      	adds	r3, #1
    33d0:	b2db      	uxtb	r3, r3
    33d2:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    33d4:	4643      	mov	r3, r8
    33d6:	1b1b      	subs	r3, r3, r4
    33d8:	009b      	lsls	r3, r3, #2
    33da:	18f3      	adds	r3, r6, r3
    33dc:	3358      	adds	r3, #88	; 0x58
    33de:	2202      	movs	r2, #2
    33e0:	719a      	strb	r2, [r3, #6]
						break;
    33e2:	e005      	b.n	33f0 <ble_connected_state_handler+0x16c>
    33e4:	1c79      	adds	r1, r7, #1
    33e6:	b2cf      	uxtb	r7, r1
    33e8:	3301      	adds	r3, #1
    33ea:	327c      	adds	r2, #124	; 0x7c
				{
					DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
					at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
					return AT_BLE_FAILURE;
				}
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    33ec:	2b05      	cmp	r3, #5
    33ee:	d1da      	bne.n	33a6 <ble_connected_state_handler+0x122>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
    33f0:	4827      	ldr	r0, [pc, #156]	; (3490 <ble_connected_state_handler+0x20c>)
    33f2:	3064      	adds	r0, #100	; 0x64
    33f4:	1c29      	adds	r1, r5, #0
    33f6:	2207      	movs	r2, #7
    33f8:	4b26      	ldr	r3, [pc, #152]	; (3494 <ble_connected_state_handler+0x210>)
    33fa:	4798      	blx	r3
    33fc:	2800      	cmp	r0, #0
    33fe:	d10e      	bne.n	341e <ble_connected_state_handler+0x19a>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
    3400:	017b      	lsls	r3, r7, #5
    3402:	1bdb      	subs	r3, r3, r7
    3404:	009b      	lsls	r3, r3, #2
    3406:	4a24      	ldr	r2, [pc, #144]	; (3498 <ble_connected_state_handler+0x214>)
    3408:	18d3      	adds	r3, r2, r3
    340a:	2205      	movs	r2, #5
    340c:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
    340e:	4920      	ldr	r1, [pc, #128]	; (3490 <ble_connected_state_handler+0x20c>)
    3410:	1c0b      	adds	r3, r1, #0
    3412:	3364      	adds	r3, #100	; 0x64
    3414:	2200      	movs	r2, #0
    3416:	664a      	str	r2, [r1, #100]	; 0x64
    3418:	809a      	strh	r2, [r3, #4]
    341a:	719a      	strb	r2, [r3, #6]
    341c:	e022      	b.n	3464 <ble_connected_state_handler+0x1e0>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
    341e:	017b      	lsls	r3, r7, #5
    3420:	1bdb      	subs	r3, r3, r7
    3422:	009b      	lsls	r3, r3, #2
    3424:	4a1c      	ldr	r2, [pc, #112]	; (3498 <ble_connected_state_handler+0x214>)
    3426:	18d3      	adds	r3, r2, r3
    3428:	220a      	movs	r2, #10
    342a:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
    342c:	4818      	ldr	r0, [pc, #96]	; (3490 <ble_connected_state_handler+0x20c>)
    342e:	1c03      	adds	r3, r0, #0
    3430:	3364      	adds	r3, #100	; 0x64
    3432:	2100      	movs	r1, #0
    3434:	6641      	str	r1, [r0, #100]	; 0x64
    3436:	8099      	strh	r1, [r3, #4]
    3438:	7199      	strb	r1, [r3, #6]
		}
		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
    343a:	2a0a      	cmp	r2, #10
    343c:	d112      	bne.n	3464 <ble_connected_state_handler+0x1e0>
        {
	 		ble_send_slave_sec_request(conn_params->handle);
    343e:	8928      	ldrh	r0, [r5, #8]
    3440:	4b1e      	ldr	r3, [pc, #120]	; (34bc <ble_connected_state_handler+0x238>)
    3442:	4798      	blx	r3
    3444:	e00e      	b.n	3464 <ble_connected_state_handler+0x1e0>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
    3446:	480b      	ldr	r0, [pc, #44]	; (3474 <ble_connected_state_handler+0x1f0>)
    3448:	4b0b      	ldr	r3, [pc, #44]	; (3478 <ble_connected_state_handler+0x1f4>)
    344a:	4798      	blx	r3
    344c:	7aa9      	ldrb	r1, [r5, #10]
    344e:	481c      	ldr	r0, [pc, #112]	; (34c0 <ble_connected_state_handler+0x23c>)
    3450:	4b0b      	ldr	r3, [pc, #44]	; (3480 <ble_connected_state_handler+0x1fc>)
    3452:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
    3454:	2300      	movs	r3, #0
    3456:	4699      	mov	r9, r3
    3458:	e004      	b.n	3464 <ble_connected_state_handler+0x1e0>
				}
			}
			
			if (!conn_exists)
			{
				if (ble_device_count == BLE_MAX_DEVICE_CONNECTED)
    345a:	4b14      	ldr	r3, [pc, #80]	; (34ac <ble_connected_state_handler+0x228>)
    345c:	781b      	ldrb	r3, [r3, #0]
    345e:	2b05      	cmp	r3, #5
    3460:	d189      	bne.n	3376 <ble_connected_state_handler+0xf2>
    3462:	e78e      	b.n	3382 <ble_connected_state_handler+0xfe>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
    3464:	4648      	mov	r0, r9
    3466:	b01a      	add	sp, #104	; 0x68
    3468:	bc1c      	pop	{r2, r3, r4}
    346a:	4690      	mov	r8, r2
    346c:	4699      	mov	r9, r3
    346e:	46a3      	mov	fp, r4
    3470:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3472:	46c0      	nop			; (mov r8, r8)
    3474:	00008708 	.word	0x00008708
    3478:	000075f9 	.word	0x000075f9
    347c:	000092c8 	.word	0x000092c8
    3480:	000074d9 	.word	0x000074d9
    3484:	0000930c 	.word	0x0000930c
    3488:	2000130c 	.word	0x2000130c
    348c:	000074b7 	.word	0x000074b7
    3490:	200005b4 	.word	0x200005b4
    3494:	00007499 	.word	0x00007499
    3498:	20001060 	.word	0x20001060
    349c:	000074c9 	.word	0x000074c9
    34a0:	200010a6 	.word	0x200010a6
    34a4:	0000470d 	.word	0x0000470d
    34a8:	00009324 	.word	0x00009324
    34ac:	200012cc 	.word	0x200012cc
    34b0:	00009348 	.word	0x00009348
    34b4:	000046ad 	.word	0x000046ad
    34b8:	2000113a 	.word	0x2000113a
    34bc:	00003251 	.word	0x00003251
    34c0:	00009384 	.word	0x00009384

000034c4 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
    34c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34c6:	4647      	mov	r7, r8
    34c8:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
    34ca:	7803      	ldrb	r3, [r0, #0]
    34cc:	2b00      	cmp	r3, #0
    34ce:	d166      	bne.n	359e <ble_resolv_rand_addr_handler+0xda>
    34d0:	4d3b      	ldr	r5, [pc, #236]	; (35c0 <ble_resolv_rand_addr_handler+0xfc>)
    34d2:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
    34d4:	1c46      	adds	r6, r0, #1
    34d6:	4f3b      	ldr	r7, [pc, #236]	; (35c4 <ble_resolv_rand_addr_handler+0x100>)
    34d8:	1c30      	adds	r0, r6, #0
    34da:	1c29      	adds	r1, r5, #0
    34dc:	2210      	movs	r2, #16
    34de:	47b8      	blx	r7
    34e0:	2800      	cmp	r0, #0
    34e2:	d04b      	beq.n	357c <ble_resolv_rand_addr_handler+0xb8>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    34e4:	3401      	adds	r4, #1
    34e6:	b2e4      	uxtb	r4, r4
    34e8:	357c      	adds	r5, #124	; 0x7c
    34ea:	2c05      	cmp	r4, #5
    34ec:	d1f4      	bne.n	34d8 <ble_resolv_rand_addr_handler+0x14>
    34ee:	e056      	b.n	359e <ble_resolv_rand_addr_handler+0xda>
			at_ble_disconnect(connected_state_info.handle, AT_BLE_TERMINATED_BY_USER);
			return AT_BLE_FAILURE;
		}
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    34f0:	235e      	movs	r3, #94	; 0x5e
    34f2:	4a35      	ldr	r2, [pc, #212]	; (35c8 <ble_resolv_rand_addr_handler+0x104>)
    34f4:	5cd3      	ldrb	r3, [r2, r3]
    34f6:	2b00      	cmp	r3, #0
    34f8:	d110      	bne.n	351c <ble_resolv_rand_addr_handler+0x58>
    34fa:	e017      	b.n	352c <ble_resolv_rand_addr_handler+0x68>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		if (ble_device_count == BLE_MAX_DEVICE_CONNECTED)
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
    34fc:	4833      	ldr	r0, [pc, #204]	; (35cc <ble_resolv_rand_addr_handler+0x108>)
    34fe:	4b34      	ldr	r3, [pc, #208]	; (35d0 <ble_resolv_rand_addr_handler+0x10c>)
    3500:	4798      	blx	r3
    3502:	4b34      	ldr	r3, [pc, #208]	; (35d4 <ble_resolv_rand_addr_handler+0x110>)
    3504:	7819      	ldrb	r1, [r3, #0]
    3506:	b2c9      	uxtb	r1, r1
    3508:	4833      	ldr	r0, [pc, #204]	; (35d8 <ble_resolv_rand_addr_handler+0x114>)
    350a:	4b34      	ldr	r3, [pc, #208]	; (35dc <ble_resolv_rand_addr_handler+0x118>)
    350c:	4798      	blx	r3
			at_ble_disconnect(connected_state_info.handle, AT_BLE_TERMINATED_BY_USER);
    350e:	4b34      	ldr	r3, [pc, #208]	; (35e0 <ble_resolv_rand_addr_handler+0x11c>)
    3510:	8918      	ldrh	r0, [r3, #8]
    3512:	2113      	movs	r1, #19
    3514:	4b33      	ldr	r3, [pc, #204]	; (35e4 <ble_resolv_rand_addr_handler+0x120>)
    3516:	4798      	blx	r3
			return AT_BLE_FAILURE;
    3518:	20e2      	movs	r0, #226	; 0xe2
    351a:	e04e      	b.n	35ba <ble_resolv_rand_addr_handler+0xf6>
    351c:	4a32      	ldr	r2, [pc, #200]	; (35e8 <ble_resolv_rand_addr_handler+0x124>)
		}
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
    351e:	2301      	movs	r3, #1
    3520:	b2dc      	uxtb	r4, r3
    3522:	1c1d      	adds	r5, r3, #0
    3524:	7811      	ldrb	r1, [r2, #0]
    3526:	2900      	cmp	r1, #0
    3528:	d11c      	bne.n	3564 <ble_resolv_rand_addr_handler+0xa0>
    352a:	e001      	b.n	3530 <ble_resolv_rand_addr_handler+0x6c>
    352c:	2500      	movs	r5, #0
    352e:	2400      	movs	r4, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
    3530:	4b25      	ldr	r3, [pc, #148]	; (35c8 <ble_resolv_rand_addr_handler+0x104>)
    3532:	4698      	mov	r8, r3
    3534:	016e      	lsls	r6, r5, #5
    3536:	1b77      	subs	r7, r6, r5
    3538:	00bf      	lsls	r7, r7, #2
    353a:	4447      	add	r7, r8
    353c:	1c38      	adds	r0, r7, #0
    353e:	4928      	ldr	r1, [pc, #160]	; (35e0 <ble_resolv_rand_addr_handler+0x11c>)
    3540:	2212      	movs	r2, #18
    3542:	4b2a      	ldr	r3, [pc, #168]	; (35ec <ble_resolv_rand_addr_handler+0x128>)
    3544:	4798      	blx	r3
				ble_device_count++;
    3546:	4a23      	ldr	r2, [pc, #140]	; (35d4 <ble_resolv_rand_addr_handler+0x110>)
    3548:	7813      	ldrb	r3, [r2, #0]
    354a:	3301      	adds	r3, #1
    354c:	b2db      	uxtb	r3, r3
    354e:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    3550:	3758      	adds	r7, #88	; 0x58
    3552:	2302      	movs	r3, #2
    3554:	71bb      	strb	r3, [r7, #6]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
    3556:	1b75      	subs	r5, r6, r5
    3558:	00ad      	lsls	r5, r5, #2
    355a:	1c2b      	adds	r3, r5, #0
    355c:	4443      	add	r3, r8
    355e:	220a      	movs	r2, #10
    3560:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
				break;
    3562:	e021      	b.n	35a8 <ble_resolv_rand_addr_handler+0xe4>
    3564:	3301      	adds	r3, #1
    3566:	327c      	adds	r2, #124	; 0x7c
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
			at_ble_disconnect(connected_state_info.handle, AT_BLE_TERMINATED_BY_USER);
			return AT_BLE_FAILURE;
		}
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    3568:	2b05      	cmp	r3, #5
    356a:	d1d9      	bne.n	3520 <ble_resolv_rand_addr_handler+0x5c>
		ble_send_slave_sec_request(connected_state_info.handle);
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
    356c:	2000      	movs	r0, #0
    356e:	e024      	b.n	35ba <ble_resolv_rand_addr_handler+0xf6>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
    3570:	4b1b      	ldr	r3, [pc, #108]	; (35e0 <ble_resolv_rand_addr_handler+0x11c>)
    3572:	8918      	ldrh	r0, [r3, #8]
    3574:	4b1e      	ldr	r3, [pc, #120]	; (35f0 <ble_resolv_rand_addr_handler+0x12c>)
    3576:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
    3578:	2000      	movs	r0, #0
    357a:	e01e      	b.n	35ba <ble_resolv_rand_addr_handler+0xf6>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
    357c:	4912      	ldr	r1, [pc, #72]	; (35c8 <ble_resolv_rand_addr_handler+0x104>)
    357e:	0163      	lsls	r3, r4, #5
    3580:	1b1a      	subs	r2, r3, r4
    3582:	0092      	lsls	r2, r2, #2
    3584:	188a      	adds	r2, r1, r2
    3586:	1c10      	adds	r0, r2, #0
    3588:	3058      	adds	r0, #88	; 0x58
    358a:	2502      	movs	r5, #2
    358c:	7185      	strb	r5, [r0, #6]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
    358e:	200a      	movs	r0, #10
    3590:	7490      	strb	r0, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
    3592:	1c10      	adds	r0, r2, #0
    3594:	4912      	ldr	r1, [pc, #72]	; (35e0 <ble_resolv_rand_addr_handler+0x11c>)
    3596:	2212      	movs	r2, #18
    3598:	4b14      	ldr	r3, [pc, #80]	; (35ec <ble_resolv_rand_addr_handler+0x128>)
    359a:	4798      	blx	r3
    359c:	e004      	b.n	35a8 <ble_resolv_rand_addr_handler+0xe4>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		if (ble_device_count == BLE_MAX_DEVICE_CONNECTED)
    359e:	4b0d      	ldr	r3, [pc, #52]	; (35d4 <ble_resolv_rand_addr_handler+0x110>)
    35a0:	781b      	ldrb	r3, [r3, #0]
    35a2:	2b05      	cmp	r3, #5
    35a4:	d1a4      	bne.n	34f0 <ble_resolv_rand_addr_handler+0x2c>
    35a6:	e7a9      	b.n	34fc <ble_resolv_rand_addr_handler+0x38>
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
    35a8:	0163      	lsls	r3, r4, #5
    35aa:	1b1c      	subs	r4, r3, r4
    35ac:	00a4      	lsls	r4, r4, #2
    35ae:	4b06      	ldr	r3, [pc, #24]	; (35c8 <ble_resolv_rand_addr_handler+0x104>)
    35b0:	191c      	adds	r4, r3, r4
    35b2:	7ca3      	ldrb	r3, [r4, #18]
    35b4:	2b0a      	cmp	r3, #10
    35b6:	d0db      	beq.n	3570 <ble_resolv_rand_addr_handler+0xac>
		ble_send_slave_sec_request(connected_state_info.handle);
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
    35b8:	2000      	movs	r0, #0
	
}
    35ba:	bc04      	pop	{r2}
    35bc:	4690      	mov	r8, r2
    35be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35c0:	200010a6 	.word	0x200010a6
    35c4:	00007499 	.word	0x00007499
    35c8:	20001060 	.word	0x20001060
    35cc:	00008708 	.word	0x00008708
    35d0:	000075f9 	.word	0x000075f9
    35d4:	200012cc 	.word	0x200012cc
    35d8:	00009348 	.word	0x00009348
    35dc:	000074d9 	.word	0x000074d9
    35e0:	2000130c 	.word	0x2000130c
    35e4:	000046ad 	.word	0x000046ad
    35e8:	2000113a 	.word	0x2000113a
    35ec:	000074b7 	.word	0x000074b7
    35f0:	00003251 	.word	0x00003251

000035f4 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
    35f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35f6:	1c0d      	adds	r5, r1, #0
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
    35f8:	283a      	cmp	r0, #58	; 0x3a
    35fa:	d86c      	bhi.n	36d6 <ble_event_manager+0xe2>
    35fc:	0083      	lsls	r3, r0, #2
    35fe:	4a39      	ldr	r2, [pc, #228]	; (36e4 <ble_event_manager+0xf0>)
    3600:	58d3      	ldr	r3, [r2, r3]
    3602:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3604:	0084      	lsls	r4, r0, #2
    3606:	2600      	movs	r6, #0
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
    3608:	4f37      	ldr	r7, [pc, #220]	; (36e8 <ble_event_manager+0xf4>)
    360a:	59bb      	ldr	r3, [r7, r6]
    360c:	2b00      	cmp	r3, #0
    360e:	d004      	beq.n	361a <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3610:	591b      	ldr	r3, [r3, r4]
    3612:	2b00      	cmp	r3, #0
    3614:	d001      	beq.n	361a <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);
    3616:	1c28      	adds	r0, r5, #0
    3618:	4798      	blx	r3
    361a:	3604      	adds	r6, #4
	case AT_BLE_SIGN_COUNTERS_IND:
	case AT_BLE_PEER_ATT_INFO_IND:
	case AT_BLE_CON_CHANNEL_MAP_IND:
	{
		uint8_t idx;
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
    361c:	2e14      	cmp	r6, #20
    361e:	d1f4      	bne.n	360a <ble_event_manager+0x16>
    3620:	e05f      	b.n	36e2 <ble_event_manager+0xee>
	case AT_BLE_CHARACTERISTIC_WRITE_RESPONSE:
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
    3622:	3813      	subs	r0, #19
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3624:	b2c4      	uxtb	r4, r0
    3626:	00a4      	lsls	r4, r4, #2
    3628:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
    362a:	4f30      	ldr	r7, [pc, #192]	; (36ec <ble_event_manager+0xf8>)
    362c:	59bb      	ldr	r3, [r7, r6]
    362e:	2b00      	cmp	r3, #0
    3630:	d004      	beq.n	363c <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3632:	591b      	ldr	r3, [r3, r4]
    3634:	2b00      	cmp	r3, #0
    3636:	d001      	beq.n	363c <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
    3638:	1c28      	adds	r0, r5, #0
    363a:	4798      	blx	r3
    363c:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
    363e:	2e14      	cmp	r6, #20
    3640:	d1f4      	bne.n	362c <ble_event_manager+0x38>
    3642:	e04e      	b.n	36e2 <ble_event_manager+0xee>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
    3644:	381d      	subs	r0, #29
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3646:	b2c4      	uxtb	r4, r0
    3648:	00a4      	lsls	r4, r4, #2
    364a:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
    364c:	4f28      	ldr	r7, [pc, #160]	; (36f0 <ble_event_manager+0xfc>)
    364e:	59bb      	ldr	r3, [r7, r6]
    3650:	2b00      	cmp	r3, #0
    3652:	d004      	beq.n	365e <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3654:	591b      	ldr	r3, [r3, r4]
    3656:	2b00      	cmp	r3, #0
    3658:	d001      	beq.n	365e <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
    365a:	1c28      	adds	r0, r5, #0
    365c:	4798      	blx	r3
    365e:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
    3660:	2e14      	cmp	r6, #20
    3662:	d1f4      	bne.n	364e <ble_event_manager+0x5a>
    3664:	e03d      	b.n	36e2 <ble_event_manager+0xee>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
    3666:	3827      	subs	r0, #39	; 0x27
    3668:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
    366a:	4b22      	ldr	r3, [pc, #136]	; (36f4 <ble_event_manager+0x100>)
    366c:	681b      	ldr	r3, [r3, #0]
    366e:	2b00      	cmp	r3, #0
    3670:	d037      	beq.n	36e2 <ble_event_manager+0xee>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    3672:	0080      	lsls	r0, r0, #2
    3674:	58c3      	ldr	r3, [r0, r3]
    3676:	2b00      	cmp	r3, #0
    3678:	d033      	beq.n	36e2 <ble_event_manager+0xee>
				{
					event_cb_fn[events](event_params);
    367a:	1c08      	adds	r0, r1, #0
    367c:	4798      	blx	r3
    367e:	e030      	b.n	36e2 <ble_event_manager+0xee>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
    3680:	382d      	subs	r0, #45	; 0x2d
    3682:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
    3684:	4b1c      	ldr	r3, [pc, #112]	; (36f8 <ble_event_manager+0x104>)
    3686:	681b      	ldr	r3, [r3, #0]
    3688:	2b00      	cmp	r3, #0
    368a:	d02a      	beq.n	36e2 <ble_event_manager+0xee>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    368c:	0080      	lsls	r0, r0, #2
    368e:	58c3      	ldr	r3, [r0, r3]
    3690:	2b00      	cmp	r3, #0
    3692:	d026      	beq.n	36e2 <ble_event_manager+0xee>
				{
					event_cb_fn[events](event_params);
    3694:	1c08      	adds	r0, r1, #0
    3696:	4798      	blx	r3
    3698:	e023      	b.n	36e2 <ble_event_manager+0xee>
	
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
    369a:	3836      	subs	r0, #54	; 0x36
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    369c:	b2c4      	uxtb	r4, r0
    369e:	00a4      	lsls	r4, r4, #2
    36a0:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
    36a2:	4f16      	ldr	r7, [pc, #88]	; (36fc <ble_event_manager+0x108>)
    36a4:	59bb      	ldr	r3, [r7, r6]
    36a6:	2b00      	cmp	r3, #0
    36a8:	d004      	beq.n	36b4 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    36aa:	591b      	ldr	r3, [r3, r4]
    36ac:	2b00      	cmp	r3, #0
    36ae:	d001      	beq.n	36b4 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
    36b0:	1c28      	adds	r0, r5, #0
    36b2:	4798      	blx	r3
    36b4:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
    36b6:	2e14      	cmp	r6, #20
    36b8:	d1f4      	bne.n	36a4 <ble_event_manager+0xb0>
    36ba:	e012      	b.n	36e2 <ble_event_manager+0xee>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
    36bc:	3838      	subs	r0, #56	; 0x38
    36be:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
    36c0:	4b0f      	ldr	r3, [pc, #60]	; (3700 <ble_event_manager+0x10c>)
    36c2:	681b      	ldr	r3, [r3, #0]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d00c      	beq.n	36e2 <ble_event_manager+0xee>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
    36c8:	0080      	lsls	r0, r0, #2
    36ca:	58c3      	ldr	r3, [r0, r3]
    36cc:	2b00      	cmp	r3, #0
    36ce:	d008      	beq.n	36e2 <ble_event_manager+0xee>
				{
					event_cb_fn[events](event_params);
    36d0:	1c08      	adds	r0, r1, #0
    36d2:	4798      	blx	r3
    36d4:	e005      	b.n	36e2 <ble_event_manager+0xee>
	break;
	
	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
    36d6:	4d0b      	ldr	r5, [pc, #44]	; (3704 <ble_event_manager+0x110>)
    36d8:	1c28      	adds	r0, r5, #0
    36da:	4c0b      	ldr	r4, [pc, #44]	; (3708 <ble_event_manager+0x114>)
    36dc:	47a0      	blx	r4
    36de:	1c28      	adds	r0, r5, #0
    36e0:	47a0      	blx	r4
	}
	break;		
	}
}
    36e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36e4:	00008c54 	.word	0x00008c54
    36e8:	200012e4 	.word	0x200012e4
    36ec:	200012f8 	.word	0x200012f8
    36f0:	2000104c 	.word	0x2000104c
    36f4:	20001354 	.word	0x20001354
    36f8:	20001048 	.word	0x20001048
    36fc:	200012d0 	.word	0x200012d0
    3700:	20001898 	.word	0x20001898
    3704:	00008708 	.word	0x00008708
    3708:	000075f9 	.word	0x000075f9

0000370c <serial_drv_read_cb>:
}

extern void platform_process_rxdata(uint8_t *buf, uint16_t len);

static void serial_drv_read_cb(const struct usart_async_descriptor *const io_descr)
{
    370c:	b500      	push	{lr}
    370e:	b0c1      	sub	sp, #260	; 0x104
	uint8_t buf_data[250];
	uint16_t length;

	length = io_descr->rx_bytes_in_buffer;
    3710:	234e      	movs	r3, #78	; 0x4e
    3712:	5ac2      	ldrh	r2, [r0, r3]
	if (length)
    3714:	2a00      	cmp	r2, #0
    3716:	d008      	beq.n	372a <serial_drv_read_cb+0x1e>
	{
		/* Enough Room to push all the data */
		length = usart_io->read(usart_io, buf_data, length);
    3718:	4b05      	ldr	r3, [pc, #20]	; (3730 <serial_drv_read_cb+0x24>)
    371a:	6818      	ldr	r0, [r3, #0]
    371c:	6843      	ldr	r3, [r0, #4]
    371e:	a901      	add	r1, sp, #4
    3720:	4798      	blx	r3
		platform_process_rxdata(buf_data,length);
    3722:	b281      	uxth	r1, r0
    3724:	a801      	add	r0, sp, #4
    3726:	4b03      	ldr	r3, [pc, #12]	; (3734 <serial_drv_read_cb+0x28>)
    3728:	4798      	blx	r3
	}
}
    372a:	b041      	add	sp, #260	; 0x104
    372c:	bd00      	pop	{pc}
    372e:	46c0      	nop			; (mov r8, r8)
    3730:	200018a0 	.word	0x200018a0
    3734:	00003929 	.word	0x00003929

00003738 <configure_serial_drv>:
	usart_async_enable(&BLE_COM_FC_UART);
	pf_uart_state_t = After_patch;
}

uint8_t configure_serial_drv(void)
{
    3738:	b538      	push	{r3, r4, r5, lr}
	#if UART_FLOWCONTROL_4WIRE_MODE == true
		usart_configure_flowcontrol();
		#warning "This mode works only if Flow Control Permanently Enabled in the BTLC1000"
	#else
	usart_async_register_callback(&BLE_COM_UART, USART_ASYNC_RXC_CB, serial_drv_read_cb);
    373a:	4c0b      	ldr	r4, [pc, #44]	; (3768 <configure_serial_drv+0x30>)
    373c:	1c20      	adds	r0, r4, #0
    373e:	2100      	movs	r1, #0
    3740:	4a0a      	ldr	r2, [pc, #40]	; (376c <configure_serial_drv+0x34>)
    3742:	4d0b      	ldr	r5, [pc, #44]	; (3770 <configure_serial_drv+0x38>)
    3744:	47a8      	blx	r5
	usart_async_register_callback(&BLE_COM_UART, USART_ASYNC_TXC_CB, serial_drv_write_cb);
    3746:	1c20      	adds	r0, r4, #0
    3748:	2101      	movs	r1, #1
    374a:	4a0a      	ldr	r2, [pc, #40]	; (3774 <configure_serial_drv+0x3c>)
    374c:	47a8      	blx	r5
	usart_async_get_io_descriptor(&BLE_COM_UART, &usart_io);
    374e:	1c20      	adds	r0, r4, #0
    3750:	4909      	ldr	r1, [pc, #36]	; (3778 <configure_serial_drv+0x40>)
    3752:	4b0a      	ldr	r3, [pc, #40]	; (377c <configure_serial_drv+0x44>)
    3754:	4798      	blx	r3
	usart_async_enable(&BLE_COM_UART);
    3756:	1c20      	adds	r0, r4, #0
    3758:	4b09      	ldr	r3, [pc, #36]	; (3780 <configure_serial_drv+0x48>)
    375a:	4798      	blx	r3
	pf_uart_state_t = Before_patch;
    375c:	2200      	movs	r2, #0
    375e:	4b09      	ldr	r3, [pc, #36]	; (3784 <configure_serial_drv+0x4c>)
    3760:	701a      	strb	r2, [r3, #0]
	#endif
	
	return 0;
}
    3762:	2000      	movs	r0, #0
    3764:	bd38      	pop	{r3, r4, r5, pc}
    3766:	46c0      	nop			; (mov r8, r8)
    3768:	20000e54 	.word	0x20000e54
    376c:	0000370d 	.word	0x0000370d
    3770:	000014ad 	.word	0x000014ad
    3774:	00003831 	.word	0x00003831
    3778:	200018a0 	.word	0x200018a0
    377c:	00001481 	.word	0x00001481
    3780:	00001429 	.word	0x00001429
    3784:	2000189c 	.word	0x2000189c

00003788 <configure_usart_after_patch>:

void configure_usart_after_patch(void)
{
    3788:	b538      	push	{r3, r4, r5, lr}

/* === IMPLEMENTATION ====================================================== */
static inline void usart_configure_flowcontrol(void)
{
	#if UART_FLOWCONTROL_6WIRE_MODE == true
	usart_async_disable(&BLE_COM_UART);
    378a:	4c10      	ldr	r4, [pc, #64]	; (37cc <configure_usart_after_patch+0x44>)
    378c:	1c20      	adds	r0, r4, #0
    378e:	4b10      	ldr	r3, [pc, #64]	; (37d0 <configure_usart_after_patch+0x48>)
    3790:	4798      	blx	r3
	usart_async_deinit(&BLE_COM_UART);
    3792:	1c20      	adds	r0, r4, #0
    3794:	4b0f      	ldr	r3, [pc, #60]	; (37d4 <configure_usart_after_patch+0x4c>)
    3796:	4798      	blx	r3
	
	union usart_flow_control_state fw_state;
	fw_state.bit.cts=1;
	fw_state.bit.rts=1;

	usart_async_set_flow_control(&BLE_COM_FC_UART,fw_state);
    3798:	4c0f      	ldr	r4, [pc, #60]	; (37d8 <configure_usart_after_patch+0x50>)
    379a:	1c20      	adds	r0, r4, #0
    379c:	2103      	movs	r1, #3
    379e:	4b0f      	ldr	r3, [pc, #60]	; (37dc <configure_usart_after_patch+0x54>)
    37a0:	4798      	blx	r3
	usart_async_register_callback(&BLE_COM_FC_UART, USART_ASYNC_RXC_CB, serial_drv_read_cb);
    37a2:	1c20      	adds	r0, r4, #0
    37a4:	2100      	movs	r1, #0
    37a6:	4a0e      	ldr	r2, [pc, #56]	; (37e0 <configure_usart_after_patch+0x58>)
    37a8:	4d0e      	ldr	r5, [pc, #56]	; (37e4 <configure_usart_after_patch+0x5c>)
    37aa:	47a8      	blx	r5
	usart_async_register_callback(&BLE_COM_FC_UART, USART_ASYNC_TXC_CB, serial_drv_write_cb);
    37ac:	1c20      	adds	r0, r4, #0
    37ae:	2101      	movs	r1, #1
    37b0:	4a0d      	ldr	r2, [pc, #52]	; (37e8 <configure_usart_after_patch+0x60>)
    37b2:	47a8      	blx	r5
	usart_async_get_io_descriptor(&BLE_COM_FC_UART, &usart_io);
    37b4:	1c20      	adds	r0, r4, #0
    37b6:	490d      	ldr	r1, [pc, #52]	; (37ec <configure_usart_after_patch+0x64>)
    37b8:	4b0d      	ldr	r3, [pc, #52]	; (37f0 <configure_usart_after_patch+0x68>)
    37ba:	4798      	blx	r3
	usart_async_enable(&BLE_COM_FC_UART);
    37bc:	1c20      	adds	r0, r4, #0
    37be:	4b0d      	ldr	r3, [pc, #52]	; (37f4 <configure_usart_after_patch+0x6c>)
    37c0:	4798      	blx	r3
	pf_uart_state_t = After_patch;
    37c2:	4b0d      	ldr	r3, [pc, #52]	; (37f8 <configure_usart_after_patch+0x70>)
    37c4:	2201      	movs	r2, #1
    37c6:	701a      	strb	r2, [r3, #0]
void configure_usart_after_patch(void)
{
	#if UART_FLOWCONTROL_6WIRE_MODE == true
	usart_configure_flowcontrol();
	#endif	
}
    37c8:	bd38      	pop	{r3, r4, r5, pc}
    37ca:	46c0      	nop			; (mov r8, r8)
    37cc:	20000e54 	.word	0x20000e54
    37d0:	00001455 	.word	0x00001455
    37d4:	000013f9 	.word	0x000013f9
    37d8:	20000df8 	.word	0x20000df8
    37dc:	00001525 	.word	0x00001525
    37e0:	0000370d 	.word	0x0000370d
    37e4:	000014ad 	.word	0x000014ad
    37e8:	00003831 	.word	0x00003831
    37ec:	200018a0 	.word	0x200018a0
    37f0:	00001481 	.word	0x00001481
    37f4:	00001429 	.word	0x00001429
    37f8:	2000189c 	.word	0x2000189c

000037fc <platform_serial_drv_tx_status>:
	while(platform_serial_drv_tx_status());
	g_txdata = false;
}

uint32_t platform_serial_drv_tx_status(void)
{
    37fc:	b508      	push	{r3, lr}
	if (pf_uart_state_t == After_patch)
    37fe:	4b08      	ldr	r3, [pc, #32]	; (3820 <platform_serial_drv_tx_status+0x24>)
    3800:	781b      	ldrb	r3, [r3, #0]
    3802:	2b01      	cmp	r3, #1
    3804:	d105      	bne.n	3812 <platform_serial_drv_tx_status+0x16>
	return (!usart_async_is_tx_empty(&BLE_FC_UART));
    3806:	4807      	ldr	r0, [pc, #28]	; (3824 <platform_serial_drv_tx_status+0x28>)
    3808:	4b07      	ldr	r3, [pc, #28]	; (3828 <platform_serial_drv_tx_status+0x2c>)
    380a:	4798      	blx	r3
    380c:	4243      	negs	r3, r0
    380e:	4158      	adcs	r0, r3
    3810:	e004      	b.n	381c <platform_serial_drv_tx_status+0x20>
	else
	return (!usart_async_is_tx_empty(&BLE_UART));
    3812:	4806      	ldr	r0, [pc, #24]	; (382c <platform_serial_drv_tx_status+0x30>)
    3814:	4b04      	ldr	r3, [pc, #16]	; (3828 <platform_serial_drv_tx_status+0x2c>)
    3816:	4798      	blx	r3
    3818:	4243      	negs	r3, r0
    381a:	4158      	adcs	r0, r3
}
    381c:	bd08      	pop	{r3, pc}
    381e:	46c0      	nop			; (mov r8, r8)
    3820:	2000189c 	.word	0x2000189c
    3824:	20000df8 	.word	0x20000df8
    3828:	00001555 	.word	0x00001555
    382c:	20000e54 	.word	0x20000e54

00003830 <serial_drv_write_cb>:
		platform_process_rxdata(buf_data,length);
	}
}

static void serial_drv_write_cb(const struct usart_async_descriptor *const io_descr)
{
    3830:	b510      	push	{r4, lr}
	while(platform_serial_drv_tx_status());
    3832:	4c04      	ldr	r4, [pc, #16]	; (3844 <serial_drv_write_cb+0x14>)
    3834:	47a0      	blx	r4
    3836:	2800      	cmp	r0, #0
    3838:	d1fc      	bne.n	3834 <serial_drv_write_cb+0x4>
	g_txdata = false;
    383a:	2200      	movs	r2, #0
    383c:	4b02      	ldr	r3, [pc, #8]	; (3848 <serial_drv_write_cb+0x18>)
    383e:	701a      	strb	r2, [r3, #0]
}
    3840:	bd10      	pop	{r4, pc}
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	000037fd 	.word	0x000037fd
    3848:	200018a4 	.word	0x200018a4

0000384c <serial_drv_send>:
	usart_configure_flowcontrol();
	#endif	
}

uint16_t serial_drv_send(uint8_t* data, uint16_t len)
{  
    384c:	b570      	push	{r4, r5, r6, lr}
    384e:	1c06      	adds	r6, r0, #0
    3850:	1c0d      	adds	r5, r1, #0
	
	while(platform_serial_drv_tx_status());
    3852:	4c0c      	ldr	r4, [pc, #48]	; (3884 <serial_drv_send+0x38>)
    3854:	47a0      	blx	r4
    3856:	2800      	cmp	r0, #0
    3858:	d1fc      	bne.n	3854 <serial_drv_send+0x8>
	if(len)
    385a:	2d00      	cmp	r5, #0
    385c:	d00c      	beq.n	3878 <serial_drv_send+0x2c>
	{
		g_txdata = true;
    385e:	2201      	movs	r2, #1
    3860:	4b09      	ldr	r3, [pc, #36]	; (3888 <serial_drv_send+0x3c>)
    3862:	701a      	strb	r2, [r3, #0]
		io_write(usart_io, data,len);
    3864:	4b09      	ldr	r3, [pc, #36]	; (388c <serial_drv_send+0x40>)
    3866:	6818      	ldr	r0, [r3, #0]
    3868:	1c31      	adds	r1, r6, #0
    386a:	1c2a      	adds	r2, r5, #0
    386c:	4b08      	ldr	r3, [pc, #32]	; (3890 <serial_drv_send+0x44>)
    386e:	4798      	blx	r3
		while(platform_serial_drv_tx_status());
    3870:	4c04      	ldr	r4, [pc, #16]	; (3884 <serial_drv_send+0x38>)
    3872:	47a0      	blx	r4
    3874:	2800      	cmp	r0, #0
    3876:	d1fc      	bne.n	3872 <serial_drv_send+0x26>
	}
	
	/* Wait for ongoing transmission complete */
	while(g_txdata);	
    3878:	4a03      	ldr	r2, [pc, #12]	; (3888 <serial_drv_send+0x3c>)
    387a:	7813      	ldrb	r3, [r2, #0]
    387c:	2b00      	cmp	r3, #0
    387e:	d1fc      	bne.n	387a <serial_drv_send+0x2e>
	
	return 0;
}
    3880:	2000      	movs	r0, #0
    3882:	bd70      	pop	{r4, r5, r6, pc}
    3884:	000037fd 	.word	0x000037fd
    3888:	200018a4 	.word	0x200018a4
    388c:	200018a0 	.word	0x200018a0
    3890:	00000e55 	.word	0x00000e55

00003894 <platform_init>:
uint16_t rx_buf_idx;
#endif


at_ble_status_t platform_init(uint8_t bus_type, uint8_t bus_flow_control_enabled)
{	
    3894:	b508      	push	{r3, lr}
	platform_bus_type = bus_type;
    3896:	4b06      	ldr	r3, [pc, #24]	; (38b0 <platform_init+0x1c>)
    3898:	7018      	strb	r0, [r3, #0]
	{
		ble_configure_control_pin();
		configure_serial_drv();
		return AT_BLE_SUCCESS;
	}
	return AT_BLE_INVALID_PARAM;
    389a:	23cf      	movs	r3, #207	; 0xcf

at_ble_status_t platform_init(uint8_t bus_type, uint8_t bus_flow_control_enabled)
{	
	platform_bus_type = bus_type;
				
	if (platform_bus_type == AT_BLE_UART)
    389c:	2801      	cmp	r0, #1
    389e:	d104      	bne.n	38aa <platform_init+0x16>
	{
		ble_configure_control_pin();
    38a0:	4b04      	ldr	r3, [pc, #16]	; (38b4 <platform_init+0x20>)
    38a2:	4798      	blx	r3
		configure_serial_drv();
    38a4:	4b04      	ldr	r3, [pc, #16]	; (38b8 <platform_init+0x24>)
    38a6:	4798      	blx	r3
		return AT_BLE_SUCCESS;
    38a8:	2300      	movs	r3, #0
	}
	return AT_BLE_INVALID_PARAM;
}
    38aa:	1c18      	adds	r0, r3, #0
    38ac:	bd08      	pop	{r3, pc}
    38ae:	46c0      	nop			; (mov r8, r8)
    38b0:	20000620 	.word	0x20000620
    38b4:	000004a9 	.word	0x000004a9
    38b8:	00003739 	.word	0x00003739

000038bc <platform_send_sync>:
	
void platform_send_sync(uint8_t *data, uint32_t len)
{
    38bc:	b508      	push	{r3, lr}
	for (i = 0; i < len; i++)
	{
		DBG_LOG_CONT("0x%X, ", data[i]);
	}
#endif
	 if (AT_BLE_UART == platform_bus_type)
    38be:	4b04      	ldr	r3, [pc, #16]	; (38d0 <platform_send_sync+0x14>)
    38c0:	781b      	ldrb	r3, [r3, #0]
    38c2:	2b01      	cmp	r3, #1
    38c4:	d102      	bne.n	38cc <platform_send_sync+0x10>
	 {
		 serial_drv_send(data, (uint16_t)len);
    38c6:	b289      	uxth	r1, r1
    38c8:	4b02      	ldr	r3, [pc, #8]	; (38d4 <platform_send_sync+0x18>)
    38ca:	4798      	blx	r3
	 }
}
    38cc:	bd08      	pop	{r3, pc}
    38ce:	46c0      	nop			; (mov r8, r8)
    38d0:	20000620 	.word	0x20000620
    38d4:	0000384d 	.word	0x0000384d

000038d8 <platform_gpio_set>:

void platform_gpio_set(at_ble_gpio_pin_t pin, at_ble_gpio_status_t status)
{
    38d8:	b508      	push	{r3, lr}
	if (pin == AT_BLE_CHIP_ENABLE)
    38da:	2800      	cmp	r0, #0
    38dc:	d107      	bne.n	38ee <platform_gpio_set+0x16>
	{
		if (status == AT_BLE_HIGH)
    38de:	2901      	cmp	r1, #1
    38e0:	d102      	bne.n	38e8 <platform_gpio_set+0x10>
		{
			ble_enable_pin_set_high();
    38e2:	4b08      	ldr	r3, [pc, #32]	; (3904 <platform_gpio_set+0x2c>)
    38e4:	4798      	blx	r3
    38e6:	e00b      	b.n	3900 <platform_gpio_set+0x28>
		}
		else
		{
			ble_enable_pin_set_low();
    38e8:	4b07      	ldr	r3, [pc, #28]	; (3908 <platform_gpio_set+0x30>)
    38ea:	4798      	blx	r3
    38ec:	e008      	b.n	3900 <platform_gpio_set+0x28>
		}
	}
	else if (pin == AT_BLE_EXTERNAL_WAKEUP)
    38ee:	2801      	cmp	r0, #1
    38f0:	d106      	bne.n	3900 <platform_gpio_set+0x28>
	{
		if (status == AT_BLE_HIGH)
    38f2:	2901      	cmp	r1, #1
    38f4:	d102      	bne.n	38fc <platform_gpio_set+0x24>
		{
			ble_wakeup_pin_set_high();
    38f6:	4b05      	ldr	r3, [pc, #20]	; (390c <platform_gpio_set+0x34>)
    38f8:	4798      	blx	r3
    38fa:	e001      	b.n	3900 <platform_gpio_set+0x28>
		}
		else
		{
			ble_wakeup_pin_set_low();
    38fc:	4b04      	ldr	r3, [pc, #16]	; (3910 <platform_gpio_set+0x38>)
    38fe:	4798      	blx	r3
		}
	}
}
    3900:	bd08      	pop	{r3, pc}
    3902:	46c0      	nop			; (mov r8, r8)
    3904:	00000495 	.word	0x00000495
    3908:	00000481 	.word	0x00000481
    390c:	0000046d 	.word	0x0000046d
    3910:	00000459 	.word	0x00000459

00003914 <platform_recv_async>:

void platform_recv_async(void (*recv_async_callback)(uint8_t))
{
    if (AT_BLE_UART == platform_bus_type)
    3914:	4b03      	ldr	r3, [pc, #12]	; (3924 <platform_recv_async+0x10>)
    3916:	781b      	ldrb	r3, [r3, #0]
    3918:	2b01      	cmp	r3, #1
    391a:	d101      	bne.n	3920 <platform_recv_async+0xc>
    {
	    recv_async_cb = recv_async_callback;
    391c:	4b01      	ldr	r3, [pc, #4]	; (3924 <platform_recv_async+0x10>)
    391e:	6058      	str	r0, [r3, #4]
    }	
}
    3920:	4770      	bx	lr
    3922:	46c0      	nop			; (mov r8, r8)
    3924:	20000620 	.word	0x20000620

00003928 <platform_process_rxdata>:

void platform_process_rxdata(uint8_t *buf, uint16_t len)
{
    3928:	b570      	push	{r4, r5, r6, lr}
	if (AT_BLE_UART == platform_bus_type)
    392a:	4b09      	ldr	r3, [pc, #36]	; (3950 <platform_process_rxdata+0x28>)
    392c:	781b      	ldrb	r3, [r3, #0]
    392e:	2b01      	cmp	r3, #1
    3930:	d10d      	bne.n	394e <platform_process_rxdata+0x26>
	{
		for (uint16_t idx = 0; idx < len; idx++)
    3932:	2900      	cmp	r1, #0
    3934:	d00b      	beq.n	394e <platform_process_rxdata+0x26>
    3936:	1c04      	adds	r4, r0, #0
    3938:	1e4d      	subs	r5, r1, #1
    393a:	b2ad      	uxth	r5, r5
    393c:	3501      	adds	r5, #1
    393e:	1945      	adds	r5, r0, r5
		{
			recv_async_cb(buf[idx]);
    3940:	4e03      	ldr	r6, [pc, #12]	; (3950 <platform_process_rxdata+0x28>)
    3942:	7820      	ldrb	r0, [r4, #0]
    3944:	6873      	ldr	r3, [r6, #4]
    3946:	4798      	blx	r3
    3948:	3401      	adds	r4, #1

void platform_process_rxdata(uint8_t *buf, uint16_t len)
{
	if (AT_BLE_UART == platform_bus_type)
	{
		for (uint16_t idx = 0; idx < len; idx++)
    394a:	42ac      	cmp	r4, r5
    394c:	d1f9      	bne.n	3942 <platform_process_rxdata+0x1a>
		{
			recv_async_cb(buf[idx]);
		}
	}
}
    394e:	bd70      	pop	{r4, r5, r6, pc}
    3950:	20000620 	.word	0x20000620

00003954 <platform_enter_critical_section>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3954:	b672      	cpsid	i
    3956:	f3bf 8f5f 	dmb	sy
{
	do
	{
		__disable_irq();
		__DMB();
		g_interrupt_enabled = false;
    395a:	2200      	movs	r2, #0
    395c:	4b01      	ldr	r3, [pc, #4]	; (3964 <platform_enter_critical_section+0x10>)
    395e:	701a      	strb	r2, [r3, #0]
		
	} while (0);
}
    3960:	4770      	bx	lr
    3962:	46c0      	nop			; (mov r8, r8)
    3964:	2000001c 	.word	0x2000001c

00003968 <platform_leave_critical_section>:
 
void platform_leave_critical_section(void)
{
	do
	{
		g_interrupt_enabled = true;
    3968:	2201      	movs	r2, #1
    396a:	4b03      	ldr	r3, [pc, #12]	; (3978 <platform_leave_critical_section+0x10>)
    396c:	701a      	strb	r2, [r3, #0]
    396e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3972:	b662      	cpsie	i
		__DMB();
		__enable_irq();
		
	} while (0);
}
    3974:	4770      	bx	lr
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	2000001c 	.word	0x2000001c

0000397c <platform_configure_hw_fc_uart>:


 void platform_configure_hw_fc_uart(void)
 {
    397c:	b508      	push	{r3, lr}
 	configure_usart_after_patch();
    397e:	4b01      	ldr	r3, [pc, #4]	; (3984 <platform_configure_hw_fc_uart+0x8>)
    3980:	4798      	blx	r3
 }
    3982:	bd08      	pop	{r3, pc}
    3984:	00003789 	.word	0x00003789

00003988 <platform_create_timer>:
 
void *platform_create_timer(void (*timer_cb)(void *))
 {
    3988:	b508      	push	{r3, lr}
	 platform_configure_timer(timer_cb);
    398a:	4b02      	ldr	r3, [pc, #8]	; (3994 <platform_create_timer+0xc>)
    398c:	4798      	blx	r3
	 return (&(hw_timers[0]));
    398e:	4802      	ldr	r0, [pc, #8]	; (3998 <platform_create_timer+0x10>)
 }
    3990:	3004      	adds	r0, #4
    3992:	bd08      	pop	{r3, pc}
    3994:	00002639 	.word	0x00002639
    3998:	2000001c 	.word	0x2000001c

0000399c <platform_delete_timer>:
 
 void platform_delete_timer(void *timer_handle)
 {
    399c:	b508      	push	{r3, lr}
	 platform_stop_bus_timer();
    399e:	4b01      	ldr	r3, [pc, #4]	; (39a4 <platform_delete_timer+0x8>)
    39a0:	4798      	blx	r3
 }
    39a2:	bd08      	pop	{r3, pc}
    39a4:	00002669 	.word	0x00002669

000039a8 <platform_start_timer>:
 
 void platform_start_timer(void *timer_handle, uint32_t ms)
 {
    39a8:	b510      	push	{r4, lr}
    39aa:	1c0c      	adds	r4, r1, #0
	 platform_enter_critical_section();
    39ac:	4b03      	ldr	r3, [pc, #12]	; (39bc <platform_start_timer+0x14>)
    39ae:	4798      	blx	r3
	 platform_start_bus_timer(ms);
    39b0:	1c20      	adds	r0, r4, #0
    39b2:	4b03      	ldr	r3, [pc, #12]	; (39c0 <platform_start_timer+0x18>)
    39b4:	4798      	blx	r3
	 platform_leave_critical_section();
    39b6:	4b03      	ldr	r3, [pc, #12]	; (39c4 <platform_start_timer+0x1c>)
    39b8:	4798      	blx	r3
 }
    39ba:	bd10      	pop	{r4, pc}
    39bc:	00003955 	.word	0x00003955
    39c0:	00002645 	.word	0x00002645
    39c4:	00003969 	.word	0x00003969

000039c8 <platform_stop_timer>:
 
 void platform_stop_timer(void *timer_handle)
 {
    39c8:	b508      	push	{r3, lr}
	 platform_enter_critical_section();
    39ca:	4b03      	ldr	r3, [pc, #12]	; (39d8 <platform_stop_timer+0x10>)
    39cc:	4798      	blx	r3
	 platform_stop_bus_timer();
    39ce:	4b03      	ldr	r3, [pc, #12]	; (39dc <platform_stop_timer+0x14>)
    39d0:	4798      	blx	r3
	 platform_leave_critical_section();
    39d2:	4b03      	ldr	r3, [pc, #12]	; (39e0 <platform_stop_timer+0x18>)
    39d4:	4798      	blx	r3
 }
    39d6:	bd08      	pop	{r3, pc}
    39d8:	00003955 	.word	0x00003955
    39dc:	00002669 	.word	0x00002669
    39e0:	00003969 	.word	0x00003969

000039e4 <platform_sleep>:
 
 void platform_sleep(uint32_t ms)
 {
    39e4:	b508      	push	{r3, lr}
	 delay_ms(ms);
    39e6:	b280      	uxth	r0, r0
    39e8:	4b01      	ldr	r3, [pc, #4]	; (39f0 <platform_sleep+0xc>)
    39ea:	4798      	blx	r3
 }
    39ec:	bd08      	pop	{r3, pc}
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	00000d51 	.word	0x00000d51

000039f4 <internal_event_post>:
    39f4:	b570      	push	{r4, r5, r6, lr}
    39f6:	4d0c      	ldr	r5, [pc, #48]	; (3a28 <internal_event_post+0x34>)
    39f8:	682c      	ldr	r4, [r5, #0]
    39fa:	2c00      	cmp	r4, #0
    39fc:	d013      	beq.n	3a26 <internal_event_post+0x32>
    39fe:	6826      	ldr	r6, [r4, #0]
    3a00:	60e2      	str	r2, [r4, #12]
    3a02:	602e      	str	r6, [r5, #0]
    3a04:	2500      	movs	r5, #0
    3a06:	4a09      	ldr	r2, [pc, #36]	; (3a2c <internal_event_post+0x38>)
    3a08:	8123      	strh	r3, [r4, #8]
    3a0a:	6813      	ldr	r3, [r2, #0]
    3a0c:	6025      	str	r5, [r4, #0]
    3a0e:	80a0      	strh	r0, [r4, #4]
    3a10:	80e1      	strh	r1, [r4, #6]
    3a12:	42ab      	cmp	r3, r5
    3a14:	d101      	bne.n	3a1a <internal_event_post+0x26>
    3a16:	6014      	str	r4, [r2, #0]
    3a18:	e005      	b.n	3a26 <internal_event_post+0x32>
    3a1a:	681a      	ldr	r2, [r3, #0]
    3a1c:	2a00      	cmp	r2, #0
    3a1e:	d001      	beq.n	3a24 <internal_event_post+0x30>
    3a20:	1c13      	adds	r3, r2, #0
    3a22:	e7fa      	b.n	3a1a <internal_event_post+0x26>
    3a24:	601c      	str	r4, [r3, #0]
    3a26:	bd70      	pop	{r4, r5, r6, pc}
    3a28:	200006d0 	.word	0x200006d0
    3a2c:	200006c8 	.word	0x200006c8

00003a30 <internal_event_init>:
    3a30:	4b0a      	ldr	r3, [pc, #40]	; (3a5c <internal_event_init+0x2c>)
    3a32:	2200      	movs	r2, #0
    3a34:	1c19      	adds	r1, r3, #0
    3a36:	b510      	push	{r4, lr}
    3a38:	6818      	ldr	r0, [r3, #0]
    3a3a:	4b09      	ldr	r3, [pc, #36]	; (3a60 <internal_event_init+0x30>)
    3a3c:	189c      	adds	r4, r3, r2
    3a3e:	50d0      	str	r0, [r2, r3]
    3a40:	3210      	adds	r2, #16
    3a42:	1c20      	adds	r0, r4, #0
    3a44:	2aa0      	cmp	r2, #160	; 0xa0
    3a46:	d1f8      	bne.n	3a3a <internal_event_init+0xa>
    3a48:	3390      	adds	r3, #144	; 0x90
    3a4a:	600b      	str	r3, [r1, #0]
    3a4c:	4b05      	ldr	r3, [pc, #20]	; (3a64 <internal_event_init+0x34>)
    3a4e:	3aa1      	subs	r2, #161	; 0xa1
    3a50:	805a      	strh	r2, [r3, #2]
    3a52:	801a      	strh	r2, [r3, #0]
    3a54:	2200      	movs	r2, #0
    3a56:	609a      	str	r2, [r3, #8]
    3a58:	60da      	str	r2, [r3, #12]
    3a5a:	bd10      	pop	{r4, pc}
    3a5c:	200006d0 	.word	0x200006d0
    3a60:	20000628 	.word	0x20000628
    3a64:	200018a8 	.word	0x200018a8

00003a68 <special_events_handler>:
    3a68:	b538      	push	{r3, r4, r5, lr}
    3a6a:	4c20      	ldr	r4, [pc, #128]	; (3aec <special_events_handler+0x84>)
    3a6c:	1c05      	adds	r5, r0, #0
    3a6e:	1c08      	adds	r0, r1, #0
    3a70:	8821      	ldrh	r1, [r4, #0]
    3a72:	1c23      	adds	r3, r4, #0
    3a74:	42a9      	cmp	r1, r5
    3a76:	d10e      	bne.n	3a96 <special_events_handler+0x2e>
    3a78:	88a1      	ldrh	r1, [r4, #4]
    3a7a:	4281      	cmp	r1, r0
    3a7c:	d10b      	bne.n	3a96 <special_events_handler+0x2e>
    3a7e:	2301      	movs	r3, #1
    3a80:	425b      	negs	r3, r3
    3a82:	8023      	strh	r3, [r4, #0]
    3a84:	60a2      	str	r2, [r4, #8]
    3a86:	4b1a      	ldr	r3, [pc, #104]	; (3af0 <special_events_handler+0x88>)
    3a88:	8862      	ldrh	r2, [r4, #2]
    3a8a:	2101      	movs	r1, #1
    3a8c:	429a      	cmp	r2, r3
    3a8e:	d12b      	bne.n	3ae8 <special_events_handler+0x80>
    3a90:	4b18      	ldr	r3, [pc, #96]	; (3af4 <special_events_handler+0x8c>)
    3a92:	4798      	blx	r3
    3a94:	e01c      	b.n	3ad0 <special_events_handler+0x68>
    3a96:	8859      	ldrh	r1, [r3, #2]
    3a98:	42a9      	cmp	r1, r5
    3a9a:	d10c      	bne.n	3ab6 <special_events_handler+0x4e>
    3a9c:	8899      	ldrh	r1, [r3, #4]
    3a9e:	4281      	cmp	r1, r0
    3aa0:	d109      	bne.n	3ab6 <special_events_handler+0x4e>
    3aa2:	2101      	movs	r1, #1
    3aa4:	4249      	negs	r1, r1
    3aa6:	8059      	strh	r1, [r3, #2]
    3aa8:	6899      	ldr	r1, [r3, #8]
    3aaa:	2900      	cmp	r1, #0
    3aac:	d101      	bne.n	3ab2 <special_events_handler+0x4a>
    3aae:	609a      	str	r2, [r3, #8]
    3ab0:	e7ee      	b.n	3a90 <special_events_handler+0x28>
    3ab2:	60da      	str	r2, [r3, #12]
    3ab4:	e7ec      	b.n	3a90 <special_events_handler+0x28>
    3ab6:	4b10      	ldr	r3, [pc, #64]	; (3af8 <special_events_handler+0x90>)
    3ab8:	429d      	cmp	r5, r3
    3aba:	d00f      	beq.n	3adc <special_events_handler+0x74>
    3abc:	4b0f      	ldr	r3, [pc, #60]	; (3afc <special_events_handler+0x94>)
    3abe:	429d      	cmp	r5, r3
    3ac0:	d008      	beq.n	3ad4 <special_events_handler+0x6c>
    3ac2:	4b0f      	ldr	r3, [pc, #60]	; (3b00 <special_events_handler+0x98>)
    3ac4:	2100      	movs	r1, #0
    3ac6:	429d      	cmp	r5, r3
    3ac8:	d10e      	bne.n	3ae8 <special_events_handler+0x80>
    3aca:	1c10      	adds	r0, r2, #0
    3acc:	4b0d      	ldr	r3, [pc, #52]	; (3b04 <special_events_handler+0x9c>)
    3ace:	4798      	blx	r3
    3ad0:	2101      	movs	r1, #1
    3ad2:	e009      	b.n	3ae8 <special_events_handler+0x80>
    3ad4:	1c11      	adds	r1, r2, #0
    3ad6:	4b0c      	ldr	r3, [pc, #48]	; (3b08 <special_events_handler+0xa0>)
    3ad8:	2200      	movs	r2, #0
    3ada:	e002      	b.n	3ae2 <special_events_handler+0x7a>
    3adc:	1c11      	adds	r1, r2, #0
    3ade:	2200      	movs	r2, #0
    3ae0:	4b0a      	ldr	r3, [pc, #40]	; (3b0c <special_events_handler+0xa4>)
    3ae2:	4798      	blx	r3
    3ae4:	4241      	negs	r1, r0
    3ae6:	4141      	adcs	r1, r0
    3ae8:	1c08      	adds	r0, r1, #0
    3aea:	bd38      	pop	{r3, r4, r5, pc}
    3aec:	200018a8 	.word	0x200018a8
    3af0:	0000ffff 	.word	0x0000ffff
    3af4:	00005061 	.word	0x00005061
    3af8:	00000e13 	.word	0x00000e13
    3afc:	00000e15 	.word	0x00000e15
    3b00:	00000e01 	.word	0x00000e01
    3b04:	00005ba5 	.word	0x00005ba5
    3b08:	00005d75 	.word	0x00005d75
    3b0c:	00005e4d 	.word	0x00005e4d

00003b10 <at_ble_event_get>:
    3b10:	2300      	movs	r3, #0
    3b12:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b14:	1c0d      	adds	r5, r1, #0
    3b16:	b085      	sub	sp, #20
    3b18:	9002      	str	r0, [sp, #8]
    3b1a:	9203      	str	r2, [sp, #12]
    3b1c:	7003      	strb	r3, [r0, #0]
    3b1e:	4bb8      	ldr	r3, [pc, #736]	; (3e00 <at_ble_event_get+0x2f0>)
    3b20:	9803      	ldr	r0, [sp, #12]
    3b22:	4798      	blx	r3
    3b24:	2300      	movs	r3, #0
    3b26:	9301      	str	r3, [sp, #4]
    3b28:	4cb6      	ldr	r4, [pc, #728]	; (3e04 <at_ble_event_get+0x2f4>)
    3b2a:	6823      	ldr	r3, [r4, #0]
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	d104      	bne.n	3b3a <at_ble_event_get+0x2a>
    3b30:	4bb5      	ldr	r3, [pc, #724]	; (3e08 <at_ble_event_get+0x2f8>)
    3b32:	4798      	blx	r3
    3b34:	9001      	str	r0, [sp, #4]
    3b36:	28d0      	cmp	r0, #208	; 0xd0
    3b38:	d1f6      	bne.n	3b28 <at_ble_event_get+0x18>
    3b3a:	4bb4      	ldr	r3, [pc, #720]	; (3e0c <at_ble_event_get+0x2fc>)
    3b3c:	4798      	blx	r3
    3b3e:	9b01      	ldr	r3, [sp, #4]
    3b40:	2bd0      	cmp	r3, #208	; 0xd0
    3b42:	d100      	bne.n	3b46 <at_ble_event_get+0x36>
    3b44:	e28b      	b.n	405e <at_ble_event_get+0x54e>
    3b46:	6823      	ldr	r3, [r4, #0]
    3b48:	681a      	ldr	r2, [r3, #0]
    3b4a:	68d9      	ldr	r1, [r3, #12]
    3b4c:	6022      	str	r2, [r4, #0]
    3b4e:	88da      	ldrh	r2, [r3, #6]
    3b50:	9200      	str	r2, [sp, #0]
    3b52:	4aaf      	ldr	r2, [pc, #700]	; (3e10 <at_ble_event_get+0x300>)
    3b54:	889c      	ldrh	r4, [r3, #4]
    3b56:	6810      	ldr	r0, [r2, #0]
    3b58:	6013      	str	r3, [r2, #0]
    3b5a:	6018      	str	r0, [r3, #0]
    3b5c:	9b01      	ldr	r3, [sp, #4]
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d000      	beq.n	3b64 <at_ble_event_get+0x54>
    3b62:	e27c      	b.n	405e <at_ble_event_get+0x54e>
    3b64:	4bab      	ldr	r3, [pc, #684]	; (3e14 <at_ble_event_get+0x304>)
    3b66:	429c      	cmp	r4, r3
    3b68:	d108      	bne.n	3b7c <at_ble_event_get+0x6c>
    3b6a:	9b00      	ldr	r3, [sp, #0]
    3b6c:	42a3      	cmp	r3, r4
    3b6e:	d000      	beq.n	3b72 <at_ble_event_get+0x62>
    3b70:	e265      	b.n	403e <at_ble_event_get+0x52e>
    3b72:	2338      	movs	r3, #56	; 0x38
    3b74:	9a02      	ldr	r2, [sp, #8]
    3b76:	7013      	strb	r3, [r2, #0]
    3b78:	6029      	str	r1, [r5, #0]
    3b7a:	e270      	b.n	405e <at_ble_event_get+0x54e>
    3b7c:	9b00      	ldr	r3, [sp, #0]
    3b7e:	2bbb      	cmp	r3, #187	; 0xbb
    3b80:	d125      	bne.n	3bce <at_ble_event_get+0xbe>
    3b82:	2cbb      	cmp	r4, #187	; 0xbb
    3b84:	d123      	bne.n	3bce <at_ble_event_get+0xbe>
    3b86:	466b      	mov	r3, sp
    3b88:	889b      	ldrh	r3, [r3, #4]
    3b8a:	80ab      	strh	r3, [r5, #4]
    3b8c:	788b      	ldrb	r3, [r1, #2]
    3b8e:	784a      	ldrb	r2, [r1, #1]
    3b90:	021b      	lsls	r3, r3, #8
    3b92:	78cc      	ldrb	r4, [r1, #3]
    3b94:	7908      	ldrb	r0, [r1, #4]
    3b96:	4313      	orrs	r3, r2
    3b98:	794a      	ldrb	r2, [r1, #5]
    3b9a:	499f      	ldr	r1, [pc, #636]	; (3e18 <at_ble_event_get+0x308>)
    3b9c:	70ac      	strb	r4, [r5, #2]
    3b9e:	802b      	strh	r3, [r5, #0]
    3ba0:	428b      	cmp	r3, r1
    3ba2:	d806      	bhi.n	3bb2 <at_ble_event_get+0xa2>
    3ba4:	4a9d      	ldr	r2, [pc, #628]	; (3e1c <at_ble_event_get+0x30c>)
    3ba6:	4293      	cmp	r3, r2
    3ba8:	d20b      	bcs.n	3bc2 <at_ble_event_get+0xb2>
    3baa:	4a9d      	ldr	r2, [pc, #628]	; (3e20 <at_ble_event_get+0x310>)
    3bac:	4293      	cmp	r3, r2
    3bae:	d008      	beq.n	3bc2 <at_ble_event_get+0xb2>
    3bb0:	e009      	b.n	3bc6 <at_ble_event_get+0xb6>
    3bb2:	499c      	ldr	r1, [pc, #624]	; (3e24 <at_ble_event_get+0x314>)
    3bb4:	428b      	cmp	r3, r1
    3bb6:	d106      	bne.n	3bc6 <at_ble_event_get+0xb6>
    3bb8:	0213      	lsls	r3, r2, #8
    3bba:	4303      	orrs	r3, r0
    3bbc:	80ab      	strh	r3, [r5, #4]
    3bbe:	2337      	movs	r3, #55	; 0x37
    3bc0:	e002      	b.n	3bc8 <at_ble_event_get+0xb8>
    3bc2:	2336      	movs	r3, #54	; 0x36
    3bc4:	e000      	b.n	3bc8 <at_ble_event_get+0xb8>
    3bc6:	2300      	movs	r3, #0
    3bc8:	9a02      	ldr	r2, [sp, #8]
    3bca:	7013      	strb	r3, [r2, #0]
    3bcc:	e247      	b.n	405e <at_ble_event_get+0x54e>
    3bce:	4b96      	ldr	r3, [pc, #600]	; (3e28 <at_ble_event_get+0x318>)
    3bd0:	429c      	cmp	r4, r3
    3bd2:	d100      	bne.n	3bd6 <at_ble_event_get+0xc6>
    3bd4:	e1a2      	b.n	3f1c <at_ble_event_get+0x40c>
    3bd6:	d900      	bls.n	3bda <at_ble_event_get+0xca>
    3bd8:	e083      	b.n	3ce2 <at_ble_event_get+0x1d2>
    3bda:	4b94      	ldr	r3, [pc, #592]	; (3e2c <at_ble_event_get+0x31c>)
    3bdc:	429c      	cmp	r4, r3
    3bde:	d100      	bne.n	3be2 <at_ble_event_get+0xd2>
    3be0:	e1fd      	b.n	3fde <at_ble_event_get+0x4ce>
    3be2:	d83c      	bhi.n	3c5e <at_ble_event_get+0x14e>
    3be4:	4b92      	ldr	r3, [pc, #584]	; (3e30 <at_ble_event_get+0x320>)
    3be6:	429c      	cmp	r4, r3
    3be8:	d100      	bne.n	3bec <at_ble_event_get+0xdc>
    3bea:	e1fc      	b.n	3fe6 <at_ble_event_get+0x4d6>
    3bec:	d816      	bhi.n	3c1c <at_ble_event_get+0x10c>
    3bee:	4b91      	ldr	r3, [pc, #580]	; (3e34 <at_ble_event_get+0x324>)
    3bf0:	429c      	cmp	r4, r3
    3bf2:	d100      	bne.n	3bf6 <at_ble_event_get+0xe6>
    3bf4:	e1d5      	b.n	3fa2 <at_ble_event_get+0x492>
    3bf6:	d804      	bhi.n	3c02 <at_ble_event_get+0xf2>
    3bf8:	2638      	movs	r6, #56	; 0x38
    3bfa:	42b4      	cmp	r4, r6
    3bfc:	d100      	bne.n	3c00 <at_ble_event_get+0xf0>
    3bfe:	e22c      	b.n	405a <at_ble_event_get+0x54a>
    3c00:	e21d      	b.n	403e <at_ble_event_get+0x52e>
    3c02:	4b8d      	ldr	r3, [pc, #564]	; (3e38 <at_ble_event_get+0x328>)
    3c04:	429c      	cmp	r4, r3
    3c06:	d100      	bne.n	3c0a <at_ble_event_get+0xfa>
    3c08:	e1d1      	b.n	3fae <at_ble_event_get+0x49e>
    3c0a:	33fe      	adds	r3, #254	; 0xfe
    3c0c:	33ff      	adds	r3, #255	; 0xff
    3c0e:	429c      	cmp	r4, r3
    3c10:	d000      	beq.n	3c14 <at_ble_event_get+0x104>
    3c12:	e214      	b.n	403e <at_ble_event_get+0x52e>
    3c14:	9800      	ldr	r0, [sp, #0]
    3c16:	1c2a      	adds	r2, r5, #0
    3c18:	4b88      	ldr	r3, [pc, #544]	; (3e3c <at_ble_event_get+0x32c>)
    3c1a:	e194      	b.n	3f46 <at_ble_event_get+0x436>
    3c1c:	4b88      	ldr	r3, [pc, #544]	; (3e40 <at_ble_event_get+0x330>)
    3c1e:	429c      	cmp	r4, r3
    3c20:	d100      	bne.n	3c24 <at_ble_event_get+0x114>
    3c22:	e1d0      	b.n	3fc6 <at_ble_event_get+0x4b6>
    3c24:	d80d      	bhi.n	3c42 <at_ble_event_get+0x132>
    3c26:	4b87      	ldr	r3, [pc, #540]	; (3e44 <at_ble_event_get+0x334>)
    3c28:	429c      	cmp	r4, r3
    3c2a:	d100      	bne.n	3c2e <at_ble_event_get+0x11e>
    3c2c:	e1c5      	b.n	3fba <at_ble_event_get+0x4aa>
    3c2e:	4b86      	ldr	r3, [pc, #536]	; (3e48 <at_ble_event_get+0x338>)
    3c30:	429c      	cmp	r4, r3
    3c32:	d000      	beq.n	3c36 <at_ble_event_get+0x126>
    3c34:	e203      	b.n	403e <at_ble_event_get+0x52e>
    3c36:	9800      	ldr	r0, [sp, #0]
    3c38:	1c2a      	adds	r2, r5, #0
    3c3a:	4b84      	ldr	r3, [pc, #528]	; (3e4c <at_ble_event_get+0x33c>)
    3c3c:	4798      	blx	r3
    3c3e:	2614      	movs	r6, #20
    3c40:	e20b      	b.n	405a <at_ble_event_get+0x54a>
    3c42:	4b83      	ldr	r3, [pc, #524]	; (3e50 <at_ble_event_get+0x340>)
    3c44:	429c      	cmp	r4, r3
    3c46:	d100      	bne.n	3c4a <at_ble_event_get+0x13a>
    3c48:	e1c3      	b.n	3fd2 <at_ble_event_get+0x4c2>
    3c4a:	4b82      	ldr	r3, [pc, #520]	; (3e54 <at_ble_event_get+0x344>)
    3c4c:	429c      	cmp	r4, r3
    3c4e:	d000      	beq.n	3c52 <at_ble_event_get+0x142>
    3c50:	e1f5      	b.n	403e <at_ble_event_get+0x52e>
    3c52:	9800      	ldr	r0, [sp, #0]
    3c54:	1c2a      	adds	r2, r5, #0
    3c56:	4b80      	ldr	r3, [pc, #512]	; (3e58 <at_ble_event_get+0x348>)
    3c58:	4798      	blx	r3
    3c5a:	2618      	movs	r6, #24
    3c5c:	e1fd      	b.n	405a <at_ble_event_get+0x54a>
    3c5e:	4b7f      	ldr	r3, [pc, #508]	; (3e5c <at_ble_event_get+0x34c>)
    3c60:	429c      	cmp	r4, r3
    3c62:	d100      	bne.n	3c66 <at_ble_event_get+0x156>
    3c64:	e1cc      	b.n	4000 <at_ble_event_get+0x4f0>
    3c66:	d81e      	bhi.n	3ca6 <at_ble_event_get+0x196>
    3c68:	4b7d      	ldr	r3, [pc, #500]	; (3e60 <at_ble_event_get+0x350>)
    3c6a:	429c      	cmp	r4, r3
    3c6c:	d100      	bne.n	3c70 <at_ble_event_get+0x160>
    3c6e:	e1ce      	b.n	400e <at_ble_event_get+0x4fe>
    3c70:	d80d      	bhi.n	3c8e <at_ble_event_get+0x17e>
    3c72:	4b7c      	ldr	r3, [pc, #496]	; (3e64 <at_ble_event_get+0x354>)
    3c74:	429c      	cmp	r4, r3
    3c76:	d000      	beq.n	3c7a <at_ble_event_get+0x16a>
    3c78:	e1e1      	b.n	403e <at_ble_event_get+0x52e>
    3c7a:	9800      	ldr	r0, [sp, #0]
    3c7c:	1c2a      	adds	r2, r5, #0
    3c7e:	4b7a      	ldr	r3, [pc, #488]	; (3e68 <at_ble_event_get+0x358>)
    3c80:	4798      	blx	r3
    3c82:	88a9      	ldrh	r1, [r5, #4]
    3c84:	1c06      	adds	r6, r0, #0
    3c86:	4b79      	ldr	r3, [pc, #484]	; (3e6c <at_ble_event_get+0x35c>)
    3c88:	8828      	ldrh	r0, [r5, #0]
    3c8a:	4798      	blx	r3
    3c8c:	e1e5      	b.n	405a <at_ble_event_get+0x54a>
    3c8e:	4b78      	ldr	r3, [pc, #480]	; (3e70 <at_ble_event_get+0x360>)
    3c90:	429c      	cmp	r4, r3
    3c92:	d100      	bne.n	3c96 <at_ble_event_get+0x186>
    3c94:	e1ad      	b.n	3ff2 <at_ble_event_get+0x4e2>
    3c96:	4b77      	ldr	r3, [pc, #476]	; (3e74 <at_ble_event_get+0x364>)
    3c98:	429c      	cmp	r4, r3
    3c9a:	d000      	beq.n	3c9e <at_ble_event_get+0x18e>
    3c9c:	e1cf      	b.n	403e <at_ble_event_get+0x52e>
    3c9e:	9800      	ldr	r0, [sp, #0]
    3ca0:	1c2a      	adds	r2, r5, #0
    3ca2:	4b75      	ldr	r3, [pc, #468]	; (3e78 <at_ble_event_get+0x368>)
    3ca4:	e14f      	b.n	3f46 <at_ble_event_get+0x436>
    3ca6:	4b75      	ldr	r3, [pc, #468]	; (3e7c <at_ble_event_get+0x36c>)
    3ca8:	429c      	cmp	r4, r3
    3caa:	d100      	bne.n	3cae <at_ble_event_get+0x19e>
    3cac:	e12a      	b.n	3f04 <at_ble_event_get+0x3f4>
    3cae:	d809      	bhi.n	3cc4 <at_ble_event_get+0x1b4>
    3cb0:	3b08      	subs	r3, #8
    3cb2:	429c      	cmp	r4, r3
    3cb4:	d100      	bne.n	3cb8 <at_ble_event_get+0x1a8>
    3cb6:	e09e      	b.n	3df6 <at_ble_event_get+0x2e6>
    3cb8:	4b71      	ldr	r3, [pc, #452]	; (3e80 <at_ble_event_get+0x370>)
    3cba:	2639      	movs	r6, #57	; 0x39
    3cbc:	429c      	cmp	r4, r3
    3cbe:	d100      	bne.n	3cc2 <at_ble_event_get+0x1b2>
    3cc0:	e1cb      	b.n	405a <at_ble_event_get+0x54a>
    3cc2:	e1bc      	b.n	403e <at_ble_event_get+0x52e>
    3cc4:	23d1      	movs	r3, #209	; 0xd1
    3cc6:	011b      	lsls	r3, r3, #4
    3cc8:	429c      	cmp	r4, r3
    3cca:	d100      	bne.n	3cce <at_ble_event_get+0x1be>
    3ccc:	e120      	b.n	3f10 <at_ble_event_get+0x400>
    3cce:	4b6d      	ldr	r3, [pc, #436]	; (3e84 <at_ble_event_get+0x374>)
    3cd0:	429c      	cmp	r4, r3
    3cd2:	d000      	beq.n	3cd6 <at_ble_event_get+0x1c6>
    3cd4:	e1b3      	b.n	403e <at_ble_event_get+0x52e>
    3cd6:	1c08      	adds	r0, r1, #0
    3cd8:	4b6b      	ldr	r3, [pc, #428]	; (3e88 <at_ble_event_get+0x378>)
    3cda:	1c29      	adds	r1, r5, #0
    3cdc:	4798      	blx	r3
    3cde:	260f      	movs	r6, #15
    3ce0:	e1bb      	b.n	405a <at_ble_event_get+0x54a>
    3ce2:	4b6a      	ldr	r3, [pc, #424]	; (3e8c <at_ble_event_get+0x37c>)
    3ce4:	429c      	cmp	r4, r3
    3ce6:	d100      	bne.n	3cea <at_ble_event_get+0x1da>
    3ce8:	e135      	b.n	3f56 <at_ble_event_get+0x446>
    3cea:	d83d      	bhi.n	3d68 <at_ble_event_get+0x258>
    3cec:	4b68      	ldr	r3, [pc, #416]	; (3e90 <at_ble_event_get+0x380>)
    3cee:	429c      	cmp	r4, r3
    3cf0:	d100      	bne.n	3cf4 <at_ble_event_get+0x1e4>
    3cf2:	e152      	b.n	3f9a <at_ble_event_get+0x48a>
    3cf4:	d819      	bhi.n	3d2a <at_ble_event_get+0x21a>
    3cf6:	4b67      	ldr	r3, [pc, #412]	; (3e94 <at_ble_event_get+0x384>)
    3cf8:	429c      	cmp	r4, r3
    3cfa:	d100      	bne.n	3cfe <at_ble_event_get+0x1ee>
    3cfc:	e11a      	b.n	3f34 <at_ble_event_get+0x424>
    3cfe:	d807      	bhi.n	3d10 <at_ble_event_get+0x200>
    3d00:	3b03      	subs	r3, #3
    3d02:	429c      	cmp	r4, r3
    3d04:	d000      	beq.n	3d08 <at_ble_event_get+0x1f8>
    3d06:	e19a      	b.n	403e <at_ble_event_get+0x52e>
    3d08:	9800      	ldr	r0, [sp, #0]
    3d0a:	1c2a      	adds	r2, r5, #0
    3d0c:	4b62      	ldr	r3, [pc, #392]	; (3e98 <at_ble_event_get+0x388>)
    3d0e:	e11a      	b.n	3f46 <at_ble_event_get+0x436>
    3d10:	4b62      	ldr	r3, [pc, #392]	; (3e9c <at_ble_event_get+0x38c>)
    3d12:	429c      	cmp	r4, r3
    3d14:	d100      	bne.n	3d18 <at_ble_event_get+0x208>
    3d16:	e107      	b.n	3f28 <at_ble_event_get+0x418>
    3d18:	4b61      	ldr	r3, [pc, #388]	; (3ea0 <at_ble_event_get+0x390>)
    3d1a:	429c      	cmp	r4, r3
    3d1c:	d000      	beq.n	3d20 <at_ble_event_get+0x210>
    3d1e:	e18e      	b.n	403e <at_ble_event_get+0x52e>
    3d20:	9800      	ldr	r0, [sp, #0]
    3d22:	1c2a      	adds	r2, r5, #0
    3d24:	4b5f      	ldr	r3, [pc, #380]	; (3ea4 <at_ble_event_get+0x394>)
    3d26:	4798      	blx	r3
    3d28:	e16f      	b.n	400a <at_ble_event_get+0x4fa>
    3d2a:	4b5f      	ldr	r3, [pc, #380]	; (3ea8 <at_ble_event_get+0x398>)
    3d2c:	429c      	cmp	r4, r3
    3d2e:	d100      	bne.n	3d32 <at_ble_event_get+0x222>
    3d30:	e106      	b.n	3f40 <at_ble_event_get+0x430>
    3d32:	d80b      	bhi.n	3d4c <at_ble_event_get+0x23c>
    3d34:	4b5d      	ldr	r3, [pc, #372]	; (3eac <at_ble_event_get+0x39c>)
    3d36:	429c      	cmp	r4, r3
    3d38:	d100      	bne.n	3d3c <at_ble_event_get+0x22c>
    3d3a:	e12a      	b.n	3f92 <at_ble_event_get+0x482>
    3d3c:	4b5c      	ldr	r3, [pc, #368]	; (3eb0 <at_ble_event_get+0x3a0>)
    3d3e:	429c      	cmp	r4, r3
    3d40:	d000      	beq.n	3d44 <at_ble_event_get+0x234>
    3d42:	e17c      	b.n	403e <at_ble_event_get+0x52e>
    3d44:	9800      	ldr	r0, [sp, #0]
    3d46:	1c2a      	adds	r2, r5, #0
    3d48:	4b5a      	ldr	r3, [pc, #360]	; (3eb4 <at_ble_event_get+0x3a4>)
    3d4a:	e0fc      	b.n	3f46 <at_ble_event_get+0x436>
    3d4c:	4b5a      	ldr	r3, [pc, #360]	; (3eb8 <at_ble_event_get+0x3a8>)
    3d4e:	429c      	cmp	r4, r3
    3d50:	d100      	bne.n	3d54 <at_ble_event_get+0x244>
    3d52:	e0fa      	b.n	3f4a <at_ble_event_get+0x43a>
    3d54:	4b59      	ldr	r3, [pc, #356]	; (3ebc <at_ble_event_get+0x3ac>)
    3d56:	429c      	cmp	r4, r3
    3d58:	d000      	beq.n	3d5c <at_ble_event_get+0x24c>
    3d5a:	e170      	b.n	403e <at_ble_event_get+0x52e>
    3d5c:	9800      	ldr	r0, [sp, #0]
    3d5e:	1c2a      	adds	r2, r5, #0
    3d60:	4b57      	ldr	r3, [pc, #348]	; (3ec0 <at_ble_event_get+0x3b0>)
    3d62:	4798      	blx	r3
    3d64:	260e      	movs	r6, #14
    3d66:	e178      	b.n	405a <at_ble_event_get+0x54a>
    3d68:	4b56      	ldr	r3, [pc, #344]	; (3ec4 <at_ble_event_get+0x3b4>)
    3d6a:	429c      	cmp	r4, r3
    3d6c:	d100      	bne.n	3d70 <at_ble_event_get+0x260>
    3d6e:	e104      	b.n	3f7a <at_ble_event_get+0x46a>
    3d70:	d820      	bhi.n	3db4 <at_ble_event_get+0x2a4>
    3d72:	4b55      	ldr	r3, [pc, #340]	; (3ec8 <at_ble_event_get+0x3b8>)
    3d74:	429c      	cmp	r4, r3
    3d76:	d100      	bne.n	3d7a <at_ble_event_get+0x26a>
    3d78:	e105      	b.n	3f86 <at_ble_event_get+0x476>
    3d7a:	d80d      	bhi.n	3d98 <at_ble_event_get+0x288>
    3d7c:	4b53      	ldr	r3, [pc, #332]	; (3ecc <at_ble_event_get+0x3bc>)
    3d7e:	429c      	cmp	r4, r3
    3d80:	d100      	bne.n	3d84 <at_ble_event_get+0x274>
    3d82:	e0ee      	b.n	3f62 <at_ble_event_get+0x452>
    3d84:	4b52      	ldr	r3, [pc, #328]	; (3ed0 <at_ble_event_get+0x3c0>)
    3d86:	429c      	cmp	r4, r3
    3d88:	d000      	beq.n	3d8c <at_ble_event_get+0x27c>
    3d8a:	e158      	b.n	403e <at_ble_event_get+0x52e>
    3d8c:	9800      	ldr	r0, [sp, #0]
    3d8e:	1c2a      	adds	r2, r5, #0
    3d90:	4b50      	ldr	r3, [pc, #320]	; (3ed4 <at_ble_event_get+0x3c4>)
    3d92:	4798      	blx	r3
    3d94:	2612      	movs	r6, #18
    3d96:	e160      	b.n	405a <at_ble_event_get+0x54a>
    3d98:	4b4f      	ldr	r3, [pc, #316]	; (3ed8 <at_ble_event_get+0x3c8>)
    3d9a:	429c      	cmp	r4, r3
    3d9c:	d100      	bne.n	3da0 <at_ble_event_get+0x290>
    3d9e:	e0e6      	b.n	3f6e <at_ble_event_get+0x45e>
    3da0:	4b4e      	ldr	r3, [pc, #312]	; (3edc <at_ble_event_get+0x3cc>)
    3da2:	429c      	cmp	r4, r3
    3da4:	d000      	beq.n	3da8 <at_ble_event_get+0x298>
    3da6:	e14a      	b.n	403e <at_ble_event_get+0x52e>
    3da8:	1c08      	adds	r0, r1, #0
    3daa:	4b4d      	ldr	r3, [pc, #308]	; (3ee0 <at_ble_event_get+0x3d0>)
    3dac:	1c29      	adds	r1, r5, #0
    3dae:	4798      	blx	r3
    3db0:	262a      	movs	r6, #42	; 0x2a
    3db2:	e152      	b.n	405a <at_ble_event_get+0x54a>
    3db4:	4b4b      	ldr	r3, [pc, #300]	; (3ee4 <at_ble_event_get+0x3d4>)
    3db6:	429c      	cmp	r4, r3
    3db8:	d100      	bne.n	3dbc <at_ble_event_get+0x2ac>
    3dba:	e134      	b.n	4026 <at_ble_event_get+0x516>
    3dbc:	d80d      	bhi.n	3dda <at_ble_event_get+0x2ca>
    3dbe:	4b4a      	ldr	r3, [pc, #296]	; (3ee8 <at_ble_event_get+0x3d8>)
    3dc0:	429c      	cmp	r4, r3
    3dc2:	d100      	bne.n	3dc6 <at_ble_event_get+0x2b6>
    3dc4:	e129      	b.n	401a <at_ble_event_get+0x50a>
    3dc6:	4b49      	ldr	r3, [pc, #292]	; (3eec <at_ble_event_get+0x3dc>)
    3dc8:	429c      	cmp	r4, r3
    3dca:	d000      	beq.n	3dce <at_ble_event_get+0x2be>
    3dcc:	e137      	b.n	403e <at_ble_event_get+0x52e>
    3dce:	9800      	ldr	r0, [sp, #0]
    3dd0:	1c2a      	adds	r2, r5, #0
    3dd2:	4b47      	ldr	r3, [pc, #284]	; (3ef0 <at_ble_event_get+0x3e0>)
    3dd4:	4798      	blx	r3
    3dd6:	2630      	movs	r6, #48	; 0x30
    3dd8:	e13f      	b.n	405a <at_ble_event_get+0x54a>
    3dda:	4b46      	ldr	r3, [pc, #280]	; (3ef4 <at_ble_event_get+0x3e4>)
    3ddc:	429c      	cmp	r4, r3
    3dde:	d100      	bne.n	3de2 <at_ble_event_get+0x2d2>
    3de0:	e127      	b.n	4032 <at_ble_event_get+0x522>
    3de2:	4b45      	ldr	r3, [pc, #276]	; (3ef8 <at_ble_event_get+0x3e8>)
    3de4:	429c      	cmp	r4, r3
    3de6:	d000      	beq.n	3dea <at_ble_event_get+0x2da>
    3de8:	e129      	b.n	403e <at_ble_event_get+0x52e>
    3dea:	9800      	ldr	r0, [sp, #0]
    3dec:	1c2a      	adds	r2, r5, #0
    3dee:	4b43      	ldr	r3, [pc, #268]	; (3efc <at_ble_event_get+0x3ec>)
    3df0:	4798      	blx	r3
    3df2:	2632      	movs	r6, #50	; 0x32
    3df4:	e131      	b.n	405a <at_ble_event_get+0x54a>
    3df6:	1c08      	adds	r0, r1, #0
    3df8:	4b41      	ldr	r3, [pc, #260]	; (3f00 <at_ble_event_get+0x3f0>)
    3dfa:	1c29      	adds	r1, r5, #0
    3dfc:	e091      	b.n	3f22 <at_ble_event_get+0x412>
    3dfe:	46c0      	nop			; (mov r8, r8)
    3e00:	00004ff1 	.word	0x00004ff1
    3e04:	200006c8 	.word	0x200006c8
    3e08:	0000506d 	.word	0x0000506d
    3e0c:	00005015 	.word	0x00005015
    3e10:	200006d0 	.word	0x200006d0
    3e14:	0000ffff 	.word	0x0000ffff
    3e18:	0000201e 	.word	0x0000201e
    3e1c:	0000201d 	.word	0x0000201d
    3e20:	00000c03 	.word	0x00000c03
    3e24:	0000201f 	.word	0x0000201f
    3e28:	00000d1c 	.word	0x00000d1c
    3e2c:	00000c0c 	.word	0x00000c0c
    3e30:	00000c02 	.word	0x00000c02
    3e34:	00000a02 	.word	0x00000a02
    3e38:	00000a03 	.word	0x00000a03
    3e3c:	00006df5 	.word	0x00006df5
    3e40:	00000c06 	.word	0x00000c06
    3e44:	00000c04 	.word	0x00000c04
    3e48:	00000c05 	.word	0x00000c05
    3e4c:	00006ce1 	.word	0x00006ce1
    3e50:	00000c07 	.word	0x00000c07
    3e54:	00000c09 	.word	0x00000c09
    3e58:	00006ed5 	.word	0x00006ed5
    3e5c:	00000c17 	.word	0x00000c17
    3e60:	00000c12 	.word	0x00000c12
    3e64:	00000c0d 	.word	0x00000c0d
    3e68:	00006da1 	.word	0x00006da1
    3e6c:	00006c5d 	.word	0x00006c5d
    3e70:	00000c13 	.word	0x00000c13
    3e74:	00000c15 	.word	0x00000c15
    3e78:	00004961 	.word	0x00004961
    3e7c:	00000d08 	.word	0x00000d08
    3e80:	00000d01 	.word	0x00000d01
    3e84:	00000d15 	.word	0x00000d15
    3e88:	00006ac1 	.word	0x00006ac1
    3e8c:	00000e1b 	.word	0x00000e1b
    3e90:	00000e0f 	.word	0x00000e0f
    3e94:	00000e03 	.word	0x00000e03
    3e98:	00005979 	.word	0x00005979
    3e9c:	00000e06 	.word	0x00000e06
    3ea0:	00000e0a 	.word	0x00000e0a
    3ea4:	00006255 	.word	0x00006255
    3ea8:	00000e15 	.word	0x00000e15
    3eac:	00000e11 	.word	0x00000e11
    3eb0:	00000e13 	.word	0x00000e13
    3eb4:	00005e4d 	.word	0x00005e4d
    3eb8:	00000e17 	.word	0x00000e17
    3ebc:	00000e19 	.word	0x00000e19
    3ec0:	00006199 	.word	0x00006199
    3ec4:	00000e27 	.word	0x00000e27
    3ec8:	00000e21 	.word	0x00000e21
    3ecc:	00000e1c 	.word	0x00000e1c
    3ed0:	00000e1d 	.word	0x00000e1d
    3ed4:	00006375 	.word	0x00006375
    3ed8:	00000e22 	.word	0x00000e22
    3edc:	00000e25 	.word	0x00000e25
    3ee0:	000063fb 	.word	0x000063fb
    3ee4:	00001b05 	.word	0x00001b05
    3ee8:	00001b01 	.word	0x00001b01
    3eec:	00001b03 	.word	0x00001b03
    3ef0:	00007043 	.word	0x00007043
    3ef4:	00001b06 	.word	0x00001b06
    3ef8:	00001b08 	.word	0x00001b08
    3efc:	0000705b 	.word	0x0000705b
    3f00:	00006729 	.word	0x00006729
    3f04:	1c08      	adds	r0, r1, #0
    3f06:	4b5b      	ldr	r3, [pc, #364]	; (4074 <at_ble_event_get+0x564>)
    3f08:	1c29      	adds	r1, r5, #0
    3f0a:	4798      	blx	r3
    3f0c:	2604      	movs	r6, #4
    3f0e:	e0a4      	b.n	405a <at_ble_event_get+0x54a>
    3f10:	1c08      	adds	r0, r1, #0
    3f12:	4b59      	ldr	r3, [pc, #356]	; (4078 <at_ble_event_get+0x568>)
    3f14:	1c29      	adds	r1, r5, #0
    3f16:	4798      	blx	r3
    3f18:	2601      	movs	r6, #1
    3f1a:	e09e      	b.n	405a <at_ble_event_get+0x54a>
    3f1c:	1c08      	adds	r0, r1, #0
    3f1e:	1c29      	adds	r1, r5, #0
    3f20:	4b56      	ldr	r3, [pc, #344]	; (407c <at_ble_event_get+0x56c>)
    3f22:	4798      	blx	r3
    3f24:	1c06      	adds	r6, r0, #0
    3f26:	e098      	b.n	405a <at_ble_event_get+0x54a>
    3f28:	9800      	ldr	r0, [sp, #0]
    3f2a:	1c2a      	adds	r2, r5, #0
    3f2c:	4b54      	ldr	r3, [pc, #336]	; (4080 <at_ble_event_get+0x570>)
    3f2e:	4798      	blx	r3
    3f30:	2611      	movs	r6, #17
    3f32:	e092      	b.n	405a <at_ble_event_get+0x54a>
    3f34:	1c08      	adds	r0, r1, #0
    3f36:	4b53      	ldr	r3, [pc, #332]	; (4084 <at_ble_event_get+0x574>)
    3f38:	1c29      	adds	r1, r5, #0
    3f3a:	4798      	blx	r3
    3f3c:	2606      	movs	r6, #6
    3f3e:	e08c      	b.n	405a <at_ble_event_get+0x54a>
    3f40:	1c2a      	adds	r2, r5, #0
    3f42:	9800      	ldr	r0, [sp, #0]
    3f44:	4b50      	ldr	r3, [pc, #320]	; (4088 <at_ble_event_get+0x578>)
    3f46:	4798      	blx	r3
    3f48:	e7ec      	b.n	3f24 <at_ble_event_get+0x414>
    3f4a:	9800      	ldr	r0, [sp, #0]
    3f4c:	1c2a      	adds	r2, r5, #0
    3f4e:	4b4f      	ldr	r3, [pc, #316]	; (408c <at_ble_event_get+0x57c>)
    3f50:	4798      	blx	r3
    3f52:	260d      	movs	r6, #13
    3f54:	e081      	b.n	405a <at_ble_event_get+0x54a>
    3f56:	9800      	ldr	r0, [sp, #0]
    3f58:	1c2a      	adds	r2, r5, #0
    3f5a:	4b4d      	ldr	r3, [pc, #308]	; (4090 <at_ble_event_get+0x580>)
    3f5c:	4798      	blx	r3
    3f5e:	260b      	movs	r6, #11
    3f60:	e07b      	b.n	405a <at_ble_event_get+0x54a>
    3f62:	9800      	ldr	r0, [sp, #0]
    3f64:	1c2a      	adds	r2, r5, #0
    3f66:	4b4b      	ldr	r3, [pc, #300]	; (4094 <at_ble_event_get+0x584>)
    3f68:	4798      	blx	r3
    3f6a:	2610      	movs	r6, #16
    3f6c:	e075      	b.n	405a <at_ble_event_get+0x54a>
    3f6e:	1c08      	adds	r0, r1, #0
    3f70:	4b49      	ldr	r3, [pc, #292]	; (4098 <at_ble_event_get+0x588>)
    3f72:	1c29      	adds	r1, r5, #0
    3f74:	4798      	blx	r3
    3f76:	2628      	movs	r6, #40	; 0x28
    3f78:	e06f      	b.n	405a <at_ble_event_get+0x54a>
    3f7a:	1c08      	adds	r0, r1, #0
    3f7c:	4b47      	ldr	r3, [pc, #284]	; (409c <at_ble_event_get+0x58c>)
    3f7e:	1c29      	adds	r1, r5, #0
    3f80:	4798      	blx	r3
    3f82:	2629      	movs	r6, #41	; 0x29
    3f84:	e069      	b.n	405a <at_ble_event_get+0x54a>
    3f86:	1c08      	adds	r0, r1, #0
    3f88:	4b45      	ldr	r3, [pc, #276]	; (40a0 <at_ble_event_get+0x590>)
    3f8a:	1c29      	adds	r1, r5, #0
    3f8c:	4798      	blx	r3
    3f8e:	2627      	movs	r6, #39	; 0x27
    3f90:	e063      	b.n	405a <at_ble_event_get+0x54a>
    3f92:	9800      	ldr	r0, [sp, #0]
    3f94:	1c2a      	adds	r2, r5, #0
    3f96:	4b43      	ldr	r3, [pc, #268]	; (40a4 <at_ble_event_get+0x594>)
    3f98:	e7d5      	b.n	3f46 <at_ble_event_get+0x436>
    3f9a:	9800      	ldr	r0, [sp, #0]
    3f9c:	1c2a      	adds	r2, r5, #0
    3f9e:	4b42      	ldr	r3, [pc, #264]	; (40a8 <at_ble_event_get+0x598>)
    3fa0:	e7d1      	b.n	3f46 <at_ble_event_get+0x436>
    3fa2:	1c08      	adds	r0, r1, #0
    3fa4:	4b41      	ldr	r3, [pc, #260]	; (40ac <at_ble_event_get+0x59c>)
    3fa6:	1c29      	adds	r1, r5, #0
    3fa8:	4798      	blx	r3
    3faa:	262b      	movs	r6, #43	; 0x2b
    3fac:	e055      	b.n	405a <at_ble_event_get+0x54a>
    3fae:	1c08      	adds	r0, r1, #0
    3fb0:	4b3f      	ldr	r3, [pc, #252]	; (40b0 <at_ble_event_get+0x5a0>)
    3fb2:	1c29      	adds	r1, r5, #0
    3fb4:	4798      	blx	r3
    3fb6:	262c      	movs	r6, #44	; 0x2c
    3fb8:	e04f      	b.n	405a <at_ble_event_get+0x54a>
    3fba:	9800      	ldr	r0, [sp, #0]
    3fbc:	1c2a      	adds	r2, r5, #0
    3fbe:	4b3d      	ldr	r3, [pc, #244]	; (40b4 <at_ble_event_get+0x5a4>)
    3fc0:	4798      	blx	r3
    3fc2:	2613      	movs	r6, #19
    3fc4:	e049      	b.n	405a <at_ble_event_get+0x54a>
    3fc6:	9800      	ldr	r0, [sp, #0]
    3fc8:	1c2a      	adds	r2, r5, #0
    3fca:	4b3b      	ldr	r3, [pc, #236]	; (40b8 <at_ble_event_get+0x5a8>)
    3fcc:	4798      	blx	r3
    3fce:	2615      	movs	r6, #21
    3fd0:	e043      	b.n	405a <at_ble_event_get+0x54a>
    3fd2:	9800      	ldr	r0, [sp, #0]
    3fd4:	1c2a      	adds	r2, r5, #0
    3fd6:	4b39      	ldr	r3, [pc, #228]	; (40bc <at_ble_event_get+0x5ac>)
    3fd8:	4798      	blx	r3
    3fda:	2616      	movs	r6, #22
    3fdc:	e03d      	b.n	405a <at_ble_event_get+0x54a>
    3fde:	9800      	ldr	r0, [sp, #0]
    3fe0:	1c2a      	adds	r2, r5, #0
    3fe2:	4b37      	ldr	r3, [pc, #220]	; (40c0 <at_ble_event_get+0x5b0>)
    3fe4:	e7af      	b.n	3f46 <at_ble_event_get+0x436>
    3fe6:	9800      	ldr	r0, [sp, #0]
    3fe8:	1c2a      	adds	r2, r5, #0
    3fea:	4b36      	ldr	r3, [pc, #216]	; (40c4 <at_ble_event_get+0x5b4>)
    3fec:	4798      	blx	r3
    3fee:	2623      	movs	r6, #35	; 0x23
    3ff0:	e033      	b.n	405a <at_ble_event_get+0x54a>
    3ff2:	9b00      	ldr	r3, [sp, #0]
    3ff4:	1c08      	adds	r0, r1, #0
    3ff6:	0a1f      	lsrs	r7, r3, #8
    3ff8:	802f      	strh	r7, [r5, #0]
    3ffa:	1c29      	adds	r1, r5, #0
    3ffc:	4b32      	ldr	r3, [pc, #200]	; (40c8 <at_ble_event_get+0x5b8>)
    3ffe:	e790      	b.n	3f22 <at_ble_event_get+0x412>
    4000:	1c08      	adds	r0, r1, #0
    4002:	9a00      	ldr	r2, [sp, #0]
    4004:	1c29      	adds	r1, r5, #0
    4006:	4b31      	ldr	r3, [pc, #196]	; (40cc <at_ble_event_get+0x5bc>)
    4008:	4798      	blx	r3
    400a:	263a      	movs	r6, #58	; 0x3a
    400c:	e025      	b.n	405a <at_ble_event_get+0x54a>
    400e:	9800      	ldr	r0, [sp, #0]
    4010:	1c2a      	adds	r2, r5, #0
    4012:	4b2f      	ldr	r3, [pc, #188]	; (40d0 <at_ble_event_get+0x5c0>)
    4014:	4798      	blx	r3
    4016:	2620      	movs	r6, #32
    4018:	e01f      	b.n	405a <at_ble_event_get+0x54a>
    401a:	9800      	ldr	r0, [sp, #0]
    401c:	1c2a      	adds	r2, r5, #0
    401e:	4b2d      	ldr	r3, [pc, #180]	; (40d4 <at_ble_event_get+0x5c4>)
    4020:	4798      	blx	r3
    4022:	2633      	movs	r6, #51	; 0x33
    4024:	e019      	b.n	405a <at_ble_event_get+0x54a>
    4026:	9800      	ldr	r0, [sp, #0]
    4028:	1c2a      	adds	r2, r5, #0
    402a:	4b2b      	ldr	r3, [pc, #172]	; (40d8 <at_ble_event_get+0x5c8>)
    402c:	4798      	blx	r3
    402e:	2634      	movs	r6, #52	; 0x34
    4030:	e013      	b.n	405a <at_ble_event_get+0x54a>
    4032:	9800      	ldr	r0, [sp, #0]
    4034:	1c2a      	adds	r2, r5, #0
    4036:	4b29      	ldr	r3, [pc, #164]	; (40dc <at_ble_event_get+0x5cc>)
    4038:	4798      	blx	r3
    403a:	2635      	movs	r6, #53	; 0x35
    403c:	e00d      	b.n	405a <at_ble_event_get+0x54a>
    403e:	22c5      	movs	r2, #197	; 0xc5
    4040:	4e27      	ldr	r6, [pc, #156]	; (40e0 <at_ble_event_get+0x5d0>)
    4042:	4928      	ldr	r1, [pc, #160]	; (40e4 <at_ble_event_get+0x5d4>)
    4044:	0052      	lsls	r2, r2, #1
    4046:	4b28      	ldr	r3, [pc, #160]	; (40e8 <at_ble_event_get+0x5d8>)
    4048:	6837      	ldr	r7, [r6, #0]
    404a:	4828      	ldr	r0, [pc, #160]	; (40ec <at_ble_event_get+0x5dc>)
    404c:	47b8      	blx	r7
    404e:	6833      	ldr	r3, [r6, #0]
    4050:	4827      	ldr	r0, [pc, #156]	; (40f0 <at_ble_event_get+0x5e0>)
    4052:	9900      	ldr	r1, [sp, #0]
    4054:	1c22      	adds	r2, r4, #0
    4056:	4798      	blx	r3
    4058:	2600      	movs	r6, #0
    405a:	9b02      	ldr	r3, [sp, #8]
    405c:	701e      	strb	r6, [r3, #0]
    405e:	9b02      	ldr	r3, [sp, #8]
    4060:	781b      	ldrb	r3, [r3, #0]
    4062:	2b3a      	cmp	r3, #58	; 0x3a
    4064:	d103      	bne.n	406e <at_ble_event_get+0x55e>
    4066:	9b01      	ldr	r3, [sp, #4]
    4068:	2b00      	cmp	r3, #0
    406a:	d100      	bne.n	406e <at_ble_event_get+0x55e>
    406c:	e557      	b.n	3b1e <at_ble_event_get+0xe>
    406e:	9801      	ldr	r0, [sp, #4]
    4070:	b005      	add	sp, #20
    4072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4074:	0000670d 	.word	0x0000670d
    4078:	000069c9 	.word	0x000069c9
    407c:	00006ae5 	.word	0x00006ae5
    4080:	000062f9 	.word	0x000062f9
    4084:	00005ccd 	.word	0x00005ccd
    4088:	00005d75 	.word	0x00005d75
    408c:	000060f5 	.word	0x000060f5
    4090:	000062ad 	.word	0x000062ad
    4094:	000062c3 	.word	0x000062c3
    4098:	0000638d 	.word	0x0000638d
    409c:	000063bb 	.word	0x000063bb
    40a0:	000063d1 	.word	0x000063d1
    40a4:	000061f9 	.word	0x000061f9
    40a8:	00006223 	.word	0x00006223
    40ac:	000050f9 	.word	0x000050f9
    40b0:	00005125 	.word	0x00005125
    40b4:	00006ca5 	.word	0x00006ca5
    40b8:	00006d29 	.word	0x00006d29
    40bc:	00006d6d 	.word	0x00006d6d
    40c0:	00006da1 	.word	0x00006da1
    40c4:	00006ec5 	.word	0x00006ec5
    40c8:	000048f5 	.word	0x000048f5
    40cc:	00004925 	.word	0x00004925
    40d0:	00006f15 	.word	0x00006f15
    40d4:	00007039 	.word	0x00007039
    40d8:	00007049 	.word	0x00007049
    40dc:	0000704f 	.word	0x0000704f
    40e0:	20000030 	.word	0x20000030
    40e4:	000093fe 	.word	0x000093fe
    40e8:	000093d0 	.word	0x000093d0
    40ec:	000093e1 	.word	0x000093e1
    40f0:	00009425 	.word	0x00009425

000040f4 <internal_event_flush>:
    40f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    40f6:	490e      	ldr	r1, [pc, #56]	; (4130 <internal_event_flush+0x3c>)
    40f8:	2400      	movs	r4, #0
    40fa:	680b      	ldr	r3, [r1, #0]
    40fc:	1c0f      	adds	r7, r1, #0
    40fe:	1c1e      	adds	r6, r3, #0
    4100:	4a0c      	ldr	r2, [pc, #48]	; (4134 <internal_event_flush+0x40>)
    4102:	6815      	ldr	r5, [r2, #0]
    4104:	9201      	str	r2, [sp, #4]
    4106:	2b00      	cmp	r3, #0
    4108:	d00e      	beq.n	4128 <internal_event_flush+0x34>
    410a:	889a      	ldrh	r2, [r3, #4]
    410c:	6819      	ldr	r1, [r3, #0]
    410e:	4282      	cmp	r2, r0
    4110:	d107      	bne.n	4122 <internal_event_flush+0x2e>
    4112:	2c00      	cmp	r4, #0
    4114:	d001      	beq.n	411a <internal_event_flush+0x26>
    4116:	6021      	str	r1, [r4, #0]
    4118:	e000      	b.n	411c <internal_event_flush+0x28>
    411a:	1c0e      	adds	r6, r1, #0
    411c:	601d      	str	r5, [r3, #0]
    411e:	1c1d      	adds	r5, r3, #0
    4120:	1c23      	adds	r3, r4, #0
    4122:	1c1c      	adds	r4, r3, #0
    4124:	1c0b      	adds	r3, r1, #0
    4126:	e7ee      	b.n	4106 <internal_event_flush+0x12>
    4128:	9b01      	ldr	r3, [sp, #4]
    412a:	603e      	str	r6, [r7, #0]
    412c:	601d      	str	r5, [r3, #0]
    412e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4130:	200006c8 	.word	0x200006c8
    4134:	200006d0 	.word	0x200006d0

00004138 <internal_conn_flush>:
    4138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    413a:	4a12      	ldr	r2, [pc, #72]	; (4184 <internal_conn_flush+0x4c>)
    413c:	9000      	str	r0, [sp, #0]
    413e:	6813      	ldr	r3, [r2, #0]
    4140:	4811      	ldr	r0, [pc, #68]	; (4188 <internal_conn_flush+0x50>)
    4142:	1c1f      	adds	r7, r3, #0
    4144:	2100      	movs	r1, #0
    4146:	4684      	mov	ip, r0
    4148:	6804      	ldr	r4, [r0, #0]
    414a:	9201      	str	r2, [sp, #4]
    414c:	2b00      	cmp	r3, #0
    414e:	d014      	beq.n	417a <internal_conn_flush+0x42>
    4150:	88d8      	ldrh	r0, [r3, #6]
    4152:	9a00      	ldr	r2, [sp, #0]
    4154:	681d      	ldr	r5, [r3, #0]
    4156:	0a06      	lsrs	r6, r0, #8
    4158:	4296      	cmp	r6, r2
    415a:	d10b      	bne.n	4174 <internal_conn_flush+0x3c>
    415c:	26fd      	movs	r6, #253	; 0xfd
    415e:	4006      	ands	r6, r0
    4160:	2e0c      	cmp	r6, #12
    4162:	d107      	bne.n	4174 <internal_conn_flush+0x3c>
    4164:	2900      	cmp	r1, #0
    4166:	d001      	beq.n	416c <internal_conn_flush+0x34>
    4168:	600d      	str	r5, [r1, #0]
    416a:	e000      	b.n	416e <internal_conn_flush+0x36>
    416c:	1c2f      	adds	r7, r5, #0
    416e:	601c      	str	r4, [r3, #0]
    4170:	1c1c      	adds	r4, r3, #0
    4172:	1c0b      	adds	r3, r1, #0
    4174:	1c19      	adds	r1, r3, #0
    4176:	1c2b      	adds	r3, r5, #0
    4178:	e7e8      	b.n	414c <internal_conn_flush+0x14>
    417a:	9b01      	ldr	r3, [sp, #4]
    417c:	601f      	str	r7, [r3, #0]
    417e:	4663      	mov	r3, ip
    4180:	601c      	str	r4, [r3, #0]
    4182:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4184:	200006c8 	.word	0x200006c8
    4188:	200006d0 	.word	0x200006d0

0000418c <at_ble_device_name_set>:
    418c:	b538      	push	{r3, r4, r5, lr}
    418e:	2800      	cmp	r0, #0
    4190:	d002      	beq.n	4198 <at_ble_device_name_set+0xc>
    4192:	1e4b      	subs	r3, r1, #1
    4194:	2b1f      	cmp	r3, #31
    4196:	d90b      	bls.n	41b0 <at_ble_device_name_set+0x24>
    4198:	4c0d      	ldr	r4, [pc, #52]	; (41d0 <at_ble_device_name_set+0x44>)
    419a:	490e      	ldr	r1, [pc, #56]	; (41d4 <at_ble_device_name_set+0x48>)
    419c:	22f7      	movs	r2, #247	; 0xf7
    419e:	4b0e      	ldr	r3, [pc, #56]	; (41d8 <at_ble_device_name_set+0x4c>)
    41a0:	480e      	ldr	r0, [pc, #56]	; (41dc <at_ble_device_name_set+0x50>)
    41a2:	6825      	ldr	r5, [r4, #0]
    41a4:	47a8      	blx	r5
    41a6:	6823      	ldr	r3, [r4, #0]
    41a8:	480d      	ldr	r0, [pc, #52]	; (41e0 <at_ble_device_name_set+0x54>)
    41aa:	4798      	blx	r3
    41ac:	20cf      	movs	r0, #207	; 0xcf
    41ae:	e00d      	b.n	41cc <at_ble_device_name_set+0x40>
    41b0:	4a0c      	ldr	r2, [pc, #48]	; (41e4 <at_ble_device_name_set+0x58>)
    41b2:	1c13      	adds	r3, r2, #0
    41b4:	33aa      	adds	r3, #170	; 0xaa
    41b6:	8019      	strh	r1, [r3, #0]
    41b8:	2300      	movs	r3, #0
    41ba:	1c1c      	adds	r4, r3, #0
    41bc:	5cc5      	ldrb	r5, [r0, r3]
    41be:	34ac      	adds	r4, #172	; 0xac
    41c0:	3301      	adds	r3, #1
    41c2:	5515      	strb	r5, [r2, r4]
    41c4:	b2dc      	uxtb	r4, r3
    41c6:	428c      	cmp	r4, r1
    41c8:	d3f7      	bcc.n	41ba <at_ble_device_name_set+0x2e>
    41ca:	2000      	movs	r0, #0
    41cc:	bd38      	pop	{r3, r4, r5, pc}
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	20000030 	.word	0x20000030
    41d4:	00009498 	.word	0x00009498
    41d8:	000096e9 	.word	0x000096e9
    41dc:	000093e1 	.word	0x000093e1
    41e0:	000094e7 	.word	0x000094e7
    41e4:	20001948 	.word	0x20001948

000041e8 <at_ble_addr_get>:
    41e8:	b510      	push	{r4, lr}
    41ea:	1c04      	adds	r4, r0, #0
    41ec:	20cf      	movs	r0, #207	; 0xcf
    41ee:	2c00      	cmp	r4, #0
    41f0:	d006      	beq.n	4200 <at_ble_addr_get+0x18>
    41f2:	4b04      	ldr	r3, [pc, #16]	; (4204 <at_ble_addr_get+0x1c>)
    41f4:	38ce      	subs	r0, #206	; 0xce
    41f6:	1c21      	adds	r1, r4, #0
    41f8:	4798      	blx	r3
    41fa:	4b03      	ldr	r3, [pc, #12]	; (4208 <at_ble_addr_get+0x20>)
    41fc:	791b      	ldrb	r3, [r3, #4]
    41fe:	7023      	strb	r3, [r4, #0]
    4200:	bd10      	pop	{r4, pc}
    4202:	46c0      	nop			; (mov r8, r8)
    4204:	000065d1 	.word	0x000065d1
    4208:	20001948 	.word	0x20001948

0000420c <at_ble_set_dev_config>:
    420c:	b5f0      	push	{r4, r5, r6, r7, lr}
    420e:	7906      	ldrb	r6, [r0, #4]
    4210:	b089      	sub	sp, #36	; 0x24
    4212:	1c04      	adds	r4, r0, #0
    4214:	2e03      	cmp	r6, #3
    4216:	d90c      	bls.n	4232 <at_ble_set_dev_config+0x26>
    4218:	22a7      	movs	r2, #167	; 0xa7
    421a:	4d33      	ldr	r5, [pc, #204]	; (42e8 <at_ble_set_dev_config+0xdc>)
    421c:	4933      	ldr	r1, [pc, #204]	; (42ec <at_ble_set_dev_config+0xe0>)
    421e:	0052      	lsls	r2, r2, #1
    4220:	4b33      	ldr	r3, [pc, #204]	; (42f0 <at_ble_set_dev_config+0xe4>)
    4222:	682e      	ldr	r6, [r5, #0]
    4224:	4833      	ldr	r0, [pc, #204]	; (42f4 <at_ble_set_dev_config+0xe8>)
    4226:	47b0      	blx	r6
    4228:	7921      	ldrb	r1, [r4, #4]
    422a:	682b      	ldr	r3, [r5, #0]
    422c:	4832      	ldr	r0, [pc, #200]	; (42f8 <at_ble_set_dev_config+0xec>)
    422e:	4798      	blx	r3
    4230:	e020      	b.n	4274 <at_ble_set_dev_config+0x68>
    4232:	7803      	ldrb	r3, [r0, #0]
    4234:	2b0f      	cmp	r3, #15
    4236:	d90d      	bls.n	4254 <at_ble_set_dev_config+0x48>
    4238:	2254      	movs	r2, #84	; 0x54
    423a:	4d2b      	ldr	r5, [pc, #172]	; (42e8 <at_ble_set_dev_config+0xdc>)
    423c:	492b      	ldr	r1, [pc, #172]	; (42ec <at_ble_set_dev_config+0xe0>)
    423e:	32ff      	adds	r2, #255	; 0xff
    4240:	4b2b      	ldr	r3, [pc, #172]	; (42f0 <at_ble_set_dev_config+0xe4>)
    4242:	682e      	ldr	r6, [r5, #0]
    4244:	482b      	ldr	r0, [pc, #172]	; (42f4 <at_ble_set_dev_config+0xe8>)
    4246:	47b0      	blx	r6
    4248:	682b      	ldr	r3, [r5, #0]
    424a:	7821      	ldrb	r1, [r4, #0]
    424c:	482b      	ldr	r0, [pc, #172]	; (42fc <at_ble_set_dev_config+0xf0>)
    424e:	4798      	blx	r3
    4250:	25e0      	movs	r5, #224	; 0xe0
    4252:	e046      	b.n	42e2 <at_ble_set_dev_config+0xd6>
    4254:	2380      	movs	r3, #128	; 0x80
    4256:	8c87      	ldrh	r7, [r0, #36]	; 0x24
    4258:	009b      	lsls	r3, r3, #2
    425a:	429f      	cmp	r7, r3
    425c:	d90c      	bls.n	4278 <at_ble_set_dev_config+0x6c>
    425e:	225a      	movs	r2, #90	; 0x5a
    4260:	4c21      	ldr	r4, [pc, #132]	; (42e8 <at_ble_set_dev_config+0xdc>)
    4262:	4b23      	ldr	r3, [pc, #140]	; (42f0 <at_ble_set_dev_config+0xe4>)
    4264:	4823      	ldr	r0, [pc, #140]	; (42f4 <at_ble_set_dev_config+0xe8>)
    4266:	4921      	ldr	r1, [pc, #132]	; (42ec <at_ble_set_dev_config+0xe0>)
    4268:	32ff      	adds	r2, #255	; 0xff
    426a:	6825      	ldr	r5, [r4, #0]
    426c:	47a8      	blx	r5
    426e:	6823      	ldr	r3, [r4, #0]
    4270:	4823      	ldr	r0, [pc, #140]	; (4300 <at_ble_set_dev_config+0xf4>)
    4272:	4798      	blx	r3
    4274:	25cf      	movs	r5, #207	; 0xcf
    4276:	e034      	b.n	42e2 <at_ble_set_dev_config+0xd6>
    4278:	7fc5      	ldrb	r5, [r0, #31]
    427a:	7f83      	ldrb	r3, [r0, #30]
    427c:	01ad      	lsls	r5, r5, #6
    427e:	015b      	lsls	r3, r3, #5
    4280:	431d      	orrs	r5, r3
    4282:	7ec3      	ldrb	r3, [r0, #27]
    4284:	431d      	orrs	r5, r3
    4286:	7f43      	ldrb	r3, [r0, #29]
    4288:	011b      	lsls	r3, r3, #4
    428a:	431d      	orrs	r5, r3
    428c:	7f03      	ldrb	r3, [r0, #28]
    428e:	009b      	lsls	r3, r3, #2
    4290:	431d      	orrs	r5, r3
    4292:	4b1c      	ldr	r3, [pc, #112]	; (4304 <at_ble_set_dev_config+0xf8>)
    4294:	b2ed      	uxtb	r5, r5
    4296:	711e      	strb	r6, [r3, #4]
    4298:	7900      	ldrb	r0, [r0, #4]
    429a:	2803      	cmp	r0, #3
    429c:	d809      	bhi.n	42b2 <at_ble_set_dev_config+0xa6>
    429e:	f002 ffe5 	bl	726c <__gnu_thumb1_case_uqi>
    42a2:	0402      	.short	0x0402
    42a4:	0606      	.short	0x0606
    42a6:	2300      	movs	r3, #0
    42a8:	e002      	b.n	42b0 <at_ble_set_dev_config+0xa4>
    42aa:	2301      	movs	r3, #1
    42ac:	e000      	b.n	42b0 <at_ble_set_dev_config+0xa4>
    42ae:	2302      	movs	r3, #2
    42b0:	7123      	strb	r3, [r4, #4]
    42b2:	1c23      	adds	r3, r4, #0
    42b4:	330b      	adds	r3, #11
    42b6:	8861      	ldrh	r1, [r4, #2]
    42b8:	9307      	str	r3, [sp, #28]
    42ba:	7923      	ldrb	r3, [r4, #4]
    42bc:	7820      	ldrb	r0, [r4, #0]
    42be:	9300      	str	r3, [sp, #0]
    42c0:	9501      	str	r5, [sp, #4]
    42c2:	8c25      	ldrh	r5, [r4, #32]
    42c4:	1d62      	adds	r2, r4, #5
    42c6:	9502      	str	r5, [sp, #8]
    42c8:	8c65      	ldrh	r5, [r4, #34]	; 0x22
    42ca:	9b07      	ldr	r3, [sp, #28]
    42cc:	9503      	str	r5, [sp, #12]
    42ce:	9704      	str	r7, [sp, #16]
    42d0:	4d0d      	ldr	r5, [pc, #52]	; (4308 <at_ble_set_dev_config+0xfc>)
    42d2:	47a8      	blx	r5
    42d4:	7126      	strb	r6, [r4, #4]
    42d6:	1c05      	adds	r5, r0, #0
    42d8:	1c21      	adds	r1, r4, #0
    42da:	480a      	ldr	r0, [pc, #40]	; (4304 <at_ble_set_dev_config+0xf8>)
    42dc:	2226      	movs	r2, #38	; 0x26
    42de:	4b0b      	ldr	r3, [pc, #44]	; (430c <at_ble_set_dev_config+0x100>)
    42e0:	4798      	blx	r3
    42e2:	1c28      	adds	r0, r5, #0
    42e4:	b009      	add	sp, #36	; 0x24
    42e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42e8:	20000030 	.word	0x20000030
    42ec:	00009498 	.word	0x00009498
    42f0:	0000945a 	.word	0x0000945a
    42f4:	000093e1 	.word	0x000093e1
    42f8:	000094fa 	.word	0x000094fa
    42fc:	00009518 	.word	0x00009518
    4300:	00009535 	.word	0x00009535
    4304:	20001948 	.word	0x20001948
    4308:	000064ad 	.word	0x000064ad
    430c:	000074b7 	.word	0x000074b7

00004310 <at_ble_init>:
    4310:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4312:	1c04      	adds	r4, r0, #0
    4314:	4946      	ldr	r1, [pc, #280]	; (4430 <at_ble_init+0x120>)
    4316:	220b      	movs	r2, #11
    4318:	4b46      	ldr	r3, [pc, #280]	; (4434 <at_ble_init+0x124>)
    431a:	a801      	add	r0, sp, #4
    431c:	4798      	blx	r3
    431e:	1c20      	adds	r0, r4, #0
    4320:	4b45      	ldr	r3, [pc, #276]	; (4438 <at_ble_init+0x128>)
    4322:	4798      	blx	r3
    4324:	1c05      	adds	r5, r0, #0
    4326:	1e04      	subs	r4, r0, #0
    4328:	d009      	beq.n	433e <at_ble_init+0x2e>
    432a:	4c44      	ldr	r4, [pc, #272]	; (443c <at_ble_init+0x12c>)
    432c:	4b44      	ldr	r3, [pc, #272]	; (4440 <at_ble_init+0x130>)
    432e:	4845      	ldr	r0, [pc, #276]	; (4444 <at_ble_init+0x134>)
    4330:	4945      	ldr	r1, [pc, #276]	; (4448 <at_ble_init+0x138>)
    4332:	222d      	movs	r2, #45	; 0x2d
    4334:	6826      	ldr	r6, [r4, #0]
    4336:	47b0      	blx	r6
    4338:	6823      	ldr	r3, [r4, #0]
    433a:	4844      	ldr	r0, [pc, #272]	; (444c <at_ble_init+0x13c>)
    433c:	e072      	b.n	4424 <at_ble_init+0x114>
    433e:	4b44      	ldr	r3, [pc, #272]	; (4450 <at_ble_init+0x140>)
    4340:	4798      	blx	r3
    4342:	1c23      	adds	r3, r4, #0
    4344:	1e05      	subs	r5, r0, #0
    4346:	d009      	beq.n	435c <at_ble_init+0x4c>
    4348:	4c3c      	ldr	r4, [pc, #240]	; (443c <at_ble_init+0x12c>)
    434a:	4b3d      	ldr	r3, [pc, #244]	; (4440 <at_ble_init+0x130>)
    434c:	483d      	ldr	r0, [pc, #244]	; (4444 <at_ble_init+0x134>)
    434e:	493e      	ldr	r1, [pc, #248]	; (4448 <at_ble_init+0x138>)
    4350:	2233      	movs	r2, #51	; 0x33
    4352:	6826      	ldr	r6, [r4, #0]
    4354:	47b0      	blx	r6
    4356:	6823      	ldr	r3, [r4, #0]
    4358:	483e      	ldr	r0, [pc, #248]	; (4454 <at_ble_init+0x144>)
    435a:	e063      	b.n	4424 <at_ble_init+0x114>
    435c:	2101      	movs	r1, #1
    435e:	4a3e      	ldr	r2, [pc, #248]	; (4458 <at_ble_init+0x148>)
    4360:	4249      	negs	r1, r1
    4362:	189a      	adds	r2, r3, r2
    4364:	3312      	adds	r3, #18
    4366:	8151      	strh	r1, [r2, #10]
    4368:	2b90      	cmp	r3, #144	; 0x90
    436a:	d1f7      	bne.n	435c <at_ble_init+0x4c>
    436c:	4c3b      	ldr	r4, [pc, #236]	; (445c <at_ble_init+0x14c>)
    436e:	3b81      	subs	r3, #129	; 0x81
    4370:	7023      	strb	r3, [r4, #0]
    4372:	4b3b      	ldr	r3, [pc, #236]	; (4460 <at_ble_init+0x150>)
    4374:	4a3b      	ldr	r2, [pc, #236]	; (4464 <at_ble_init+0x154>)
    4376:	8063      	strh	r3, [r4, #2]
    4378:	2300      	movs	r3, #0
    437a:	7123      	strb	r3, [r4, #4]
    437c:	3301      	adds	r3, #1
    437e:	1e58      	subs	r0, r3, #1
    4380:	0119      	lsls	r1, r3, #4
    4382:	4301      	orrs	r1, r0
    4384:	3302      	adds	r3, #2
    4386:	7011      	strb	r1, [r2, #0]
    4388:	3201      	adds	r2, #1
    438a:	2b21      	cmp	r3, #33	; 0x21
    438c:	d1f7      	bne.n	437e <at_ble_init+0x6e>
    438e:	2280      	movs	r2, #128	; 0x80
    4390:	0092      	lsls	r2, r2, #2
    4392:	84a2      	strh	r2, [r4, #36]	; 0x24
    4394:	1c22      	adds	r2, r4, #0
    4396:	2300      	movs	r3, #0
    4398:	3273      	adds	r2, #115	; 0x73
    439a:	7013      	strb	r3, [r2, #0]
    439c:	1c22      	adds	r2, r4, #0
    439e:	3272      	adds	r2, #114	; 0x72
    43a0:	7013      	strb	r3, [r2, #0]
    43a2:	1c22      	adds	r2, r4, #0
    43a4:	3276      	adds	r2, #118	; 0x76
    43a6:	7013      	strb	r3, [r2, #0]
    43a8:	1c22      	adds	r2, r4, #0
    43aa:	32cc      	adds	r2, #204	; 0xcc
    43ac:	8013      	strh	r3, [r2, #0]
    43ae:	1c21      	adds	r1, r4, #0
    43b0:	22a0      	movs	r2, #160	; 0xa0
    43b2:	31d0      	adds	r1, #208	; 0xd0
    43b4:	0052      	lsls	r2, r2, #1
    43b6:	800a      	strh	r2, [r1, #0]
    43b8:	1c21      	adds	r1, r4, #0
    43ba:	31ce      	adds	r1, #206	; 0xce
    43bc:	800a      	strh	r2, [r1, #0]
    43be:	1c22      	adds	r2, r4, #0
    43c0:	32d2      	adds	r2, #210	; 0xd2
    43c2:	8013      	strh	r3, [r2, #0]
    43c4:	21fa      	movs	r1, #250	; 0xfa
    43c6:	1c22      	adds	r2, r4, #0
    43c8:	0049      	lsls	r1, r1, #1
    43ca:	32d4      	adds	r2, #212	; 0xd4
    43cc:	8011      	strh	r1, [r2, #0]
    43ce:	1c22      	adds	r2, r4, #0
    43d0:	32d6      	adds	r2, #214	; 0xd6
    43d2:	76e3      	strb	r3, [r4, #27]
    43d4:	7723      	strb	r3, [r4, #28]
    43d6:	7763      	strb	r3, [r4, #29]
    43d8:	77a3      	strb	r3, [r4, #30]
    43da:	77e3      	strb	r3, [r4, #31]
    43dc:	8423      	strh	r3, [r4, #32]
    43de:	8463      	strh	r3, [r4, #34]	; 0x22
    43e0:	7013      	strb	r3, [r2, #0]
    43e2:	1c20      	adds	r0, r4, #0
    43e4:	4b20      	ldr	r3, [pc, #128]	; (4468 <at_ble_init+0x158>)
    43e6:	4798      	blx	r3
    43e8:	1e05      	subs	r5, r0, #0
    43ea:	d009      	beq.n	4400 <at_ble_init+0xf0>
    43ec:	4c13      	ldr	r4, [pc, #76]	; (443c <at_ble_init+0x12c>)
    43ee:	4b14      	ldr	r3, [pc, #80]	; (4440 <at_ble_init+0x130>)
    43f0:	4814      	ldr	r0, [pc, #80]	; (4444 <at_ble_init+0x134>)
    43f2:	4915      	ldr	r1, [pc, #84]	; (4448 <at_ble_init+0x138>)
    43f4:	225d      	movs	r2, #93	; 0x5d
    43f6:	6826      	ldr	r6, [r4, #0]
    43f8:	47b0      	blx	r6
    43fa:	6823      	ldr	r3, [r4, #0]
    43fc:	481b      	ldr	r0, [pc, #108]	; (446c <at_ble_init+0x15c>)
    43fe:	e011      	b.n	4424 <at_ble_init+0x114>
    4400:	2307      	movs	r3, #7
    4402:	3474      	adds	r4, #116	; 0x74
    4404:	7023      	strb	r3, [r4, #0]
    4406:	a801      	add	r0, sp, #4
    4408:	210b      	movs	r1, #11
    440a:	4b19      	ldr	r3, [pc, #100]	; (4470 <at_ble_init+0x160>)
    440c:	4798      	blx	r3
    440e:	1e05      	subs	r5, r0, #0
    4410:	d00a      	beq.n	4428 <at_ble_init+0x118>
    4412:	4c0a      	ldr	r4, [pc, #40]	; (443c <at_ble_init+0x12c>)
    4414:	4b0a      	ldr	r3, [pc, #40]	; (4440 <at_ble_init+0x130>)
    4416:	480b      	ldr	r0, [pc, #44]	; (4444 <at_ble_init+0x134>)
    4418:	490b      	ldr	r1, [pc, #44]	; (4448 <at_ble_init+0x138>)
    441a:	2266      	movs	r2, #102	; 0x66
    441c:	6826      	ldr	r6, [r4, #0]
    441e:	47b0      	blx	r6
    4420:	6823      	ldr	r3, [r4, #0]
    4422:	4814      	ldr	r0, [pc, #80]	; (4474 <at_ble_init+0x164>)
    4424:	1c29      	adds	r1, r5, #0
    4426:	4798      	blx	r3
    4428:	1c28      	adds	r0, r5, #0
    442a:	b004      	add	sp, #16
    442c:	bd70      	pop	{r4, r5, r6, pc}
    442e:	46c0      	nop			; (mov r8, r8)
    4430:	0000944f 	.word	0x0000944f
    4434:	000074b7 	.word	0x000074b7
    4438:	00004e9d 	.word	0x00004e9d
    443c:	20000030 	.word	0x20000030
    4440:	00009700 	.word	0x00009700
    4444:	000093e1 	.word	0x000093e1
    4448:	00009498 	.word	0x00009498
    444c:	0000955f 	.word	0x0000955f
    4450:	0000641d 	.word	0x0000641d
    4454:	0000957b 	.word	0x0000957b
    4458:	200018b8 	.word	0x200018b8
    445c:	20001948 	.word	0x20001948
    4460:	00003a98 	.word	0x00003a98
    4464:	20001953 	.word	0x20001953
    4468:	0000420d 	.word	0x0000420d
    446c:	00009594 	.word	0x00009594
    4470:	0000418d 	.word	0x0000418d
    4474:	000095b7 	.word	0x000095b7

00004478 <at_ble_addr_set>:
    4478:	b538      	push	{r3, r4, r5, lr}
    447a:	1c45      	adds	r5, r0, #1
    447c:	1c03      	adds	r3, r0, #0
    447e:	20cf      	movs	r0, #207	; 0xcf
    4480:	2d00      	cmp	r5, #0
    4482:	d018      	beq.n	44b6 <at_ble_addr_set+0x3e>
    4484:	781a      	ldrb	r2, [r3, #0]
    4486:	2a03      	cmp	r2, #3
    4488:	d815      	bhi.n	44b6 <at_ble_addr_set+0x3e>
    448a:	2a01      	cmp	r2, #1
    448c:	d102      	bne.n	4494 <at_ble_addr_set+0x1c>
    448e:	785a      	ldrb	r2, [r3, #1]
    4490:	2a00      	cmp	r2, #0
    4492:	d010      	beq.n	44b6 <at_ble_addr_set+0x3e>
    4494:	1c1c      	adds	r4, r3, #0
    4496:	1c29      	adds	r1, r5, #0
    4498:	2206      	movs	r2, #6
    449a:	4b07      	ldr	r3, [pc, #28]	; (44b8 <at_ble_addr_set+0x40>)
    449c:	4807      	ldr	r0, [pc, #28]	; (44bc <at_ble_addr_set+0x44>)
    449e:	4798      	blx	r3
    44a0:	7823      	ldrb	r3, [r4, #0]
    44a2:	4807      	ldr	r0, [pc, #28]	; (44c0 <at_ble_addr_set+0x48>)
    44a4:	7103      	strb	r3, [r0, #4]
    44a6:	4b07      	ldr	r3, [pc, #28]	; (44c4 <at_ble_addr_set+0x4c>)
    44a8:	4798      	blx	r3
    44aa:	7823      	ldrb	r3, [r4, #0]
    44ac:	2b00      	cmp	r3, #0
    44ae:	d102      	bne.n	44b6 <at_ble_addr_set+0x3e>
    44b0:	1c28      	adds	r0, r5, #0
    44b2:	4b05      	ldr	r3, [pc, #20]	; (44c8 <at_ble_addr_set+0x50>)
    44b4:	4798      	blx	r3
    44b6:	bd38      	pop	{r3, r4, r5, pc}
    44b8:	000074b7 	.word	0x000074b7
    44bc:	2000194d 	.word	0x2000194d
    44c0:	20001948 	.word	0x20001948
    44c4:	0000420d 	.word	0x0000420d
    44c8:	000057d1 	.word	0x000057d1

000044cc <at_ble_adv_data_set>:
    44cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44ce:	4684      	mov	ip, r0
    44d0:	1c0f      	adds	r7, r1, #0
    44d2:	1c16      	adds	r6, r2, #0
    44d4:	1c1c      	adds	r4, r3, #0
    44d6:	2800      	cmp	r0, #0
    44d8:	d102      	bne.n	44e0 <at_ble_adv_data_set+0x14>
    44da:	20e2      	movs	r0, #226	; 0xe2
    44dc:	2a00      	cmp	r2, #0
    44de:	d02b      	beq.n	4538 <at_ble_adv_data_set+0x6c>
    44e0:	20cf      	movs	r0, #207	; 0xcf
    44e2:	2f1f      	cmp	r7, #31
    44e4:	d828      	bhi.n	4538 <at_ble_adv_data_set+0x6c>
    44e6:	2c1f      	cmp	r4, #31
    44e8:	d826      	bhi.n	4538 <at_ble_adv_data_set+0x6c>
    44ea:	4663      	mov	r3, ip
    44ec:	2b00      	cmp	r3, #0
    44ee:	d00e      	beq.n	450e <at_ble_adv_data_set+0x42>
    44f0:	4812      	ldr	r0, [pc, #72]	; (453c <at_ble_adv_data_set+0x70>)
    44f2:	4d13      	ldr	r5, [pc, #76]	; (4540 <at_ble_adv_data_set+0x74>)
    44f4:	2f00      	cmp	r7, #0
    44f6:	d104      	bne.n	4502 <at_ble_adv_data_set+0x36>
    44f8:	1c39      	adds	r1, r7, #0
    44fa:	221f      	movs	r2, #31
    44fc:	4b11      	ldr	r3, [pc, #68]	; (4544 <at_ble_adv_data_set+0x78>)
    44fe:	4798      	blx	r3
    4500:	e003      	b.n	450a <at_ble_adv_data_set+0x3e>
    4502:	4661      	mov	r1, ip
    4504:	1c3a      	adds	r2, r7, #0
    4506:	4b10      	ldr	r3, [pc, #64]	; (4548 <at_ble_adv_data_set+0x7c>)
    4508:	4798      	blx	r3
    450a:	3572      	adds	r5, #114	; 0x72
    450c:	702f      	strb	r7, [r5, #0]
    450e:	1e30      	subs	r0, r6, #0
    4510:	d012      	beq.n	4538 <at_ble_adv_data_set+0x6c>
    4512:	4d0b      	ldr	r5, [pc, #44]	; (4540 <at_ble_adv_data_set+0x74>)
    4514:	480d      	ldr	r0, [pc, #52]	; (454c <at_ble_adv_data_set+0x80>)
    4516:	2c00      	cmp	r4, #0
    4518:	d107      	bne.n	452a <at_ble_adv_data_set+0x5e>
    451a:	1c21      	adds	r1, r4, #0
    451c:	221f      	movs	r2, #31
    451e:	4b09      	ldr	r3, [pc, #36]	; (4544 <at_ble_adv_data_set+0x78>)
    4520:	3573      	adds	r5, #115	; 0x73
    4522:	4798      	blx	r3
    4524:	702c      	strb	r4, [r5, #0]
    4526:	1c20      	adds	r0, r4, #0
    4528:	e006      	b.n	4538 <at_ble_adv_data_set+0x6c>
    452a:	1c31      	adds	r1, r6, #0
    452c:	1c22      	adds	r2, r4, #0
    452e:	4b06      	ldr	r3, [pc, #24]	; (4548 <at_ble_adv_data_set+0x7c>)
    4530:	4798      	blx	r3
    4532:	2000      	movs	r0, #0
    4534:	3573      	adds	r5, #115	; 0x73
    4536:	702c      	strb	r4, [r5, #0]
    4538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    453a:	46c0      	nop			; (mov r8, r8)
    453c:	2000197c 	.word	0x2000197c
    4540:	20001948 	.word	0x20001948
    4544:	000074c9 	.word	0x000074c9
    4548:	000074b7 	.word	0x000074b7
    454c:	2000199b 	.word	0x2000199b

00004550 <at_ble_adv_start>:
    4550:	b5f0      	push	{r4, r5, r6, r7, lr}
    4552:	b091      	sub	sp, #68	; 0x44
    4554:	1c1f      	adds	r7, r3, #0
    4556:	ab16      	add	r3, sp, #88	; 0x58
    4558:	881d      	ldrh	r5, [r3, #0]
    455a:	ab17      	add	r3, sp, #92	; 0x5c
    455c:	881b      	ldrh	r3, [r3, #0]
    455e:	910d      	str	r1, [sp, #52]	; 0x34
    4560:	930e      	str	r3, [sp, #56]	; 0x38
    4562:	ab18      	add	r3, sp, #96	; 0x60
    4564:	781b      	ldrb	r3, [r3, #0]
    4566:	1c04      	adds	r4, r0, #0
    4568:	930f      	str	r3, [sp, #60]	; 0x3c
    456a:	4b42      	ldr	r3, [pc, #264]	; (4674 <at_ble_adv_start+0x124>)
    456c:	1c16      	adds	r6, r2, #0
    456e:	3373      	adds	r3, #115	; 0x73
    4570:	781b      	ldrb	r3, [r3, #0]
    4572:	20cf      	movs	r0, #207	; 0xcf
    4574:	930c      	str	r3, [sp, #48]	; 0x30
    4576:	2c01      	cmp	r4, #1
    4578:	d103      	bne.n	4582 <at_ble_adv_start+0x32>
    457a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    457c:	2b00      	cmp	r3, #0
    457e:	d176      	bne.n	466e <at_ble_adv_start+0x11e>
    4580:	e024      	b.n	45cc <at_ble_adv_start+0x7c>
    4582:	2c04      	cmp	r4, #4
    4584:	d873      	bhi.n	466e <at_ble_adv_start+0x11e>
    4586:	2380      	movs	r3, #128	; 0x80
    4588:	01db      	lsls	r3, r3, #7
    458a:	429d      	cmp	r5, r3
    458c:	d86f      	bhi.n	466e <at_ble_adv_start+0x11e>
    458e:	2c00      	cmp	r4, #0
    4590:	d102      	bne.n	4598 <at_ble_adv_start+0x48>
    4592:	2d1f      	cmp	r5, #31
    4594:	d96b      	bls.n	466e <at_ble_adv_start+0x11e>
    4596:	e003      	b.n	45a0 <at_ble_adv_start+0x50>
    4598:	2d9f      	cmp	r5, #159	; 0x9f
    459a:	d801      	bhi.n	45a0 <at_ble_adv_start+0x50>
    459c:	2c01      	cmp	r4, #1
    459e:	d166      	bne.n	466e <at_ble_adv_start+0x11e>
    45a0:	2f00      	cmp	r7, #0
    45a2:	d009      	beq.n	45b8 <at_ble_adv_start+0x68>
    45a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    45a6:	20cf      	movs	r0, #207	; 0xcf
    45a8:	3b01      	subs	r3, #1
    45aa:	2b01      	cmp	r3, #1
    45ac:	d95f      	bls.n	466e <at_ble_adv_start+0x11e>
    45ae:	2c01      	cmp	r4, #1
    45b0:	d102      	bne.n	45b8 <at_ble_adv_start+0x68>
    45b2:	2d00      	cmp	r5, #0
    45b4:	d100      	bne.n	45b8 <at_ble_adv_start+0x68>
    45b6:	3520      	adds	r5, #32
    45b8:	4b2f      	ldr	r3, [pc, #188]	; (4678 <at_ble_adv_start+0x128>)
    45ba:	4798      	blx	r3
    45bc:	1c01      	adds	r1, r0, #0
    45be:	2e00      	cmp	r6, #0
    45c0:	d043      	beq.n	464a <at_ble_adv_start+0xfa>
    45c2:	7833      	ldrb	r3, [r6, #0]
    45c4:	1e60      	subs	r0, r4, #1
    45c6:	2b00      	cmp	r3, #0
    45c8:	d109      	bne.n	45de <at_ble_adv_start+0x8e>
    45ca:	e03b      	b.n	4644 <at_ble_adv_start+0xf4>
    45cc:	2380      	movs	r3, #128	; 0x80
    45ce:	01db      	lsls	r3, r3, #7
    45d0:	429d      	cmp	r5, r3
    45d2:	d84c      	bhi.n	466e <at_ble_adv_start+0x11e>
    45d4:	2e00      	cmp	r6, #0
    45d6:	d04a      	beq.n	466e <at_ble_adv_start+0x11e>
    45d8:	2f00      	cmp	r7, #0
    45da:	d1e3      	bne.n	45a4 <at_ble_adv_start+0x54>
    45dc:	e02b      	b.n	4636 <at_ble_adv_start+0xe6>
    45de:	2301      	movs	r3, #1
    45e0:	2803      	cmp	r0, #3
    45e2:	d93a      	bls.n	465a <at_ble_adv_start+0x10a>
    45e4:	200d      	movs	r0, #13
    45e6:	1c72      	adds	r2, r6, #1
    45e8:	e002      	b.n	45f0 <at_ble_adv_start+0xa0>
    45ea:	200e      	movs	r0, #14
    45ec:	1e32      	subs	r2, r6, #0
    45ee:	d1fa      	bne.n	45e6 <at_ble_adv_start+0x96>
    45f0:	4c20      	ldr	r4, [pc, #128]	; (4674 <at_ble_adv_start+0x124>)
    45f2:	3474      	adds	r4, #116	; 0x74
    45f4:	7826      	ldrb	r6, [r4, #0]
    45f6:	2407      	movs	r4, #7
    45f8:	2e00      	cmp	r6, #0
    45fa:	d000      	beq.n	45fe <at_ble_adv_start+0xae>
    45fc:	1c34      	adds	r4, r6, #0
    45fe:	9200      	str	r2, [sp, #0]
    4600:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4602:	9403      	str	r4, [sp, #12]
    4604:	9204      	str	r2, [sp, #16]
    4606:	4a1b      	ldr	r2, [pc, #108]	; (4674 <at_ble_adv_start+0x124>)
    4608:	9501      	str	r5, [sp, #4]
    460a:	9502      	str	r5, [sp, #8]
    460c:	9705      	str	r7, [sp, #20]
    460e:	3272      	adds	r2, #114	; 0x72
    4610:	7812      	ldrb	r2, [r2, #0]
    4612:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    4614:	9206      	str	r2, [sp, #24]
    4616:	4a19      	ldr	r2, [pc, #100]	; (467c <at_ble_adv_start+0x12c>)
    4618:	9207      	str	r2, [sp, #28]
    461a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    461c:	9208      	str	r2, [sp, #32]
    461e:	4a18      	ldr	r2, [pc, #96]	; (4680 <at_ble_adv_start+0x130>)
    4620:	9209      	str	r2, [sp, #36]	; 0x24
    4622:	2264      	movs	r2, #100	; 0x64
    4624:	4362      	muls	r2, r4
    4626:	b292      	uxth	r2, r2
    4628:	920a      	str	r2, [sp, #40]	; 0x28
    462a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    462c:	4c15      	ldr	r4, [pc, #84]	; (4684 <at_ble_adv_start+0x134>)
    462e:	920b      	str	r2, [sp, #44]	; 0x2c
    4630:	4a15      	ldr	r2, [pc, #84]	; (4688 <at_ble_adv_start+0x138>)
    4632:	47a0      	blx	r4
    4634:	e01b      	b.n	466e <at_ble_adv_start+0x11e>
    4636:	2d00      	cmp	r5, #0
    4638:	d1be      	bne.n	45b8 <at_ble_adv_start+0x68>
    463a:	4b0f      	ldr	r3, [pc, #60]	; (4678 <at_ble_adv_start+0x128>)
    463c:	4798      	blx	r3
    463e:	2520      	movs	r5, #32
    4640:	1c01      	adds	r1, r0, #0
    4642:	e7be      	b.n	45c2 <at_ble_adv_start+0x72>
    4644:	2803      	cmp	r0, #3
    4646:	d8cd      	bhi.n	45e4 <at_ble_adv_start+0x94>
    4648:	e006      	b.n	4658 <at_ble_adv_start+0x108>
    464a:	1e60      	subs	r0, r4, #1
    464c:	2803      	cmp	r0, #3
    464e:	d903      	bls.n	4658 <at_ble_adv_start+0x108>
    4650:	1c33      	adds	r3, r6, #0
    4652:	200d      	movs	r0, #13
    4654:	1c32      	adds	r2, r6, #0
    4656:	e7cb      	b.n	45f0 <at_ble_adv_start+0xa0>
    4658:	2300      	movs	r3, #0
    465a:	f002 fdfd 	bl	7258 <__gnu_thumb1_case_sqi>
    465e:	06c6      	.short	0x06c6
    4660:	0204      	.short	0x0204
    4662:	200f      	movs	r0, #15
    4664:	e7c2      	b.n	45ec <at_ble_adv_start+0x9c>
    4666:	2200      	movs	r2, #0
    4668:	920c      	str	r2, [sp, #48]	; 0x30
    466a:	200c      	movs	r0, #12
    466c:	e7be      	b.n	45ec <at_ble_adv_start+0x9c>
    466e:	b011      	add	sp, #68	; 0x44
    4670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4672:	46c0      	nop			; (mov r8, r8)
    4674:	20001948 	.word	0x20001948
    4678:	000069b1 	.word	0x000069b1
    467c:	2000197c 	.word	0x2000197c
    4680:	2000199b 	.word	0x2000199b
    4684:	0000689d 	.word	0x0000689d
    4688:	00003a98 	.word	0x00003a98

0000468c <at_ble_scan_stop>:
    468c:	b510      	push	{r4, lr}
    468e:	4b05      	ldr	r3, [pc, #20]	; (46a4 <at_ble_scan_stop+0x18>)
    4690:	4798      	blx	r3
    4692:	1e04      	subs	r4, r0, #0
    4694:	d103      	bne.n	469e <at_ble_scan_stop+0x12>
    4696:	20d1      	movs	r0, #209	; 0xd1
    4698:	4b03      	ldr	r3, [pc, #12]	; (46a8 <at_ble_scan_stop+0x1c>)
    469a:	0100      	lsls	r0, r0, #4
    469c:	4798      	blx	r3
    469e:	1c20      	adds	r0, r4, #0
    46a0:	bd10      	pop	{r4, pc}
    46a2:	46c0      	nop			; (mov r8, r8)
    46a4:	000066a9 	.word	0x000066a9
    46a8:	000040f5 	.word	0x000040f5

000046ac <at_ble_disconnect>:
    46ac:	b538      	push	{r3, r4, r5, lr}
    46ae:	1c04      	adds	r4, r0, #0
    46b0:	4b04      	ldr	r3, [pc, #16]	; (46c4 <at_ble_disconnect+0x18>)
    46b2:	1c08      	adds	r0, r1, #0
    46b4:	1c21      	adds	r1, r4, #0
    46b6:	4798      	blx	r3
    46b8:	1c05      	adds	r5, r0, #0
    46ba:	4b03      	ldr	r3, [pc, #12]	; (46c8 <at_ble_disconnect+0x1c>)
    46bc:	1c20      	adds	r0, r4, #0
    46be:	4798      	blx	r3
    46c0:	1c28      	adds	r0, r5, #0
    46c2:	bd38      	pop	{r3, r4, r5, pc}
    46c4:	00005c85 	.word	0x00005c85
    46c8:	00004139 	.word	0x00004139

000046cc <at_ble_conn_update_reply>:
    46cc:	b570      	push	{r4, r5, r6, lr}
    46ce:	4c09      	ldr	r4, [pc, #36]	; (46f4 <at_ble_conn_update_reply+0x28>)
    46d0:	47a0      	blx	r4
    46d2:	1e04      	subs	r4, r0, #0
    46d4:	d00b      	beq.n	46ee <at_ble_conn_update_reply+0x22>
    46d6:	22d0      	movs	r2, #208	; 0xd0
    46d8:	4d07      	ldr	r5, [pc, #28]	; (46f8 <at_ble_conn_update_reply+0x2c>)
    46da:	4908      	ldr	r1, [pc, #32]	; (46fc <at_ble_conn_update_reply+0x30>)
    46dc:	4b08      	ldr	r3, [pc, #32]	; (4700 <at_ble_conn_update_reply+0x34>)
    46de:	4809      	ldr	r0, [pc, #36]	; (4704 <at_ble_conn_update_reply+0x38>)
    46e0:	0092      	lsls	r2, r2, #2
    46e2:	682e      	ldr	r6, [r5, #0]
    46e4:	47b0      	blx	r6
    46e6:	682b      	ldr	r3, [r5, #0]
    46e8:	4807      	ldr	r0, [pc, #28]	; (4708 <at_ble_conn_update_reply+0x3c>)
    46ea:	1c21      	adds	r1, r4, #0
    46ec:	4798      	blx	r3
    46ee:	1c20      	adds	r0, r4, #0
    46f0:	bd70      	pop	{r4, r5, r6, pc}
    46f2:	46c0      	nop			; (mov r8, r8)
    46f4:	000061a9 	.word	0x000061a9
    46f8:	20000030 	.word	0x20000030
    46fc:	00009498 	.word	0x00009498
    4700:	00009470 	.word	0x00009470
    4704:	000093e1 	.word	0x000093e1
    4708:	000094d6 	.word	0x000094d6

0000470c <at_ble_random_address_resolve>:
    470c:	b510      	push	{r4, lr}
    470e:	23cf      	movs	r3, #207	; 0xcf
    4710:	2800      	cmp	r0, #0
    4712:	d00a      	beq.n	472a <at_ble_random_address_resolve+0x1e>
    4714:	2900      	cmp	r1, #0
    4716:	d008      	beq.n	472a <at_ble_random_address_resolve+0x1e>
    4718:	2a00      	cmp	r2, #0
    471a:	d006      	beq.n	472a <at_ble_random_address_resolve+0x1e>
    471c:	780c      	ldrb	r4, [r1, #0]
    471e:	2c02      	cmp	r4, #2
    4720:	d103      	bne.n	472a <at_ble_random_address_resolve+0x1e>
    4722:	4b03      	ldr	r3, [pc, #12]	; (4730 <at_ble_random_address_resolve+0x24>)
    4724:	3101      	adds	r1, #1
    4726:	4798      	blx	r3
    4728:	2300      	movs	r3, #0
    472a:	1c18      	adds	r0, r3, #0
    472c:	bd10      	pop	{r4, pc}
    472e:	46c0      	nop			; (mov r8, r8)
    4730:	00006a51 	.word	0x00006a51

00004734 <at_ble_uuid_len2type>:
    4734:	1e83      	subs	r3, r0, #2
    4736:	b2db      	uxtb	r3, r3
    4738:	2003      	movs	r0, #3
    473a:	2b0e      	cmp	r3, #14
    473c:	d801      	bhi.n	4742 <at_ble_uuid_len2type+0xe>
    473e:	4a01      	ldr	r2, [pc, #4]	; (4744 <at_ble_uuid_len2type+0x10>)
    4740:	5cd0      	ldrb	r0, [r2, r3]
    4742:	4770      	bx	lr
    4744:	00009489 	.word	0x00009489

00004748 <db_searchATT>:
    4748:	b570      	push	{r4, r5, r6, lr}
    474a:	1c05      	adds	r5, r0, #0
    474c:	2400      	movs	r4, #0
    474e:	4b0c      	ldr	r3, [pc, #48]	; (4780 <db_searchATT+0x38>)
    4750:	6819      	ldr	r1, [r3, #0]
    4752:	4b0c      	ldr	r3, [pc, #48]	; (4784 <db_searchATT+0x3c>)
    4754:	681e      	ldr	r6, [r3, #0]
    4756:	428c      	cmp	r4, r1
    4758:	dc10      	bgt.n	477c <db_searchATT+0x34>
    475a:	200c      	movs	r0, #12
    475c:	1863      	adds	r3, r4, r1
    475e:	0fda      	lsrs	r2, r3, #31
    4760:	18d3      	adds	r3, r2, r3
    4762:	1c02      	adds	r2, r0, #0
    4764:	105b      	asrs	r3, r3, #1
    4766:	435a      	muls	r2, r3
    4768:	18b0      	adds	r0, r6, r2
    476a:	8802      	ldrh	r2, [r0, #0]
    476c:	42aa      	cmp	r2, r5
    476e:	d201      	bcs.n	4774 <db_searchATT+0x2c>
    4770:	1e59      	subs	r1, r3, #1
    4772:	e7f0      	b.n	4756 <db_searchATT+0xe>
    4774:	42aa      	cmp	r2, r5
    4776:	d902      	bls.n	477e <db_searchATT+0x36>
    4778:	1c5c      	adds	r4, r3, #1
    477a:	e7ec      	b.n	4756 <db_searchATT+0xe>
    477c:	2000      	movs	r0, #0
    477e:	bd70      	pop	{r4, r5, r6, pc}
    4780:	200006e4 	.word	0x200006e4
    4784:	200006dc 	.word	0x200006dc

00004788 <at_ble_read_authorize_reply.part.2>:
    4788:	b537      	push	{r0, r1, r2, r4, r5, lr}
    478a:	4b09      	ldr	r3, [pc, #36]	; (47b0 <at_ble_read_authorize_reply.part.2+0x28>)
    478c:	1c05      	adds	r5, r0, #0
    478e:	1c08      	adds	r0, r1, #0
    4790:	1c0c      	adds	r4, r1, #0
    4792:	4798      	blx	r3
    4794:	2800      	cmp	r0, #0
    4796:	d009      	beq.n	47ac <at_ble_read_authorize_reply.part.2+0x24>
    4798:	6882      	ldr	r2, [r0, #8]
    479a:	2a00      	cmp	r2, #0
    479c:	d006      	beq.n	47ac <at_ble_read_authorize_reply.part.2+0x24>
    479e:	8883      	ldrh	r3, [r0, #4]
    47a0:	1c29      	adds	r1, r5, #0
    47a2:	9200      	str	r2, [sp, #0]
    47a4:	1c20      	adds	r0, r4, #0
    47a6:	2200      	movs	r2, #0
    47a8:	4c02      	ldr	r4, [pc, #8]	; (47b4 <at_ble_read_authorize_reply.part.2+0x2c>)
    47aa:	47a0      	blx	r4
    47ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    47ae:	46c0      	nop			; (mov r8, r8)
    47b0:	00004749 	.word	0x00004749
    47b4:	00006b55 	.word	0x00006b55

000047b8 <db_init>:
    47b8:	4b08      	ldr	r3, [pc, #32]	; (47dc <db_init+0x24>)
    47ba:	4a09      	ldr	r2, [pc, #36]	; (47e0 <db_init+0x28>)
    47bc:	6018      	str	r0, [r3, #0]
    47be:	084b      	lsrs	r3, r1, #1
    47c0:	6013      	str	r3, [r2, #0]
    47c2:	4a08      	ldr	r2, [pc, #32]	; (47e4 <db_init+0x2c>)
    47c4:	18c3      	adds	r3, r0, r3
    47c6:	6013      	str	r3, [r2, #0]
    47c8:	4a07      	ldr	r2, [pc, #28]	; (47e8 <db_init+0x30>)
    47ca:	1841      	adds	r1, r0, r1
    47cc:	6013      	str	r3, [r2, #0]
    47ce:	2303      	movs	r3, #3
    47d0:	3103      	adds	r1, #3
    47d2:	4399      	bics	r1, r3
    47d4:	4b05      	ldr	r3, [pc, #20]	; (47ec <db_init+0x34>)
    47d6:	3904      	subs	r1, #4
    47d8:	6019      	str	r1, [r3, #0]
    47da:	4770      	bx	lr
    47dc:	200006e8 	.word	0x200006e8
    47e0:	200006d4 	.word	0x200006d4
    47e4:	200006d8 	.word	0x200006d8
    47e8:	200006e0 	.word	0x200006e0
    47ec:	200006dc 	.word	0x200006dc

000047f0 <at_ble_characteristic_value_set>:
    47f0:	b570      	push	{r4, r5, r6, lr}
    47f2:	4b0b      	ldr	r3, [pc, #44]	; (4820 <at_ble_characteristic_value_set+0x30>)
    47f4:	1c06      	adds	r6, r0, #0
    47f6:	1c0c      	adds	r4, r1, #0
    47f8:	1c15      	adds	r5, r2, #0
    47fa:	4798      	blx	r3
    47fc:	2800      	cmp	r0, #0
    47fe:	d008      	beq.n	4812 <at_ble_characteristic_value_set+0x22>
    4800:	6880      	ldr	r0, [r0, #8]
    4802:	2800      	cmp	r0, #0
    4804:	d005      	beq.n	4812 <at_ble_characteristic_value_set+0x22>
    4806:	1c21      	adds	r1, r4, #0
    4808:	1c2a      	adds	r2, r5, #0
    480a:	4b06      	ldr	r3, [pc, #24]	; (4824 <at_ble_characteristic_value_set+0x34>)
    480c:	4798      	blx	r3
    480e:	2000      	movs	r0, #0
    4810:	e004      	b.n	481c <at_ble_characteristic_value_set+0x2c>
    4812:	1c30      	adds	r0, r6, #0
    4814:	1c29      	adds	r1, r5, #0
    4816:	1c22      	adds	r2, r4, #0
    4818:	4b03      	ldr	r3, [pc, #12]	; (4828 <at_ble_characteristic_value_set+0x38>)
    481a:	4798      	blx	r3
    481c:	bd70      	pop	{r4, r5, r6, pc}
    481e:	46c0      	nop			; (mov r8, r8)
    4820:	00004749 	.word	0x00004749
    4824:	000074b7 	.word	0x000074b7
    4828:	00006f25 	.word	0x00006f25

0000482c <at_ble_characteristic_value_get>:
    482c:	b570      	push	{r4, r5, r6, lr}
    482e:	4b0c      	ldr	r3, [pc, #48]	; (4860 <at_ble_characteristic_value_get+0x34>)
    4830:	1c06      	adds	r6, r0, #0
    4832:	1c0c      	adds	r4, r1, #0
    4834:	1c15      	adds	r5, r2, #0
    4836:	4798      	blx	r3
    4838:	2800      	cmp	r0, #0
    483a:	d00b      	beq.n	4854 <at_ble_characteristic_value_get+0x28>
    483c:	6883      	ldr	r3, [r0, #8]
    483e:	2b00      	cmp	r3, #0
    4840:	d008      	beq.n	4854 <at_ble_characteristic_value_get+0x28>
    4842:	8883      	ldrh	r3, [r0, #4]
    4844:	802b      	strh	r3, [r5, #0]
    4846:	8882      	ldrh	r2, [r0, #4]
    4848:	6881      	ldr	r1, [r0, #8]
    484a:	4b06      	ldr	r3, [pc, #24]	; (4864 <at_ble_characteristic_value_get+0x38>)
    484c:	1c20      	adds	r0, r4, #0
    484e:	4798      	blx	r3
    4850:	2000      	movs	r0, #0
    4852:	e004      	b.n	485e <at_ble_characteristic_value_get+0x32>
    4854:	1c30      	adds	r0, r6, #0
    4856:	1c29      	adds	r1, r5, #0
    4858:	1c22      	adds	r2, r4, #0
    485a:	4b03      	ldr	r3, [pc, #12]	; (4868 <at_ble_characteristic_value_get+0x3c>)
    485c:	4798      	blx	r3
    485e:	bd70      	pop	{r4, r5, r6, pc}
    4860:	00004749 	.word	0x00004749
    4864:	000074b7 	.word	0x000074b7
    4868:	00006fad 	.word	0x00006fad

0000486c <at_ble_write_authorize_reply>:
    486c:	b5f0      	push	{r4, r5, r6, r7, lr}
    486e:	b085      	sub	sp, #20
    4870:	1c04      	adds	r4, r0, #0
    4872:	9101      	str	r1, [sp, #4]
    4874:	2900      	cmp	r1, #0
    4876:	d129      	bne.n	48cc <at_ble_write_authorize_reply+0x60>
    4878:	8847      	ldrh	r7, [r0, #2]
    487a:	4b18      	ldr	r3, [pc, #96]	; (48dc <at_ble_write_authorize_reply+0x70>)
    487c:	1c38      	adds	r0, r7, #0
    487e:	1c26      	adds	r6, r4, #0
    4880:	4798      	blx	r3
    4882:	3608      	adds	r6, #8
    4884:	2800      	cmp	r0, #0
    4886:	d009      	beq.n	489c <at_ble_write_authorize_reply+0x30>
    4888:	6880      	ldr	r0, [r0, #8]
    488a:	2800      	cmp	r0, #0
    488c:	d006      	beq.n	489c <at_ble_write_authorize_reply+0x30>
    488e:	88a3      	ldrh	r3, [r4, #4]
    4890:	88e2      	ldrh	r2, [r4, #6]
    4892:	18c0      	adds	r0, r0, r3
    4894:	1c31      	adds	r1, r6, #0
    4896:	4b12      	ldr	r3, [pc, #72]	; (48e0 <at_ble_write_authorize_reply+0x74>)
    4898:	4798      	blx	r3
    489a:	e017      	b.n	48cc <at_ble_write_authorize_reply+0x60>
    489c:	ab02      	add	r3, sp, #8
    489e:	1d9d      	adds	r5, r3, #6
    48a0:	2300      	movs	r3, #0
    48a2:	802b      	strh	r3, [r5, #0]
    48a4:	4b0f      	ldr	r3, [pc, #60]	; (48e4 <at_ble_write_authorize_reply+0x78>)
    48a6:	1c2a      	adds	r2, r5, #0
    48a8:	681b      	ldr	r3, [r3, #0]
    48aa:	1c38      	adds	r0, r7, #0
    48ac:	1c19      	adds	r1, r3, #0
    48ae:	9300      	str	r3, [sp, #0]
    48b0:	4b0d      	ldr	r3, [pc, #52]	; (48e8 <at_ble_write_authorize_reply+0x7c>)
    48b2:	4798      	blx	r3
    48b4:	9b00      	ldr	r3, [sp, #0]
    48b6:	88a0      	ldrh	r0, [r4, #4]
    48b8:	88e2      	ldrh	r2, [r4, #6]
    48ba:	1818      	adds	r0, r3, r0
    48bc:	1c31      	adds	r1, r6, #0
    48be:	4b08      	ldr	r3, [pc, #32]	; (48e0 <at_ble_write_authorize_reply+0x74>)
    48c0:	4798      	blx	r3
    48c2:	8860      	ldrh	r0, [r4, #2]
    48c4:	882a      	ldrh	r2, [r5, #0]
    48c6:	9900      	ldr	r1, [sp, #0]
    48c8:	4b08      	ldr	r3, [pc, #32]	; (48ec <at_ble_write_authorize_reply+0x80>)
    48ca:	4798      	blx	r3
    48cc:	8860      	ldrh	r0, [r4, #2]
    48ce:	8821      	ldrh	r1, [r4, #0]
    48d0:	9a01      	ldr	r2, [sp, #4]
    48d2:	4b07      	ldr	r3, [pc, #28]	; (48f0 <at_ble_write_authorize_reply+0x84>)
    48d4:	4798      	blx	r3
    48d6:	2000      	movs	r0, #0
    48d8:	b005      	add	sp, #20
    48da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48dc:	00004749 	.word	0x00004749
    48e0:	000074b7 	.word	0x000074b7
    48e4:	00009714 	.word	0x00009714
    48e8:	0000482d 	.word	0x0000482d
    48ec:	000047f1 	.word	0x000047f1
    48f0:	00006bc9 	.word	0x00006bc9

000048f4 <gatts_handle_read_req>:
    48f4:	b538      	push	{r3, r4, r5, lr}
    48f6:	1c0c      	adds	r4, r1, #0
    48f8:	4b07      	ldr	r3, [pc, #28]	; (4918 <gatts_handle_read_req+0x24>)
    48fa:	4798      	blx	r3
    48fc:	8865      	ldrh	r5, [r4, #2]
    48fe:	4b07      	ldr	r3, [pc, #28]	; (491c <gatts_handle_read_req+0x28>)
    4900:	1c28      	adds	r0, r5, #0
    4902:	4798      	blx	r3
    4904:	7883      	ldrb	r3, [r0, #2]
    4906:	2026      	movs	r0, #38	; 0x26
    4908:	07db      	lsls	r3, r3, #31
    490a:	d404      	bmi.n	4916 <gatts_handle_read_req+0x22>
    490c:	8820      	ldrh	r0, [r4, #0]
    490e:	1c29      	adds	r1, r5, #0
    4910:	4b03      	ldr	r3, [pc, #12]	; (4920 <gatts_handle_read_req+0x2c>)
    4912:	4798      	blx	r3
    4914:	203a      	movs	r0, #58	; 0x3a
    4916:	bd38      	pop	{r3, r4, r5, pc}
    4918:	00006b05 	.word	0x00006b05
    491c:	00004749 	.word	0x00004749
    4920:	00004789 	.word	0x00004789

00004924 <gatts_handle_att_info_req>:
    4924:	b538      	push	{r3, r4, r5, lr}
    4926:	1c0d      	adds	r5, r1, #0
    4928:	4b0a      	ldr	r3, [pc, #40]	; (4954 <gatts_handle_att_info_req+0x30>)
    492a:	1c14      	adds	r4, r2, #0
    492c:	4798      	blx	r3
    492e:	882d      	ldrh	r5, [r5, #0]
    4930:	4b09      	ldr	r3, [pc, #36]	; (4958 <gatts_handle_att_info_req+0x34>)
    4932:	1c28      	adds	r0, r5, #0
    4934:	4798      	blx	r3
    4936:	0a22      	lsrs	r2, r4, #8
    4938:	1c03      	adds	r3, r0, #0
    493a:	4c08      	ldr	r4, [pc, #32]	; (495c <gatts_handle_att_info_req+0x38>)
    493c:	b291      	uxth	r1, r2
    493e:	2800      	cmp	r0, #0
    4940:	d003      	beq.n	494a <gatts_handle_att_info_req+0x26>
    4942:	8882      	ldrh	r2, [r0, #4]
    4944:	2300      	movs	r3, #0
    4946:	1c28      	adds	r0, r5, #0
    4948:	e001      	b.n	494e <gatts_handle_att_info_req+0x2a>
    494a:	1c28      	adds	r0, r5, #0
    494c:	2201      	movs	r2, #1
    494e:	47a0      	blx	r4
    4950:	203a      	movs	r0, #58	; 0x3a
    4952:	bd38      	pop	{r3, r4, r5, pc}
    4954:	00006b49 	.word	0x00006b49
    4958:	00004749 	.word	0x00004749
    495c:	00006c11 	.word	0x00006c11

00004960 <gatts_handle_write_req>:
    4960:	b510      	push	{r4, lr}
    4962:	1c14      	adds	r4, r2, #0
    4964:	4b07      	ldr	r3, [pc, #28]	; (4984 <gatts_handle_write_req+0x24>)
    4966:	4798      	blx	r3
    4968:	4b07      	ldr	r3, [pc, #28]	; (4988 <gatts_handle_write_req+0x28>)
    496a:	8860      	ldrh	r0, [r4, #2]
    496c:	4798      	blx	r3
    496e:	2302      	movs	r3, #2
    4970:	7881      	ldrb	r1, [r0, #2]
    4972:	2022      	movs	r0, #34	; 0x22
    4974:	4019      	ands	r1, r3
    4976:	d103      	bne.n	4980 <gatts_handle_write_req+0x20>
    4978:	1c20      	adds	r0, r4, #0
    497a:	4b04      	ldr	r3, [pc, #16]	; (498c <gatts_handle_write_req+0x2c>)
    497c:	4798      	blx	r3
    497e:	201f      	movs	r0, #31
    4980:	bd10      	pop	{r4, pc}
    4982:	46c0      	nop			; (mov r8, r8)
    4984:	00006b11 	.word	0x00006b11
    4988:	00004749 	.word	0x00004749
    498c:	0000486d 	.word	0x0000486d

00004990 <interface_event_timeout_timer_callback>:
    4990:	2201      	movs	r2, #1
    4992:	4b01      	ldr	r3, [pc, #4]	; (4998 <interface_event_timeout_timer_callback+0x8>)
    4994:	701a      	strb	r2, [r3, #0]
    4996:	4770      	bx	lr
    4998:	200006fa 	.word	0x200006fa

0000499c <interface_create_timer>:
    499c:	2200      	movs	r2, #0
    499e:	b510      	push	{r4, lr}
    49a0:	230c      	movs	r3, #12
    49a2:	4353      	muls	r3, r2
    49a4:	4907      	ldr	r1, [pc, #28]	; (49c4 <interface_create_timer+0x28>)
    49a6:	585c      	ldr	r4, [r3, r1]
    49a8:	2c00      	cmp	r4, #0
    49aa:	d106      	bne.n	49ba <interface_create_timer+0x1e>
    49ac:	2201      	movs	r2, #1
    49ae:	505a      	str	r2, [r3, r1]
    49b0:	18cb      	adds	r3, r1, r3
    49b2:	6098      	str	r0, [r3, #8]
    49b4:	605c      	str	r4, [r3, #4]
    49b6:	1c18      	adds	r0, r3, #0
    49b8:	e003      	b.n	49c2 <interface_create_timer+0x26>
    49ba:	3201      	adds	r2, #1
    49bc:	2a04      	cmp	r2, #4
    49be:	d1ef      	bne.n	49a0 <interface_create_timer+0x4>
    49c0:	2000      	movs	r0, #0
    49c2:	bd10      	pop	{r4, pc}
    49c4:	200006fc 	.word	0x200006fc

000049c8 <interface_timer_callback>:
    49c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    49ca:	4f17      	ldr	r7, [pc, #92]	; (4a28 <interface_timer_callback+0x60>)
    49cc:	4e17      	ldr	r6, [pc, #92]	; (4a2c <interface_timer_callback+0x64>)
    49ce:	683b      	ldr	r3, [r7, #0]
    49d0:	6830      	ldr	r0, [r6, #0]
    49d2:	689b      	ldr	r3, [r3, #8]
    49d4:	2101      	movs	r1, #1
    49d6:	4798      	blx	r3
    49d8:	2300      	movs	r3, #0
    49da:	4d15      	ldr	r5, [pc, #84]	; (4a30 <interface_timer_callback+0x68>)
    49dc:	702b      	strb	r3, [r5, #0]
    49de:	4b15      	ldr	r3, [pc, #84]	; (4a34 <interface_timer_callback+0x6c>)
    49e0:	1d1c      	adds	r4, r3, #4
    49e2:	3334      	adds	r3, #52	; 0x34
    49e4:	9301      	str	r3, [sp, #4]
    49e6:	1f23      	subs	r3, r4, #4
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	2b01      	cmp	r3, #1
    49ec:	d10f      	bne.n	4a0e <interface_timer_callback+0x46>
    49ee:	6823      	ldr	r3, [r4, #0]
    49f0:	2b00      	cmp	r3, #0
    49f2:	d00c      	beq.n	4a0e <interface_timer_callback+0x46>
    49f4:	3b01      	subs	r3, #1
    49f6:	6023      	str	r3, [r4, #0]
    49f8:	2b00      	cmp	r3, #0
    49fa:	d103      	bne.n	4a04 <interface_timer_callback+0x3c>
    49fc:	6863      	ldr	r3, [r4, #4]
    49fe:	2b00      	cmp	r3, #0
    4a00:	d000      	beq.n	4a04 <interface_timer_callback+0x3c>
    4a02:	4798      	blx	r3
    4a04:	6823      	ldr	r3, [r4, #0]
    4a06:	2b00      	cmp	r3, #0
    4a08:	d001      	beq.n	4a0e <interface_timer_callback+0x46>
    4a0a:	2301      	movs	r3, #1
    4a0c:	702b      	strb	r3, [r5, #0]
    4a0e:	9b01      	ldr	r3, [sp, #4]
    4a10:	340c      	adds	r4, #12
    4a12:	429c      	cmp	r4, r3
    4a14:	d1e7      	bne.n	49e6 <interface_timer_callback+0x1e>
    4a16:	782b      	ldrb	r3, [r5, #0]
    4a18:	2b00      	cmp	r3, #0
    4a1a:	d103      	bne.n	4a24 <interface_timer_callback+0x5c>
    4a1c:	683b      	ldr	r3, [r7, #0]
    4a1e:	6830      	ldr	r0, [r6, #0]
    4a20:	68db      	ldr	r3, [r3, #12]
    4a22:	4798      	blx	r3
    4a24:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4a26:	46c0      	nop			; (mov r8, r8)
    4a28:	20000758 	.word	0x20000758
    4a2c:	20000968 	.word	0x20000968
    4a30:	2000095e 	.word	0x2000095e
    4a34:	200006fc 	.word	0x200006fc

00004a38 <interface_start_timer.part.1>:
    4a38:	b508      	push	{r3, lr}
    4a3a:	4b05      	ldr	r3, [pc, #20]	; (4a50 <interface_start_timer.part.1+0x18>)
    4a3c:	4a05      	ldr	r2, [pc, #20]	; (4a54 <interface_start_timer.part.1+0x1c>)
    4a3e:	681b      	ldr	r3, [r3, #0]
    4a40:	6810      	ldr	r0, [r2, #0]
    4a42:	689b      	ldr	r3, [r3, #8]
    4a44:	2101      	movs	r1, #1
    4a46:	4798      	blx	r3
    4a48:	2201      	movs	r2, #1
    4a4a:	4b03      	ldr	r3, [pc, #12]	; (4a58 <interface_start_timer.part.1+0x20>)
    4a4c:	701a      	strb	r2, [r3, #0]
    4a4e:	bd08      	pop	{r3, pc}
    4a50:	20000758 	.word	0x20000758
    4a54:	20000968 	.word	0x20000968
    4a58:	2000095e 	.word	0x2000095e

00004a5c <interface_stop_timer>:
    4a5c:	b508      	push	{r3, lr}
    4a5e:	2300      	movs	r3, #0
    4a60:	4a0c      	ldr	r2, [pc, #48]	; (4a94 <interface_stop_timer+0x38>)
    4a62:	6043      	str	r3, [r0, #4]
    4a64:	7013      	strb	r3, [r2, #0]
    4a66:	490c      	ldr	r1, [pc, #48]	; (4a98 <interface_stop_timer+0x3c>)
    4a68:	5858      	ldr	r0, [r3, r1]
    4a6a:	2801      	cmp	r0, #1
    4a6c:	d105      	bne.n	4a7a <interface_stop_timer+0x1e>
    4a6e:	18c9      	adds	r1, r1, r3
    4a70:	6849      	ldr	r1, [r1, #4]
    4a72:	2900      	cmp	r1, #0
    4a74:	d001      	beq.n	4a7a <interface_stop_timer+0x1e>
    4a76:	7010      	strb	r0, [r2, #0]
    4a78:	e002      	b.n	4a80 <interface_stop_timer+0x24>
    4a7a:	330c      	adds	r3, #12
    4a7c:	2b30      	cmp	r3, #48	; 0x30
    4a7e:	d1f2      	bne.n	4a66 <interface_stop_timer+0xa>
    4a80:	7813      	ldrb	r3, [r2, #0]
    4a82:	2b00      	cmp	r3, #0
    4a84:	d105      	bne.n	4a92 <interface_stop_timer+0x36>
    4a86:	4b05      	ldr	r3, [pc, #20]	; (4a9c <interface_stop_timer+0x40>)
    4a88:	4a05      	ldr	r2, [pc, #20]	; (4aa0 <interface_stop_timer+0x44>)
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	6810      	ldr	r0, [r2, #0]
    4a8e:	68db      	ldr	r3, [r3, #12]
    4a90:	4798      	blx	r3
    4a92:	bd08      	pop	{r3, pc}
    4a94:	2000095e 	.word	0x2000095e
    4a98:	200006fc 	.word	0x200006fc
    4a9c:	20000758 	.word	0x20000758
    4aa0:	20000968 	.word	0x20000968

00004aa4 <interface_check_and_assert_ext_wakeup>:
    4aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aa6:	4e11      	ldr	r6, [pc, #68]	; (4aec <interface_check_and_assert_ext_wakeup+0x48>)
    4aa8:	1c07      	adds	r7, r0, #0
    4aaa:	7833      	ldrb	r3, [r6, #0]
    4aac:	4c10      	ldr	r4, [pc, #64]	; (4af0 <interface_check_and_assert_ext_wakeup+0x4c>)
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d10e      	bne.n	4ad0 <interface_check_and_assert_ext_wakeup+0x2c>
    4ab2:	2001      	movs	r0, #1
    4ab4:	4d0f      	ldr	r5, [pc, #60]	; (4af4 <interface_check_and_assert_ext_wakeup+0x50>)
    4ab6:	1c01      	adds	r1, r0, #0
    4ab8:	682b      	ldr	r3, [r5, #0]
    4aba:	695b      	ldr	r3, [r3, #20]
    4abc:	4798      	blx	r3
    4abe:	2301      	movs	r3, #1
    4ac0:	7033      	strb	r3, [r6, #0]
    4ac2:	429f      	cmp	r7, r3
    4ac4:	d107      	bne.n	4ad6 <interface_check_and_assert_ext_wakeup+0x32>
    4ac6:	682b      	ldr	r3, [r5, #0]
    4ac8:	2005      	movs	r0, #5
    4aca:	691b      	ldr	r3, [r3, #16]
    4acc:	4798      	blx	r3
    4ace:	e002      	b.n	4ad6 <interface_check_and_assert_ext_wakeup+0x32>
    4ad0:	6820      	ldr	r0, [r4, #0]
    4ad2:	4b09      	ldr	r3, [pc, #36]	; (4af8 <interface_check_and_assert_ext_wakeup+0x54>)
    4ad4:	4798      	blx	r3
    4ad6:	2205      	movs	r2, #5
    4ad8:	6823      	ldr	r3, [r4, #0]
    4ada:	605a      	str	r2, [r3, #4]
    4adc:	4b07      	ldr	r3, [pc, #28]	; (4afc <interface_check_and_assert_ext_wakeup+0x58>)
    4ade:	781b      	ldrb	r3, [r3, #0]
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d101      	bne.n	4ae8 <interface_check_and_assert_ext_wakeup+0x44>
    4ae4:	4b06      	ldr	r3, [pc, #24]	; (4b00 <interface_check_and_assert_ext_wakeup+0x5c>)
    4ae6:	4798      	blx	r3
    4ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4aea:	46c0      	nop			; (mov r8, r8)
    4aec:	20000748 	.word	0x20000748
    4af0:	20000960 	.word	0x20000960
    4af4:	20000758 	.word	0x20000758
    4af8:	00004a5d 	.word	0x00004a5d
    4afc:	2000095e 	.word	0x2000095e
    4b00:	00004a39 	.word	0x00004a39

00004b04 <interface_recv_async>:
    4b04:	b538      	push	{r3, r4, r5, lr}
    4b06:	4b11      	ldr	r3, [pc, #68]	; (4b4c <interface_recv_async+0x48>)
    4b08:	1c04      	adds	r4, r0, #0
    4b0a:	2002      	movs	r0, #2
    4b0c:	4798      	blx	r3
    4b0e:	4b10      	ldr	r3, [pc, #64]	; (4b50 <interface_recv_async+0x4c>)
    4b10:	781a      	ldrb	r2, [r3, #0]
    4b12:	2a02      	cmp	r2, #2
    4b14:	d10d      	bne.n	4b32 <interface_recv_async+0x2e>
    4b16:	4d0f      	ldr	r5, [pc, #60]	; (4b54 <interface_recv_async+0x50>)
    4b18:	4b0f      	ldr	r3, [pc, #60]	; (4b58 <interface_recv_async+0x54>)
    4b1a:	1c28      	adds	r0, r5, #0
    4b1c:	1c21      	adds	r1, r4, #0
    4b1e:	4798      	blx	r3
    4b20:	1c28      	adds	r0, r5, #0
    4b22:	4b0e      	ldr	r3, [pc, #56]	; (4b5c <interface_recv_async+0x58>)
    4b24:	4798      	blx	r3
    4b26:	2800      	cmp	r0, #0
    4b28:	d009      	beq.n	4b3e <interface_recv_async+0x3a>
    4b2a:	2201      	movs	r2, #1
    4b2c:	4b0c      	ldr	r3, [pc, #48]	; (4b60 <interface_recv_async+0x5c>)
    4b2e:	701a      	strb	r2, [r3, #0]
    4b30:	e00a      	b.n	4b48 <interface_recv_async+0x44>
    4b32:	2a00      	cmp	r2, #0
    4b34:	d108      	bne.n	4b48 <interface_recv_async+0x44>
    4b36:	2c5a      	cmp	r4, #90	; 0x5a
    4b38:	d101      	bne.n	4b3e <interface_recv_async+0x3a>
    4b3a:	3201      	adds	r2, #1
    4b3c:	701a      	strb	r2, [r3, #0]
    4b3e:	4b09      	ldr	r3, [pc, #36]	; (4b64 <interface_recv_async+0x60>)
    4b40:	4809      	ldr	r0, [pc, #36]	; (4b68 <interface_recv_async+0x64>)
    4b42:	681b      	ldr	r3, [r3, #0]
    4b44:	69db      	ldr	r3, [r3, #28]
    4b46:	4798      	blx	r3
    4b48:	bd38      	pop	{r3, r4, r5, pc}
    4b4a:	46c0      	nop			; (mov r8, r8)
    4b4c:	00004aa5 	.word	0x00004aa5
    4b50:	20000dec 	.word	0x20000dec
    4b54:	20000734 	.word	0x20000734
    4b58:	00007231 	.word	0x00007231
    4b5c:	000071fb 	.word	0x000071fb
    4b60:	2000096c 	.word	0x2000096c
    4b64:	20000758 	.word	0x20000758
    4b68:	00004b05 	.word	0x00004b05

00004b6c <interface_bus_activity_timer_callback>:
    4b6c:	b510      	push	{r4, lr}
    4b6e:	4b0e      	ldr	r3, [pc, #56]	; (4ba8 <interface_bus_activity_timer_callback+0x3c>)
    4b70:	781b      	ldrb	r3, [r3, #0]
    4b72:	2b01      	cmp	r3, #1
    4b74:	d10d      	bne.n	4b92 <interface_bus_activity_timer_callback+0x26>
    4b76:	4c0d      	ldr	r4, [pc, #52]	; (4bac <interface_bus_activity_timer_callback+0x40>)
    4b78:	4b0d      	ldr	r3, [pc, #52]	; (4bb0 <interface_bus_activity_timer_callback+0x44>)
    4b7a:	6820      	ldr	r0, [r4, #0]
    4b7c:	4798      	blx	r3
    4b7e:	2205      	movs	r2, #5
    4b80:	6823      	ldr	r3, [r4, #0]
    4b82:	605a      	str	r2, [r3, #4]
    4b84:	4b0b      	ldr	r3, [pc, #44]	; (4bb4 <interface_bus_activity_timer_callback+0x48>)
    4b86:	781b      	ldrb	r3, [r3, #0]
    4b88:	2b00      	cmp	r3, #0
    4b8a:	d10b      	bne.n	4ba4 <interface_bus_activity_timer_callback+0x38>
    4b8c:	4b0a      	ldr	r3, [pc, #40]	; (4bb8 <interface_bus_activity_timer_callback+0x4c>)
    4b8e:	4798      	blx	r3
    4b90:	e008      	b.n	4ba4 <interface_bus_activity_timer_callback+0x38>
    4b92:	4b0a      	ldr	r3, [pc, #40]	; (4bbc <interface_bus_activity_timer_callback+0x50>)
    4b94:	2001      	movs	r0, #1
    4b96:	681b      	ldr	r3, [r3, #0]
    4b98:	2100      	movs	r1, #0
    4b9a:	695b      	ldr	r3, [r3, #20]
    4b9c:	4798      	blx	r3
    4b9e:	2200      	movs	r2, #0
    4ba0:	4b07      	ldr	r3, [pc, #28]	; (4bc0 <interface_bus_activity_timer_callback+0x54>)
    4ba2:	701a      	strb	r2, [r3, #0]
    4ba4:	bd10      	pop	{r4, pc}
    4ba6:	46c0      	nop			; (mov r8, r8)
    4ba8:	20000750 	.word	0x20000750
    4bac:	20000960 	.word	0x20000960
    4bb0:	00004a5d 	.word	0x00004a5d
    4bb4:	2000095e 	.word	0x2000095e
    4bb8:	00004a39 	.word	0x00004a39
    4bbc:	20000758 	.word	0x20000758
    4bc0:	20000748 	.word	0x20000748

00004bc4 <interface_handle_received_data>:
    4bc4:	2300      	movs	r3, #0
    4bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bc8:	b087      	sub	sp, #28
    4bca:	9300      	str	r3, [sp, #0]
    4bcc:	9301      	str	r3, [sp, #4]
    4bce:	4c91      	ldr	r4, [pc, #580]	; (4e14 <interface_handle_received_data+0x250>)
    4bd0:	4b91      	ldr	r3, [pc, #580]	; (4e18 <interface_handle_received_data+0x254>)
    4bd2:	1c20      	adds	r0, r4, #0
    4bd4:	4798      	blx	r3
    4bd6:	1e07      	subs	r7, r0, #0
    4bd8:	d000      	beq.n	4bdc <interface_handle_received_data+0x18>
    4bda:	e118      	b.n	4e0e <interface_handle_received_data+0x24a>
    4bdc:	4d8f      	ldr	r5, [pc, #572]	; (4e1c <interface_handle_received_data+0x258>)
    4bde:	682e      	ldr	r6, [r5, #0]
    4be0:	2e01      	cmp	r6, #1
    4be2:	d024      	beq.n	4c2e <interface_handle_received_data+0x6a>
    4be4:	2e00      	cmp	r6, #0
    4be6:	d003      	beq.n	4bf0 <interface_handle_received_data+0x2c>
    4be8:	2e02      	cmp	r6, #2
    4bea:	d100      	bne.n	4bee <interface_handle_received_data+0x2a>
    4bec:	e0af      	b.n	4d4e <interface_handle_received_data+0x18a>
    4bee:	e7ee      	b.n	4bce <interface_handle_received_data+0xa>
    4bf0:	ab04      	add	r3, sp, #16
    4bf2:	1ddf      	adds	r7, r3, #7
    4bf4:	1c20      	adds	r0, r4, #0
    4bf6:	4b8a      	ldr	r3, [pc, #552]	; (4e20 <interface_handle_received_data+0x25c>)
    4bf8:	1c39      	adds	r1, r7, #0
    4bfa:	4798      	blx	r3
    4bfc:	4b89      	ldr	r3, [pc, #548]	; (4e24 <interface_handle_received_data+0x260>)
    4bfe:	781a      	ldrb	r2, [r3, #0]
    4c00:	2a01      	cmp	r2, #1
    4c02:	d105      	bne.n	4c10 <interface_handle_received_data+0x4c>
    4c04:	701e      	strb	r6, [r3, #0]
    4c06:	4b88      	ldr	r3, [pc, #544]	; (4e28 <interface_handle_received_data+0x264>)
    4c08:	4888      	ldr	r0, [pc, #544]	; (4e2c <interface_handle_received_data+0x268>)
    4c0a:	681b      	ldr	r3, [r3, #0]
    4c0c:	69db      	ldr	r3, [r3, #28]
    4c0e:	4798      	blx	r3
    4c10:	783b      	ldrb	r3, [r7, #0]
    4c12:	2b05      	cmp	r3, #5
    4c14:	d101      	bne.n	4c1a <interface_handle_received_data+0x56>
    4c16:	3b04      	subs	r3, #4
    4c18:	e002      	b.n	4c20 <interface_handle_received_data+0x5c>
    4c1a:	2b04      	cmp	r3, #4
    4c1c:	d101      	bne.n	4c22 <interface_handle_received_data+0x5e>
    4c1e:	3b02      	subs	r3, #2
    4c20:	602b      	str	r3, [r5, #0]
    4c22:	2201      	movs	r2, #1
    4c24:	4b82      	ldr	r3, [pc, #520]	; (4e30 <interface_handle_received_data+0x26c>)
    4c26:	601a      	str	r2, [r3, #0]
    4c28:	2200      	movs	r2, #0
    4c2a:	4b82      	ldr	r3, [pc, #520]	; (4e34 <interface_handle_received_data+0x270>)
    4c2c:	e0be      	b.n	4dac <interface_handle_received_data+0x1e8>
    4c2e:	4e80      	ldr	r6, [pc, #512]	; (4e30 <interface_handle_received_data+0x26c>)
    4c30:	6833      	ldr	r3, [r6, #0]
    4c32:	2b01      	cmp	r3, #1
    4c34:	d002      	beq.n	4c3c <interface_handle_received_data+0x78>
    4c36:	2b02      	cmp	r3, #2
    4c38:	d03a      	beq.n	4cb0 <interface_handle_received_data+0xec>
    4c3a:	e7c8      	b.n	4bce <interface_handle_received_data+0xa>
    4c3c:	ab04      	add	r3, sp, #16
    4c3e:	1dd9      	adds	r1, r3, #7
    4c40:	1c20      	adds	r0, r4, #0
    4c42:	4b77      	ldr	r3, [pc, #476]	; (4e20 <interface_handle_received_data+0x25c>)
    4c44:	4798      	blx	r3
    4c46:	4b77      	ldr	r3, [pc, #476]	; (4e24 <interface_handle_received_data+0x260>)
    4c48:	781a      	ldrb	r2, [r3, #0]
    4c4a:	2a01      	cmp	r2, #1
    4c4c:	d105      	bne.n	4c5a <interface_handle_received_data+0x96>
    4c4e:	701f      	strb	r7, [r3, #0]
    4c50:	4b75      	ldr	r3, [pc, #468]	; (4e28 <interface_handle_received_data+0x264>)
    4c52:	4876      	ldr	r0, [pc, #472]	; (4e2c <interface_handle_received_data+0x268>)
    4c54:	681b      	ldr	r3, [r3, #0]
    4c56:	69db      	ldr	r3, [r3, #28]
    4c58:	4798      	blx	r3
    4c5a:	4b76      	ldr	r3, [pc, #472]	; (4e34 <interface_handle_received_data+0x270>)
    4c5c:	a804      	add	r0, sp, #16
    4c5e:	8819      	ldrh	r1, [r3, #0]
    4c60:	79c0      	ldrb	r0, [r0, #7]
    4c62:	1c4a      	adds	r2, r1, #1
    4c64:	b292      	uxth	r2, r2
    4c66:	801a      	strh	r2, [r3, #0]
    4c68:	4b73      	ldr	r3, [pc, #460]	; (4e38 <interface_handle_received_data+0x274>)
    4c6a:	5458      	strb	r0, [r3, r1]
    4c6c:	2a08      	cmp	r2, #8
    4c6e:	d1ae      	bne.n	4bce <interface_handle_received_data+0xa>
    4c70:	79df      	ldrb	r7, [r3, #7]
    4c72:	7819      	ldrb	r1, [r3, #0]
    4c74:	7858      	ldrb	r0, [r3, #1]
    4c76:	791a      	ldrb	r2, [r3, #4]
    4c78:	795c      	ldrb	r4, [r3, #5]
    4c7a:	799b      	ldrb	r3, [r3, #6]
    4c7c:	023f      	lsls	r7, r7, #8
    4c7e:	433b      	orrs	r3, r7
    4c80:	9300      	str	r3, [sp, #0]
    4c82:	d113      	bne.n	4cac <interface_handle_received_data+0xe8>
    4c84:	0206      	lsls	r6, r0, #8
    4c86:	0224      	lsls	r4, r4, #8
    4c88:	430e      	orrs	r6, r1
    4c8a:	4314      	orrs	r4, r2
    4c8c:	1c30      	adds	r0, r6, #0
    4c8e:	1c1a      	adds	r2, r3, #0
    4c90:	1c21      	adds	r1, r4, #0
    4c92:	4b6a      	ldr	r3, [pc, #424]	; (4e3c <interface_handle_received_data+0x278>)
    4c94:	4798      	blx	r3
    4c96:	2800      	cmp	r0, #0
    4c98:	d105      	bne.n	4ca6 <interface_handle_received_data+0xe2>
    4c9a:	9a00      	ldr	r2, [sp, #0]
    4c9c:	1c21      	adds	r1, r4, #0
    4c9e:	1c30      	adds	r0, r6, #0
    4ca0:	1c13      	adds	r3, r2, #0
    4ca2:	4c67      	ldr	r4, [pc, #412]	; (4e40 <interface_handle_received_data+0x27c>)
    4ca4:	47a0      	blx	r4
    4ca6:	2300      	movs	r3, #0
    4ca8:	602b      	str	r3, [r5, #0]
    4caa:	e0ae      	b.n	4e0a <interface_handle_received_data+0x246>
    4cac:	2302      	movs	r3, #2
    4cae:	e070      	b.n	4d92 <interface_handle_received_data+0x1ce>
    4cb0:	4b61      	ldr	r3, [pc, #388]	; (4e38 <interface_handle_received_data+0x274>)
    4cb2:	1c20      	adds	r0, r4, #0
    4cb4:	781a      	ldrb	r2, [r3, #0]
    4cb6:	785d      	ldrb	r5, [r3, #1]
    4cb8:	1c16      	adds	r6, r2, #0
    4cba:	791a      	ldrb	r2, [r3, #4]
    4cbc:	9202      	str	r2, [sp, #8]
    4cbe:	795a      	ldrb	r2, [r3, #5]
    4cc0:	9203      	str	r2, [sp, #12]
    4cc2:	79da      	ldrb	r2, [r3, #7]
    4cc4:	799b      	ldrb	r3, [r3, #6]
    4cc6:	0212      	lsls	r2, r2, #8
    4cc8:	4313      	orrs	r3, r2
    4cca:	9300      	str	r3, [sp, #0]
    4ccc:	ab04      	add	r3, sp, #16
    4cce:	1dd9      	adds	r1, r3, #7
    4cd0:	4b53      	ldr	r3, [pc, #332]	; (4e20 <interface_handle_received_data+0x25c>)
    4cd2:	4798      	blx	r3
    4cd4:	4b53      	ldr	r3, [pc, #332]	; (4e24 <interface_handle_received_data+0x260>)
    4cd6:	781a      	ldrb	r2, [r3, #0]
    4cd8:	2a01      	cmp	r2, #1
    4cda:	d105      	bne.n	4ce8 <interface_handle_received_data+0x124>
    4cdc:	701f      	strb	r7, [r3, #0]
    4cde:	4b52      	ldr	r3, [pc, #328]	; (4e28 <interface_handle_received_data+0x264>)
    4ce0:	4852      	ldr	r0, [pc, #328]	; (4e2c <interface_handle_received_data+0x268>)
    4ce2:	681b      	ldr	r3, [r3, #0]
    4ce4:	69db      	ldr	r3, [r3, #28]
    4ce6:	4798      	blx	r3
    4ce8:	4956      	ldr	r1, [pc, #344]	; (4e44 <interface_handle_received_data+0x280>)
    4cea:	aa04      	add	r2, sp, #16
    4cec:	3207      	adds	r2, #7
    4cee:	880b      	ldrh	r3, [r1, #0]
    4cf0:	7812      	ldrb	r2, [r2, #0]
    4cf2:	4f55      	ldr	r7, [pc, #340]	; (4e48 <interface_handle_received_data+0x284>)
    4cf4:	1c58      	adds	r0, r3, #1
    4cf6:	54fa      	strb	r2, [r7, r3]
    4cf8:	4a54      	ldr	r2, [pc, #336]	; (4e4c <interface_handle_received_data+0x288>)
    4cfa:	9c00      	ldr	r4, [sp, #0]
    4cfc:	8812      	ldrh	r2, [r2, #0]
    4cfe:	b280      	uxth	r0, r0
    4d00:	8008      	strh	r0, [r1, #0]
    4d02:	1a80      	subs	r0, r0, r2
    4d04:	42a0      	cmp	r0, r4
    4d06:	d000      	beq.n	4d0a <interface_handle_received_data+0x146>
    4d08:	e761      	b.n	4bce <interface_handle_received_data+0xa>
    4d0a:	9803      	ldr	r0, [sp, #12]
    4d0c:	022d      	lsls	r5, r5, #8
    4d0e:	0204      	lsls	r4, r0, #8
    4d10:	9802      	ldr	r0, [sp, #8]
    4d12:	4335      	orrs	r5, r6
    4d14:	4304      	orrs	r4, r0
    4d16:	2000      	movs	r0, #0
    4d18:	4684      	mov	ip, r0
    4d1a:	4666      	mov	r6, ip
    4d1c:	483f      	ldr	r0, [pc, #252]	; (4e1c <interface_handle_received_data+0x258>)
    4d1e:	3304      	adds	r3, #4
    4d20:	6006      	str	r6, [r0, #0]
    4d22:	2003      	movs	r0, #3
    4d24:	4383      	bics	r3, r0
    4d26:	800b      	strh	r3, [r1, #0]
    4d28:	18ba      	adds	r2, r7, r2
    4d2a:	4b44      	ldr	r3, [pc, #272]	; (4e3c <interface_handle_received_data+0x278>)
    4d2c:	1c28      	adds	r0, r5, #0
    4d2e:	1c21      	adds	r1, r4, #0
    4d30:	4798      	blx	r3
    4d32:	2301      	movs	r3, #1
    4d34:	9301      	str	r3, [sp, #4]
    4d36:	42b0      	cmp	r0, r6
    4d38:	d000      	beq.n	4d3c <interface_handle_received_data+0x178>
    4d3a:	e748      	b.n	4bce <interface_handle_received_data+0xa>
    4d3c:	4b43      	ldr	r3, [pc, #268]	; (4e4c <interface_handle_received_data+0x288>)
    4d3e:	1c21      	adds	r1, r4, #0
    4d40:	881a      	ldrh	r2, [r3, #0]
    4d42:	1c28      	adds	r0, r5, #0
    4d44:	18ba      	adds	r2, r7, r2
    4d46:	9b00      	ldr	r3, [sp, #0]
    4d48:	4c3d      	ldr	r4, [pc, #244]	; (4e40 <interface_handle_received_data+0x27c>)
    4d4a:	47a0      	blx	r4
    4d4c:	e73f      	b.n	4bce <interface_handle_received_data+0xa>
    4d4e:	4e38      	ldr	r6, [pc, #224]	; (4e30 <interface_handle_received_data+0x26c>)
    4d50:	6833      	ldr	r3, [r6, #0]
    4d52:	2b01      	cmp	r3, #1
    4d54:	d002      	beq.n	4d5c <interface_handle_received_data+0x198>
    4d56:	2b02      	cmp	r3, #2
    4d58:	d02a      	beq.n	4db0 <interface_handle_received_data+0x1ec>
    4d5a:	e738      	b.n	4bce <interface_handle_received_data+0xa>
    4d5c:	ab04      	add	r3, sp, #16
    4d5e:	1ddd      	adds	r5, r3, #7
    4d60:	1c20      	adds	r0, r4, #0
    4d62:	4b2f      	ldr	r3, [pc, #188]	; (4e20 <interface_handle_received_data+0x25c>)
    4d64:	1c29      	adds	r1, r5, #0
    4d66:	4798      	blx	r3
    4d68:	4b2e      	ldr	r3, [pc, #184]	; (4e24 <interface_handle_received_data+0x260>)
    4d6a:	781a      	ldrb	r2, [r3, #0]
    4d6c:	2a01      	cmp	r2, #1
    4d6e:	d105      	bne.n	4d7c <interface_handle_received_data+0x1b8>
    4d70:	701f      	strb	r7, [r3, #0]
    4d72:	4b2d      	ldr	r3, [pc, #180]	; (4e28 <interface_handle_received_data+0x264>)
    4d74:	482d      	ldr	r0, [pc, #180]	; (4e2c <interface_handle_received_data+0x268>)
    4d76:	681b      	ldr	r3, [r3, #0]
    4d78:	69db      	ldr	r3, [r3, #28]
    4d7a:	4798      	blx	r3
    4d7c:	492d      	ldr	r1, [pc, #180]	; (4e34 <interface_handle_received_data+0x270>)
    4d7e:	7828      	ldrb	r0, [r5, #0]
    4d80:	880a      	ldrh	r2, [r1, #0]
    4d82:	1c53      	adds	r3, r2, #1
    4d84:	b29b      	uxth	r3, r3
    4d86:	800b      	strh	r3, [r1, #0]
    4d88:	492b      	ldr	r1, [pc, #172]	; (4e38 <interface_handle_received_data+0x274>)
    4d8a:	5488      	strb	r0, [r1, r2]
    4d8c:	2b02      	cmp	r3, #2
    4d8e:	d000      	beq.n	4d92 <interface_handle_received_data+0x1ce>
    4d90:	e71d      	b.n	4bce <interface_handle_received_data+0xa>
    4d92:	2280      	movs	r2, #128	; 0x80
    4d94:	6033      	str	r3, [r6, #0]
    4d96:	4b2b      	ldr	r3, [pc, #172]	; (4e44 <interface_handle_received_data+0x280>)
    4d98:	00d2      	lsls	r2, r2, #3
    4d9a:	8819      	ldrh	r1, [r3, #0]
    4d9c:	1a52      	subs	r2, r2, r1
    4d9e:	9900      	ldr	r1, [sp, #0]
    4da0:	428a      	cmp	r2, r1
    4da2:	d201      	bcs.n	4da8 <interface_handle_received_data+0x1e4>
    4da4:	2200      	movs	r2, #0
    4da6:	801a      	strh	r2, [r3, #0]
    4da8:	881a      	ldrh	r2, [r3, #0]
    4daa:	4b28      	ldr	r3, [pc, #160]	; (4e4c <interface_handle_received_data+0x288>)
    4dac:	801a      	strh	r2, [r3, #0]
    4dae:	e70e      	b.n	4bce <interface_handle_received_data+0xa>
    4db0:	4b21      	ldr	r3, [pc, #132]	; (4e38 <interface_handle_received_data+0x274>)
    4db2:	1c20      	adds	r0, r4, #0
    4db4:	785e      	ldrb	r6, [r3, #1]
    4db6:	ab04      	add	r3, sp, #16
    4db8:	1dd9      	adds	r1, r3, #7
    4dba:	4b19      	ldr	r3, [pc, #100]	; (4e20 <interface_handle_received_data+0x25c>)
    4dbc:	4798      	blx	r3
    4dbe:	4b19      	ldr	r3, [pc, #100]	; (4e24 <interface_handle_received_data+0x260>)
    4dc0:	781a      	ldrb	r2, [r3, #0]
    4dc2:	2a01      	cmp	r2, #1
    4dc4:	d105      	bne.n	4dd2 <interface_handle_received_data+0x20e>
    4dc6:	701f      	strb	r7, [r3, #0]
    4dc8:	4b17      	ldr	r3, [pc, #92]	; (4e28 <interface_handle_received_data+0x264>)
    4dca:	4818      	ldr	r0, [pc, #96]	; (4e2c <interface_handle_received_data+0x268>)
    4dcc:	681b      	ldr	r3, [r3, #0]
    4dce:	69db      	ldr	r3, [r3, #28]
    4dd0:	4798      	blx	r3
    4dd2:	491c      	ldr	r1, [pc, #112]	; (4e44 <interface_handle_received_data+0x280>)
    4dd4:	aa04      	add	r2, sp, #16
    4dd6:	3207      	adds	r2, #7
    4dd8:	880b      	ldrh	r3, [r1, #0]
    4dda:	7812      	ldrb	r2, [r2, #0]
    4ddc:	481a      	ldr	r0, [pc, #104]	; (4e48 <interface_handle_received_data+0x284>)
    4dde:	1c5c      	adds	r4, r3, #1
    4de0:	54c2      	strb	r2, [r0, r3]
    4de2:	4a1a      	ldr	r2, [pc, #104]	; (4e4c <interface_handle_received_data+0x288>)
    4de4:	b2a4      	uxth	r4, r4
    4de6:	8812      	ldrh	r2, [r2, #0]
    4de8:	800c      	strh	r4, [r1, #0]
    4dea:	1aa4      	subs	r4, r4, r2
    4dec:	42b4      	cmp	r4, r6
    4dee:	d000      	beq.n	4df2 <interface_handle_received_data+0x22e>
    4df0:	e6ed      	b.n	4bce <interface_handle_received_data+0xa>
    4df2:	2400      	movs	r4, #0
    4df4:	1882      	adds	r2, r0, r2
    4df6:	20bb      	movs	r0, #187	; 0xbb
    4df8:	602c      	str	r4, [r5, #0]
    4dfa:	3304      	adds	r3, #4
    4dfc:	3403      	adds	r4, #3
    4dfe:	43a3      	bics	r3, r4
    4e00:	800b      	strh	r3, [r1, #0]
    4e02:	4c0f      	ldr	r4, [pc, #60]	; (4e40 <interface_handle_received_data+0x27c>)
    4e04:	b2b3      	uxth	r3, r6
    4e06:	1c01      	adds	r1, r0, #0
    4e08:	47a0      	blx	r4
    4e0a:	2301      	movs	r3, #1
    4e0c:	e6de      	b.n	4bcc <interface_handle_received_data+0x8>
    4e0e:	9801      	ldr	r0, [sp, #4]
    4e10:	b007      	add	sp, #28
    4e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e14:	20000734 	.word	0x20000734
    4e18:	000071ed 	.word	0x000071ed
    4e1c:	20000730 	.word	0x20000730
    4e20:	0000720d 	.word	0x0000720d
    4e24:	2000096c 	.word	0x2000096c
    4e28:	20000758 	.word	0x20000758
    4e2c:	00004b05 	.word	0x00004b05
    4e30:	200006ec 	.word	0x200006ec
    4e34:	2000075c 	.word	0x2000075c
    4e38:	200006f2 	.word	0x200006f2
    4e3c:	00003a69 	.word	0x00003a69
    4e40:	000039f5 	.word	0x000039f5
    4e44:	2000072c 	.word	0x2000072c
    4e48:	2000096d 	.word	0x2000096d
    4e4c:	200006f0 	.word	0x200006f0

00004e50 <interface_send_sync>:
    4e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e52:	4b0d      	ldr	r3, [pc, #52]	; (4e88 <interface_send_sync+0x38>)
    4e54:	1c07      	adds	r7, r0, #0
    4e56:	2001      	movs	r0, #1
    4e58:	1c0e      	adds	r6, r1, #0
    4e5a:	4798      	blx	r3
    4e5c:	2301      	movs	r3, #1
    4e5e:	4c0b      	ldr	r4, [pc, #44]	; (4e8c <interface_send_sync+0x3c>)
    4e60:	4d0b      	ldr	r5, [pc, #44]	; (4e90 <interface_send_sync+0x40>)
    4e62:	7023      	strb	r3, [r4, #0]
    4e64:	4b0b      	ldr	r3, [pc, #44]	; (4e94 <interface_send_sync+0x44>)
    4e66:	781b      	ldrb	r3, [r3, #0]
    4e68:	2b02      	cmp	r3, #2
    4e6a:	d104      	bne.n	4e76 <interface_send_sync+0x26>
    4e6c:	682b      	ldr	r3, [r5, #0]
    4e6e:	480a      	ldr	r0, [pc, #40]	; (4e98 <interface_send_sync+0x48>)
    4e70:	699b      	ldr	r3, [r3, #24]
    4e72:	2103      	movs	r1, #3
    4e74:	4798      	blx	r3
    4e76:	682b      	ldr	r3, [r5, #0]
    4e78:	1c38      	adds	r0, r7, #0
    4e7a:	1c31      	adds	r1, r6, #0
    4e7c:	699b      	ldr	r3, [r3, #24]
    4e7e:	4798      	blx	r3
    4e80:	2000      	movs	r0, #0
    4e82:	7020      	strb	r0, [r4, #0]
    4e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e86:	46c0      	nop			; (mov r8, r8)
    4e88:	00004aa5 	.word	0x00004aa5
    4e8c:	20000750 	.word	0x20000750
    4e90:	20000758 	.word	0x20000758
    4e94:	20000751 	.word	0x20000751
    4e98:	00009710 	.word	0x00009710

00004e9c <interface_init>:
    4e9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4e9e:	1c03      	adds	r3, r0, #0
    4ea0:	332c      	adds	r3, #44	; 0x2c
    4ea2:	781a      	ldrb	r2, [r3, #0]
    4ea4:	4b3f      	ldr	r3, [pc, #252]	; (4fa4 <interface_init+0x108>)
    4ea6:	1c04      	adds	r4, r0, #0
    4ea8:	701a      	strb	r2, [r3, #0]
    4eaa:	2280      	movs	r2, #128	; 0x80
    4eac:	483e      	ldr	r0, [pc, #248]	; (4fa8 <interface_init+0x10c>)
    4eae:	493f      	ldr	r1, [pc, #252]	; (4fac <interface_init+0x110>)
    4eb0:	0092      	lsls	r2, r2, #2
    4eb2:	4b3f      	ldr	r3, [pc, #252]	; (4fb0 <interface_init+0x114>)
    4eb4:	4798      	blx	r3
    4eb6:	2800      	cmp	r0, #0
    4eb8:	d101      	bne.n	4ebe <interface_init+0x22>
    4eba:	2540      	movs	r5, #64	; 0x40
    4ebc:	e06f      	b.n	4f9e <interface_init+0x102>
    4ebe:	4b3d      	ldr	r3, [pc, #244]	; (4fb4 <interface_init+0x118>)
    4ec0:	6820      	ldr	r0, [r4, #0]
    4ec2:	6861      	ldr	r1, [r4, #4]
    4ec4:	4798      	blx	r3
    4ec6:	1c23      	adds	r3, r4, #0
    4ec8:	4d3b      	ldr	r5, [pc, #236]	; (4fb8 <interface_init+0x11c>)
    4eca:	3308      	adds	r3, #8
    4ecc:	602b      	str	r3, [r5, #0]
    4ece:	68a3      	ldr	r3, [r4, #8]
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d0f2      	beq.n	4eba <interface_init+0x1e>
    4ed4:	6923      	ldr	r3, [r4, #16]
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d0ef      	beq.n	4eba <interface_init+0x1e>
    4eda:	6963      	ldr	r3, [r4, #20]
    4edc:	2b00      	cmp	r3, #0
    4ede:	d0ec      	beq.n	4eba <interface_init+0x1e>
    4ee0:	69a3      	ldr	r3, [r4, #24]
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d0e9      	beq.n	4eba <interface_init+0x1e>
    4ee6:	69e3      	ldr	r3, [r4, #28]
    4ee8:	2b00      	cmp	r3, #0
    4eea:	d0e6      	beq.n	4eba <interface_init+0x1e>
    4eec:	6a22      	ldr	r2, [r4, #32]
    4eee:	2a00      	cmp	r2, #0
    4ef0:	d0e3      	beq.n	4eba <interface_init+0x1e>
    4ef2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4ef4:	2a00      	cmp	r2, #0
    4ef6:	d0e0      	beq.n	4eba <interface_init+0x1e>
    4ef8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4efa:	2a00      	cmp	r2, #0
    4efc:	d104      	bne.n	4f08 <interface_init+0x6c>
    4efe:	2202      	movs	r2, #2
    4f00:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    4f02:	32ff      	adds	r2, #255	; 0xff
    4f04:	4291      	cmp	r1, r2
    4f06:	d0d8      	beq.n	4eba <interface_init+0x1e>
    4f08:	2001      	movs	r0, #1
    4f0a:	1c01      	adds	r1, r0, #0
    4f0c:	4798      	blx	r3
    4f0e:	2000      	movs	r0, #0
    4f10:	682b      	ldr	r3, [r5, #0]
    4f12:	1c01      	adds	r1, r0, #0
    4f14:	695b      	ldr	r3, [r3, #20]
    4f16:	4798      	blx	r3
    4f18:	682b      	ldr	r3, [r5, #0]
    4f1a:	2032      	movs	r0, #50	; 0x32
    4f1c:	691b      	ldr	r3, [r3, #16]
    4f1e:	4798      	blx	r3
    4f20:	682b      	ldr	r3, [r5, #0]
    4f22:	2101      	movs	r1, #1
    4f24:	695b      	ldr	r3, [r3, #20]
    4f26:	2000      	movs	r0, #0
    4f28:	4798      	blx	r3
    4f2a:	682b      	ldr	r3, [r5, #0]
    4f2c:	4823      	ldr	r0, [pc, #140]	; (4fbc <interface_init+0x120>)
    4f2e:	691b      	ldr	r3, [r3, #16]
    4f30:	4798      	blx	r3
    4f32:	682b      	ldr	r3, [r5, #0]
    4f34:	4822      	ldr	r0, [pc, #136]	; (4fc0 <interface_init+0x124>)
    4f36:	69db      	ldr	r3, [r3, #28]
    4f38:	4798      	blx	r3
    4f3a:	682b      	ldr	r3, [r5, #0]
    4f3c:	4821      	ldr	r0, [pc, #132]	; (4fc4 <interface_init+0x128>)
    4f3e:	681b      	ldr	r3, [r3, #0]
    4f40:	4798      	blx	r3
    4f42:	4b21      	ldr	r3, [pc, #132]	; (4fc8 <interface_init+0x12c>)
    4f44:	6018      	str	r0, [r3, #0]
    4f46:	2800      	cmp	r0, #0
    4f48:	d101      	bne.n	4f4e <interface_init+0xb2>
    4f4a:	25e2      	movs	r5, #226	; 0xe2
    4f4c:	e027      	b.n	4f9e <interface_init+0x102>
    4f4e:	4e1f      	ldr	r6, [pc, #124]	; (4fcc <interface_init+0x130>)
    4f50:	4d1f      	ldr	r5, [pc, #124]	; (4fd0 <interface_init+0x134>)
    4f52:	1c30      	adds	r0, r6, #0
    4f54:	47a8      	blx	r5
    4f56:	4b1f      	ldr	r3, [pc, #124]	; (4fd4 <interface_init+0x138>)
    4f58:	6018      	str	r0, [r3, #0]
    4f5a:	2800      	cmp	r0, #0
    4f5c:	d0f5      	beq.n	4f4a <interface_init+0xae>
    4f5e:	1c30      	adds	r0, r6, #0
    4f60:	47a8      	blx	r5
    4f62:	4b1d      	ldr	r3, [pc, #116]	; (4fd8 <interface_init+0x13c>)
    4f64:	6018      	str	r0, [r3, #0]
    4f66:	2800      	cmp	r0, #0
    4f68:	d0ef      	beq.n	4f4a <interface_init+0xae>
    4f6a:	481c      	ldr	r0, [pc, #112]	; (4fdc <interface_init+0x140>)
    4f6c:	47a8      	blx	r5
    4f6e:	4b1c      	ldr	r3, [pc, #112]	; (4fe0 <interface_init+0x144>)
    4f70:	6018      	str	r0, [r3, #0]
    4f72:	2800      	cmp	r0, #0
    4f74:	d0e9      	beq.n	4f4a <interface_init+0xae>
    4f76:	4b1b      	ldr	r3, [pc, #108]	; (4fe4 <interface_init+0x148>)
    4f78:	4798      	blx	r3
    4f7a:	1c20      	adds	r0, r4, #0
    4f7c:	4b1a      	ldr	r3, [pc, #104]	; (4fe8 <interface_init+0x14c>)
    4f7e:	4798      	blx	r3
    4f80:	1e05      	subs	r5, r0, #0
    4f82:	d10c      	bne.n	4f9e <interface_init+0x102>
    4f84:	466b      	mov	r3, sp
    4f86:	2201      	movs	r2, #1
    4f88:	1ddc      	adds	r4, r3, #7
    4f8a:	1c20      	adds	r0, r4, #0
    4f8c:	a902      	add	r1, sp, #8
    4f8e:	4252      	negs	r2, r2
    4f90:	4b16      	ldr	r3, [pc, #88]	; (4fec <interface_init+0x150>)
    4f92:	4798      	blx	r3
    4f94:	2800      	cmp	r0, #0
    4f96:	d102      	bne.n	4f9e <interface_init+0x102>
    4f98:	7823      	ldrb	r3, [r4, #0]
    4f9a:	2b39      	cmp	r3, #57	; 0x39
    4f9c:	d1f2      	bne.n	4f84 <interface_init+0xe8>
    4f9e:	1c28      	adds	r0, r5, #0
    4fa0:	b004      	add	sp, #16
    4fa2:	bd70      	pop	{r4, r5, r6, pc}
    4fa4:	20000751 	.word	0x20000751
    4fa8:	20000734 	.word	0x20000734
    4fac:	2000075e 	.word	0x2000075e
    4fb0:	000071cd 	.word	0x000071cd
    4fb4:	000047b9 	.word	0x000047b9
    4fb8:	20000758 	.word	0x20000758
    4fbc:	00000bb8 	.word	0x00000bb8
    4fc0:	00004b05 	.word	0x00004b05
    4fc4:	000049c9 	.word	0x000049c9
    4fc8:	20000968 	.word	0x20000968
    4fcc:	00004991 	.word	0x00004991
    4fd0:	0000499d 	.word	0x0000499d
    4fd4:	2000074c 	.word	0x2000074c
    4fd8:	20000754 	.word	0x20000754
    4fdc:	00004b6d 	.word	0x00004b6d
    4fe0:	20000960 	.word	0x20000960
    4fe4:	00003a31 	.word	0x00003a31
    4fe8:	00007099 	.word	0x00007099
    4fec:	00003b11 	.word	0x00003b11

00004ff0 <interface_event_timeout_start_timer>:
    4ff0:	b508      	push	{r3, lr}
    4ff2:	4b05      	ldr	r3, [pc, #20]	; (5008 <interface_event_timeout_start_timer+0x18>)
    4ff4:	681b      	ldr	r3, [r3, #0]
    4ff6:	6058      	str	r0, [r3, #4]
    4ff8:	4b04      	ldr	r3, [pc, #16]	; (500c <interface_event_timeout_start_timer+0x1c>)
    4ffa:	781b      	ldrb	r3, [r3, #0]
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d101      	bne.n	5004 <interface_event_timeout_start_timer+0x14>
    5000:	4b03      	ldr	r3, [pc, #12]	; (5010 <interface_event_timeout_start_timer+0x20>)
    5002:	4798      	blx	r3
    5004:	bd08      	pop	{r3, pc}
    5006:	46c0      	nop			; (mov r8, r8)
    5008:	2000074c 	.word	0x2000074c
    500c:	2000095e 	.word	0x2000095e
    5010:	00004a39 	.word	0x00004a39

00005014 <interface_event_timeout_stop_timer>:
    5014:	b508      	push	{r3, lr}
    5016:	4b02      	ldr	r3, [pc, #8]	; (5020 <interface_event_timeout_stop_timer+0xc>)
    5018:	6818      	ldr	r0, [r3, #0]
    501a:	4b02      	ldr	r3, [pc, #8]	; (5024 <interface_event_timeout_stop_timer+0x10>)
    501c:	4798      	blx	r3
    501e:	bd08      	pop	{r3, pc}
    5020:	2000074c 	.word	0x2000074c
    5024:	00004a5d 	.word	0x00004a5d

00005028 <interface_cmd_cmpl_timeout_start_timer>:
    5028:	b508      	push	{r3, lr}
    502a:	4b05      	ldr	r3, [pc, #20]	; (5040 <interface_cmd_cmpl_timeout_start_timer+0x18>)
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	6058      	str	r0, [r3, #4]
    5030:	4b04      	ldr	r3, [pc, #16]	; (5044 <interface_cmd_cmpl_timeout_start_timer+0x1c>)
    5032:	781b      	ldrb	r3, [r3, #0]
    5034:	2b00      	cmp	r3, #0
    5036:	d101      	bne.n	503c <interface_cmd_cmpl_timeout_start_timer+0x14>
    5038:	4b03      	ldr	r3, [pc, #12]	; (5048 <interface_cmd_cmpl_timeout_start_timer+0x20>)
    503a:	4798      	blx	r3
    503c:	bd08      	pop	{r3, pc}
    503e:	46c0      	nop			; (mov r8, r8)
    5040:	20000754 	.word	0x20000754
    5044:	2000095e 	.word	0x2000095e
    5048:	00004a39 	.word	0x00004a39

0000504c <interface_cmd_cmpl_timeout_stop_timer>:
    504c:	b508      	push	{r3, lr}
    504e:	4b02      	ldr	r3, [pc, #8]	; (5058 <interface_cmd_cmpl_timeout_stop_timer+0xc>)
    5050:	6818      	ldr	r0, [r3, #0]
    5052:	4b02      	ldr	r3, [pc, #8]	; (505c <interface_cmd_cmpl_timeout_stop_timer+0x10>)
    5054:	4798      	blx	r3
    5056:	bd08      	pop	{r3, pc}
    5058:	20000754 	.word	0x20000754
    505c:	00004a5d 	.word	0x00004a5d

00005060 <interface_cmd_cmpl_signal>:
    5060:	2201      	movs	r2, #1
    5062:	4b01      	ldr	r3, [pc, #4]	; (5068 <interface_cmd_cmpl_signal+0x8>)
    5064:	701a      	strb	r2, [r3, #0]
    5066:	4770      	bx	lr
    5068:	20000964 	.word	0x20000964

0000506c <interface_event_wait>:
    506c:	b508      	push	{r3, lr}
    506e:	4b0e      	ldr	r3, [pc, #56]	; (50a8 <interface_event_wait+0x3c>)
    5070:	4798      	blx	r3
    5072:	4b0e      	ldr	r3, [pc, #56]	; (50ac <interface_event_wait+0x40>)
    5074:	2800      	cmp	r0, #0
    5076:	d107      	bne.n	5088 <interface_event_wait+0x1c>
    5078:	4a0d      	ldr	r2, [pc, #52]	; (50b0 <interface_event_wait+0x44>)
    507a:	7812      	ldrb	r2, [r2, #0]
    507c:	2a01      	cmp	r2, #1
    507e:	d005      	beq.n	508c <interface_event_wait+0x20>
    5080:	781a      	ldrb	r2, [r3, #0]
    5082:	2a01      	cmp	r2, #1
    5084:	d1f3      	bne.n	506e <interface_event_wait+0x2>
    5086:	e001      	b.n	508c <interface_event_wait+0x20>
    5088:	2801      	cmp	r0, #1
    508a:	d002      	beq.n	5092 <interface_event_wait+0x26>
    508c:	781a      	ldrb	r2, [r3, #0]
    508e:	2a01      	cmp	r2, #1
    5090:	d102      	bne.n	5098 <interface_event_wait+0x2c>
    5092:	2000      	movs	r0, #0
    5094:	7018      	strb	r0, [r3, #0]
    5096:	e005      	b.n	50a4 <interface_event_wait+0x38>
    5098:	4b05      	ldr	r3, [pc, #20]	; (50b0 <interface_event_wait+0x44>)
    509a:	2000      	movs	r0, #0
    509c:	781b      	ldrb	r3, [r3, #0]
    509e:	2b01      	cmp	r3, #1
    50a0:	d100      	bne.n	50a4 <interface_event_wait+0x38>
    50a2:	30d0      	adds	r0, #208	; 0xd0
    50a4:	bd08      	pop	{r3, pc}
    50a6:	46c0      	nop			; (mov r8, r8)
    50a8:	00004bc5 	.word	0x00004bc5
    50ac:	200006cc 	.word	0x200006cc
    50b0:	200006fa 	.word	0x200006fa

000050b4 <interface_cmd_cmpl_wait>:
    50b4:	b538      	push	{r3, r4, r5, lr}
    50b6:	20fa      	movs	r0, #250	; 0xfa
    50b8:	2400      	movs	r4, #0
    50ba:	4b0a      	ldr	r3, [pc, #40]	; (50e4 <interface_cmd_cmpl_wait+0x30>)
    50bc:	0100      	lsls	r0, r0, #4
    50be:	701c      	strb	r4, [r3, #0]
    50c0:	4b09      	ldr	r3, [pc, #36]	; (50e8 <interface_cmd_cmpl_wait+0x34>)
    50c2:	4798      	blx	r3
    50c4:	4b09      	ldr	r3, [pc, #36]	; (50ec <interface_cmd_cmpl_wait+0x38>)
    50c6:	781a      	ldrb	r2, [r3, #0]
    50c8:	1c1d      	adds	r5, r3, #0
    50ca:	2a01      	cmp	r2, #1
    50cc:	d004      	beq.n	50d8 <interface_cmd_cmpl_wait+0x24>
    50ce:	4b08      	ldr	r3, [pc, #32]	; (50f0 <interface_cmd_cmpl_wait+0x3c>)
    50d0:	4798      	blx	r3
    50d2:	1e04      	subs	r4, r0, #0
    50d4:	2cd0      	cmp	r4, #208	; 0xd0
    50d6:	d1f5      	bne.n	50c4 <interface_cmd_cmpl_wait+0x10>
    50d8:	4b06      	ldr	r3, [pc, #24]	; (50f4 <interface_cmd_cmpl_wait+0x40>)
    50da:	4798      	blx	r3
    50dc:	2300      	movs	r3, #0
    50de:	1c20      	adds	r0, r4, #0
    50e0:	702b      	strb	r3, [r5, #0]
    50e2:	bd38      	pop	{r3, r4, r5, pc}
    50e4:	200006fa 	.word	0x200006fa
    50e8:	00005029 	.word	0x00005029
    50ec:	20000964 	.word	0x20000964
    50f0:	0000506d 	.word	0x0000506d
    50f4:	0000504d 	.word	0x0000504d

000050f8 <l2cc_data_send_rsp_handler>:
    50f8:	b510      	push	{r4, lr}
    50fa:	7802      	ldrb	r2, [r0, #0]
    50fc:	700a      	strb	r2, [r1, #0]
    50fe:	7883      	ldrb	r3, [r0, #2]
    5100:	7844      	ldrb	r4, [r0, #1]
    5102:	021b      	lsls	r3, r3, #8
    5104:	4323      	orrs	r3, r4
    5106:	804b      	strh	r3, [r1, #2]
    5108:	7903      	ldrb	r3, [r0, #4]
    510a:	78c0      	ldrb	r0, [r0, #3]
    510c:	021b      	lsls	r3, r3, #8
    510e:	4303      	orrs	r3, r0
    5110:	808b      	strh	r3, [r1, #4]
    5112:	2a00      	cmp	r2, #0
    5114:	d103      	bne.n	511e <l2cc_data_send_rsp_handler+0x26>
    5116:	4a02      	ldr	r2, [pc, #8]	; (5120 <l2cc_data_send_rsp_handler+0x28>)
    5118:	7813      	ldrb	r3, [r2, #0]
    511a:	3301      	adds	r3, #1
    511c:	7013      	strb	r3, [r2, #0]
    511e:	bd10      	pop	{r4, pc}
    5120:	2000002c 	.word	0x2000002c

00005124 <l2cc_data_received_handler>:
    5124:	b508      	push	{r3, lr}
    5126:	1c03      	adds	r3, r0, #0
    5128:	7842      	ldrb	r2, [r0, #1]
    512a:	7800      	ldrb	r0, [r0, #0]
    512c:	0212      	lsls	r2, r2, #8
    512e:	4302      	orrs	r2, r0
    5130:	800a      	strh	r2, [r1, #0]
    5132:	78da      	ldrb	r2, [r3, #3]
    5134:	7898      	ldrb	r0, [r3, #2]
    5136:	0212      	lsls	r2, r2, #8
    5138:	4302      	orrs	r2, r0
    513a:	804a      	strh	r2, [r1, #2]
    513c:	795a      	ldrb	r2, [r3, #5]
    513e:	7918      	ldrb	r0, [r3, #4]
    5140:	0212      	lsls	r2, r2, #8
    5142:	4302      	orrs	r2, r0
    5144:	808a      	strh	r2, [r1, #4]
    5146:	1d88      	adds	r0, r1, #6
    5148:	1d99      	adds	r1, r3, #6
    514a:	4b01      	ldr	r3, [pc, #4]	; (5150 <l2cc_data_received_handler+0x2c>)
    514c:	4798      	blx	r3
    514e:	bd08      	pop	{r3, pc}
    5150:	000074b7 	.word	0x000074b7

00005154 <check_enc_process.isra.0>:
    5154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5156:	1c07      	adds	r7, r0, #0
    5158:	1c0e      	adds	r6, r1, #0
    515a:	1e15      	subs	r5, r2, #0
    515c:	9301      	str	r3, [sp, #4]
    515e:	2d05      	cmp	r5, #5
    5160:	d82e      	bhi.n	51c0 <check_enc_process.isra.0+0x6c>
    5162:	2401      	movs	r4, #1
    5164:	1c22      	adds	r2, r4, #0
    5166:	2333      	movs	r3, #51	; 0x33
    5168:	40aa      	lsls	r2, r5
    516a:	421a      	tst	r2, r3
    516c:	d028      	beq.n	51c0 <check_enc_process.isra.0+0x6c>
    516e:	780b      	ldrb	r3, [r1, #0]
    5170:	3b07      	subs	r3, #7
    5172:	2b09      	cmp	r3, #9
    5174:	d90a      	bls.n	518c <check_enc_process.isra.0+0x38>
    5176:	4c19      	ldr	r4, [pc, #100]	; (51dc <check_enc_process.isra.0+0x88>)
    5178:	4919      	ldr	r1, [pc, #100]	; (51e0 <check_enc_process.isra.0+0x8c>)
    517a:	4b1a      	ldr	r3, [pc, #104]	; (51e4 <check_enc_process.isra.0+0x90>)
    517c:	481a      	ldr	r0, [pc, #104]	; (51e8 <check_enc_process.isra.0+0x94>)
    517e:	22f1      	movs	r2, #241	; 0xf1
    5180:	6825      	ldr	r5, [r4, #0]
    5182:	47a8      	blx	r5
    5184:	7831      	ldrb	r1, [r6, #0]
    5186:	6823      	ldr	r3, [r4, #0]
    5188:	4818      	ldr	r0, [pc, #96]	; (51ec <check_enc_process.isra.0+0x98>)
    518a:	e023      	b.n	51d4 <check_enc_process.isra.0+0x80>
    518c:	9b01      	ldr	r3, [sp, #4]
    518e:	2b00      	cmp	r3, #0
    5190:	d101      	bne.n	5196 <check_enc_process.isra.0+0x42>
    5192:	2000      	movs	r0, #0
    5194:	e020      	b.n	51d8 <check_enc_process.isra.0+0x84>
    5196:	4b16      	ldr	r3, [pc, #88]	; (51f0 <check_enc_process.isra.0+0x9c>)
    5198:	1c38      	adds	r0, r7, #0
    519a:	2100      	movs	r1, #0
    519c:	4798      	blx	r3
    519e:	9b01      	ldr	r3, [sp, #4]
    51a0:	7018      	strb	r0, [r3, #0]
    51a2:	2807      	cmp	r0, #7
    51a4:	d9f5      	bls.n	5192 <check_enc_process.isra.0+0x3e>
    51a6:	4d0d      	ldr	r5, [pc, #52]	; (51dc <check_enc_process.isra.0+0x88>)
    51a8:	490d      	ldr	r1, [pc, #52]	; (51e0 <check_enc_process.isra.0+0x8c>)
    51aa:	22fa      	movs	r2, #250	; 0xfa
    51ac:	4b0d      	ldr	r3, [pc, #52]	; (51e4 <check_enc_process.isra.0+0x90>)
    51ae:	480e      	ldr	r0, [pc, #56]	; (51e8 <check_enc_process.isra.0+0x94>)
    51b0:	682e      	ldr	r6, [r5, #0]
    51b2:	47b0      	blx	r6
    51b4:	682b      	ldr	r3, [r5, #0]
    51b6:	480f      	ldr	r0, [pc, #60]	; (51f4 <check_enc_process.isra.0+0xa0>)
    51b8:	1c39      	adds	r1, r7, #0
    51ba:	4798      	blx	r3
    51bc:	1c20      	adds	r0, r4, #0
    51be:	e00b      	b.n	51d8 <check_enc_process.isra.0+0x84>
    51c0:	4c06      	ldr	r4, [pc, #24]	; (51dc <check_enc_process.isra.0+0x88>)
    51c2:	4907      	ldr	r1, [pc, #28]	; (51e0 <check_enc_process.isra.0+0x8c>)
    51c4:	4b07      	ldr	r3, [pc, #28]	; (51e4 <check_enc_process.isra.0+0x90>)
    51c6:	4808      	ldr	r0, [pc, #32]	; (51e8 <check_enc_process.isra.0+0x94>)
    51c8:	22ec      	movs	r2, #236	; 0xec
    51ca:	6826      	ldr	r6, [r4, #0]
    51cc:	47b0      	blx	r6
    51ce:	1c29      	adds	r1, r5, #0
    51d0:	6823      	ldr	r3, [r4, #0]
    51d2:	4809      	ldr	r0, [pc, #36]	; (51f8 <check_enc_process.isra.0+0xa4>)
    51d4:	4798      	blx	r3
    51d6:	20cf      	movs	r0, #207	; 0xcf
    51d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    51da:	46c0      	nop			; (mov r8, r8)
    51dc:	20000030 	.word	0x20000030
    51e0:	0000976c 	.word	0x0000976c
    51e4:	0000989e 	.word	0x0000989e
    51e8:	000093e1 	.word	0x000093e1
    51ec:	00009796 	.word	0x00009796
    51f0:	00005915 	.word	0x00005915
    51f4:	000097ac 	.word	0x000097ac
    51f8:	000096d2 	.word	0x000096d2

000051fc <at_ble_authenticate>:
    51fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    51fe:	1c0c      	adds	r4, r1, #0
    5200:	211f      	movs	r1, #31
    5202:	b08b      	sub	sp, #44	; 0x2c
    5204:	9307      	str	r3, [sp, #28]
    5206:	ab02      	add	r3, sp, #8
    5208:	18c9      	adds	r1, r1, r3
    520a:	230f      	movs	r3, #15
    520c:	700b      	strb	r3, [r1, #0]
    520e:	4b6b      	ldr	r3, [pc, #428]	; (53bc <at_ble_authenticate+0x1c0>)
    5210:	1c05      	adds	r5, r0, #0
    5212:	1c16      	adds	r6, r2, #0
    5214:	4798      	blx	r3
    5216:	1e07      	subs	r7, r0, #0
    5218:	2f07      	cmp	r7, #7
    521a:	d90b      	bls.n	5234 <at_ble_authenticate+0x38>
    521c:	4c68      	ldr	r4, [pc, #416]	; (53c0 <at_ble_authenticate+0x1c4>)
    521e:	4969      	ldr	r1, [pc, #420]	; (53c4 <at_ble_authenticate+0x1c8>)
    5220:	221a      	movs	r2, #26
    5222:	4b69      	ldr	r3, [pc, #420]	; (53c8 <at_ble_authenticate+0x1cc>)
    5224:	4869      	ldr	r0, [pc, #420]	; (53cc <at_ble_authenticate+0x1d0>)
    5226:	6825      	ldr	r5, [r4, #0]
    5228:	47a8      	blx	r5
    522a:	6823      	ldr	r3, [r4, #0]
    522c:	4868      	ldr	r0, [pc, #416]	; (53d0 <at_ble_authenticate+0x1d4>)
    522e:	4798      	blx	r3
    5230:	2001      	movs	r0, #1
    5232:	e0c0      	b.n	53b6 <at_ble_authenticate+0x1ba>
    5234:	2c00      	cmp	r4, #0
    5236:	d11b      	bne.n	5270 <at_ble_authenticate+0x74>
    5238:	2312      	movs	r3, #18
    523a:	435f      	muls	r7, r3
    523c:	4b65      	ldr	r3, [pc, #404]	; (53d4 <at_ble_authenticate+0x1d8>)
    523e:	5cfb      	ldrb	r3, [r7, r3]
    5240:	2b01      	cmp	r3, #1
    5242:	d10b      	bne.n	525c <at_ble_authenticate+0x60>
    5244:	9504      	str	r5, [sp, #16]
    5246:	9400      	str	r4, [sp, #0]
    5248:	9401      	str	r4, [sp, #4]
    524a:	9402      	str	r4, [sp, #8]
    524c:	9403      	str	r4, [sp, #12]
    524e:	1c20      	adds	r0, r4, #0
    5250:	1c21      	adds	r1, r4, #0
    5252:	1c22      	adds	r2, r4, #0
    5254:	1c23      	adds	r3, r4, #0
    5256:	4d60      	ldr	r5, [pc, #384]	; (53d8 <at_ble_authenticate+0x1dc>)
    5258:	47a8      	blx	r5
    525a:	e07b      	b.n	5354 <at_ble_authenticate+0x158>
    525c:	4c58      	ldr	r4, [pc, #352]	; (53c0 <at_ble_authenticate+0x1c4>)
    525e:	4b5a      	ldr	r3, [pc, #360]	; (53c8 <at_ble_authenticate+0x1cc>)
    5260:	485a      	ldr	r0, [pc, #360]	; (53cc <at_ble_authenticate+0x1d0>)
    5262:	4958      	ldr	r1, [pc, #352]	; (53c4 <at_ble_authenticate+0x1c8>)
    5264:	2229      	movs	r2, #41	; 0x29
    5266:	6825      	ldr	r5, [r4, #0]
    5268:	47a8      	blx	r5
    526a:	6823      	ldr	r3, [r4, #0]
    526c:	485b      	ldr	r0, [pc, #364]	; (53dc <at_ble_authenticate+0x1e0>)
    526e:	e0a0      	b.n	53b2 <at_ble_authenticate+0x1b6>
    5270:	7922      	ldrb	r2, [r4, #4]
    5272:	2a06      	cmp	r2, #6
    5274:	d904      	bls.n	5280 <at_ble_authenticate+0x84>
    5276:	7963      	ldrb	r3, [r4, #5]
    5278:	2b10      	cmp	r3, #16
    527a:	d801      	bhi.n	5280 <at_ble_authenticate+0x84>
    527c:	429a      	cmp	r2, r3
    527e:	d909      	bls.n	5294 <at_ble_authenticate+0x98>
    5280:	4c4f      	ldr	r4, [pc, #316]	; (53c0 <at_ble_authenticate+0x1c4>)
    5282:	4b51      	ldr	r3, [pc, #324]	; (53c8 <at_ble_authenticate+0x1cc>)
    5284:	4851      	ldr	r0, [pc, #324]	; (53cc <at_ble_authenticate+0x1d0>)
    5286:	494f      	ldr	r1, [pc, #316]	; (53c4 <at_ble_authenticate+0x1c8>)
    5288:	2232      	movs	r2, #50	; 0x32
    528a:	6825      	ldr	r5, [r4, #0]
    528c:	47a8      	blx	r5
    528e:	6823      	ldr	r3, [r4, #0]
    5290:	4853      	ldr	r0, [pc, #332]	; (53e0 <at_ble_authenticate+0x1e4>)
    5292:	e08e      	b.n	53b2 <at_ble_authenticate+0x1b6>
    5294:	7a23      	ldrb	r3, [r4, #8]
    5296:	2b04      	cmp	r3, #4
    5298:	d909      	bls.n	52ae <at_ble_authenticate+0xb2>
    529a:	4c49      	ldr	r4, [pc, #292]	; (53c0 <at_ble_authenticate+0x1c4>)
    529c:	4b4a      	ldr	r3, [pc, #296]	; (53c8 <at_ble_authenticate+0x1cc>)
    529e:	484b      	ldr	r0, [pc, #300]	; (53cc <at_ble_authenticate+0x1d0>)
    52a0:	4948      	ldr	r1, [pc, #288]	; (53c4 <at_ble_authenticate+0x1c8>)
    52a2:	2239      	movs	r2, #57	; 0x39
    52a4:	6825      	ldr	r5, [r4, #0]
    52a6:	47a8      	blx	r5
    52a8:	6823      	ldr	r3, [r4, #0]
    52aa:	484e      	ldr	r0, [pc, #312]	; (53e4 <at_ble_authenticate+0x1e8>)
    52ac:	e081      	b.n	53b2 <at_ble_authenticate+0x1b6>
    52ae:	79a3      	ldrb	r3, [r4, #6]
    52b0:	2b07      	cmp	r3, #7
    52b2:	d802      	bhi.n	52ba <at_ble_authenticate+0xbe>
    52b4:	79e3      	ldrb	r3, [r4, #7]
    52b6:	2b07      	cmp	r3, #7
    52b8:	d909      	bls.n	52ce <at_ble_authenticate+0xd2>
    52ba:	4c41      	ldr	r4, [pc, #260]	; (53c0 <at_ble_authenticate+0x1c4>)
    52bc:	4b42      	ldr	r3, [pc, #264]	; (53c8 <at_ble_authenticate+0x1cc>)
    52be:	4843      	ldr	r0, [pc, #268]	; (53cc <at_ble_authenticate+0x1d0>)
    52c0:	4940      	ldr	r1, [pc, #256]	; (53c4 <at_ble_authenticate+0x1c8>)
    52c2:	2241      	movs	r2, #65	; 0x41
    52c4:	6825      	ldr	r5, [r4, #0]
    52c6:	47a8      	blx	r5
    52c8:	6823      	ldr	r3, [r4, #0]
    52ca:	4847      	ldr	r0, [pc, #284]	; (53e8 <at_ble_authenticate+0x1ec>)
    52cc:	e071      	b.n	53b2 <at_ble_authenticate+0x1b6>
    52ce:	78a3      	ldrb	r3, [r4, #2]
    52d0:	2b00      	cmp	r3, #0
    52d2:	d010      	beq.n	52f6 <at_ble_authenticate+0xfa>
    52d4:	2e00      	cmp	r6, #0
    52d6:	d109      	bne.n	52ec <at_ble_authenticate+0xf0>
    52d8:	4c39      	ldr	r4, [pc, #228]	; (53c0 <at_ble_authenticate+0x1c4>)
    52da:	4b3b      	ldr	r3, [pc, #236]	; (53c8 <at_ble_authenticate+0x1cc>)
    52dc:	483b      	ldr	r0, [pc, #236]	; (53cc <at_ble_authenticate+0x1d0>)
    52de:	4939      	ldr	r1, [pc, #228]	; (53c4 <at_ble_authenticate+0x1c8>)
    52e0:	2249      	movs	r2, #73	; 0x49
    52e2:	6825      	ldr	r5, [r4, #0]
    52e4:	47a8      	blx	r5
    52e6:	6823      	ldr	r3, [r4, #0]
    52e8:	4840      	ldr	r0, [pc, #256]	; (53ec <at_ble_authenticate+0x1f0>)
    52ea:	e062      	b.n	53b2 <at_ble_authenticate+0x1b6>
    52ec:	4840      	ldr	r0, [pc, #256]	; (53f0 <at_ble_authenticate+0x1f4>)
    52ee:	1c31      	adds	r1, r6, #0
    52f0:	221c      	movs	r2, #28
    52f2:	4b40      	ldr	r3, [pc, #256]	; (53f4 <at_ble_authenticate+0x1f8>)
    52f4:	4798      	blx	r3
    52f6:	9b07      	ldr	r3, [sp, #28]
    52f8:	2b00      	cmp	r3, #0
    52fa:	d005      	beq.n	5308 <at_ble_authenticate+0x10c>
    52fc:	483e      	ldr	r0, [pc, #248]	; (53f8 <at_ble_authenticate+0x1fc>)
    52fe:	1c19      	adds	r1, r3, #0
    5300:	309a      	adds	r0, #154	; 0x9a
    5302:	2210      	movs	r2, #16
    5304:	4b3b      	ldr	r3, [pc, #236]	; (53f4 <at_ble_authenticate+0x1f8>)
    5306:	4798      	blx	r3
    5308:	7863      	ldrb	r3, [r4, #1]
    530a:	78a2      	ldrb	r2, [r4, #2]
    530c:	009b      	lsls	r3, r3, #2
    530e:	4313      	orrs	r3, r2
    5310:	2212      	movs	r2, #18
    5312:	4357      	muls	r7, r2
    5314:	4a2f      	ldr	r2, [pc, #188]	; (53d4 <at_ble_authenticate+0x1d8>)
    5316:	b2db      	uxtb	r3, r3
    5318:	5cba      	ldrb	r2, [r7, r2]
    531a:	2a00      	cmp	r2, #0
    531c:	d11c      	bne.n	5358 <at_ble_authenticate+0x15c>
    531e:	79a0      	ldrb	r0, [r4, #6]
    5320:	0742      	lsls	r2, r0, #29
    5322:	d502      	bpl.n	532a <at_ble_authenticate+0x12e>
    5324:	9a07      	ldr	r2, [sp, #28]
    5326:	2a00      	cmp	r2, #0
    5328:	d003      	beq.n	5332 <at_ble_authenticate+0x136>
    532a:	07c2      	lsls	r2, r0, #31
    532c:	d506      	bpl.n	533c <at_ble_authenticate+0x140>
    532e:	2e00      	cmp	r6, #0
    5330:	d104      	bne.n	533c <at_ble_authenticate+0x140>
    5332:	4c23      	ldr	r4, [pc, #140]	; (53c0 <at_ble_authenticate+0x1c4>)
    5334:	4825      	ldr	r0, [pc, #148]	; (53cc <at_ble_authenticate+0x1d0>)
    5336:	4923      	ldr	r1, [pc, #140]	; (53c4 <at_ble_authenticate+0x1c8>)
    5338:	2260      	movs	r2, #96	; 0x60
    533a:	e01d      	b.n	5378 <at_ble_authenticate+0x17c>
    533c:	7966      	ldrb	r6, [r4, #5]
    533e:	7821      	ldrb	r1, [r4, #0]
    5340:	78e2      	ldrb	r2, [r4, #3]
    5342:	9600      	str	r6, [sp, #0]
    5344:	9001      	str	r0, [sp, #4]
    5346:	79e0      	ldrb	r0, [r4, #7]
    5348:	9002      	str	r0, [sp, #8]
    534a:	7a20      	ldrb	r0, [r4, #8]
    534c:	4c2b      	ldr	r4, [pc, #172]	; (53fc <at_ble_authenticate+0x200>)
    534e:	9003      	str	r0, [sp, #12]
    5350:	1c28      	adds	r0, r5, #0
    5352:	47a0      	blx	r4
    5354:	2000      	movs	r0, #0
    5356:	e02e      	b.n	53b6 <at_ble_authenticate+0x1ba>
    5358:	2a01      	cmp	r2, #1
    535a:	d121      	bne.n	53a0 <at_ble_authenticate+0x1a4>
    535c:	79e0      	ldrb	r0, [r4, #7]
    535e:	0742      	lsls	r2, r0, #29
    5360:	d502      	bpl.n	5368 <at_ble_authenticate+0x16c>
    5362:	9a07      	ldr	r2, [sp, #28]
    5364:	2a00      	cmp	r2, #0
    5366:	d003      	beq.n	5370 <at_ble_authenticate+0x174>
    5368:	07c2      	lsls	r2, r0, #31
    536a:	d50b      	bpl.n	5384 <at_ble_authenticate+0x188>
    536c:	2e00      	cmp	r6, #0
    536e:	d109      	bne.n	5384 <at_ble_authenticate+0x188>
    5370:	226e      	movs	r2, #110	; 0x6e
    5372:	4c13      	ldr	r4, [pc, #76]	; (53c0 <at_ble_authenticate+0x1c4>)
    5374:	4815      	ldr	r0, [pc, #84]	; (53cc <at_ble_authenticate+0x1d0>)
    5376:	4913      	ldr	r1, [pc, #76]	; (53c4 <at_ble_authenticate+0x1c8>)
    5378:	4b13      	ldr	r3, [pc, #76]	; (53c8 <at_ble_authenticate+0x1cc>)
    537a:	6825      	ldr	r5, [r4, #0]
    537c:	47a8      	blx	r5
    537e:	6823      	ldr	r3, [r4, #0]
    5380:	481f      	ldr	r0, [pc, #124]	; (5400 <at_ble_authenticate+0x204>)
    5382:	e016      	b.n	53b2 <at_ble_authenticate+0x1b6>
    5384:	7966      	ldrb	r6, [r4, #5]
    5386:	7821      	ldrb	r1, [r4, #0]
    5388:	78e2      	ldrb	r2, [r4, #3]
    538a:	9600      	str	r6, [sp, #0]
    538c:	79a6      	ldrb	r6, [r4, #6]
    538e:	9002      	str	r0, [sp, #8]
    5390:	9601      	str	r6, [sp, #4]
    5392:	7a20      	ldrb	r0, [r4, #8]
    5394:	9504      	str	r5, [sp, #16]
    5396:	9003      	str	r0, [sp, #12]
    5398:	4c0f      	ldr	r4, [pc, #60]	; (53d8 <at_ble_authenticate+0x1dc>)
    539a:	2001      	movs	r0, #1
    539c:	47a0      	blx	r4
    539e:	e7d9      	b.n	5354 <at_ble_authenticate+0x158>
    53a0:	4c07      	ldr	r4, [pc, #28]	; (53c0 <at_ble_authenticate+0x1c4>)
    53a2:	4b09      	ldr	r3, [pc, #36]	; (53c8 <at_ble_authenticate+0x1cc>)
    53a4:	4809      	ldr	r0, [pc, #36]	; (53cc <at_ble_authenticate+0x1d0>)
    53a6:	4907      	ldr	r1, [pc, #28]	; (53c4 <at_ble_authenticate+0x1c8>)
    53a8:	2279      	movs	r2, #121	; 0x79
    53aa:	6825      	ldr	r5, [r4, #0]
    53ac:	47a8      	blx	r5
    53ae:	6823      	ldr	r3, [r4, #0]
    53b0:	4814      	ldr	r0, [pc, #80]	; (5404 <at_ble_authenticate+0x208>)
    53b2:	4798      	blx	r3
    53b4:	20cf      	movs	r0, #207	; 0xcf
    53b6:	b00b      	add	sp, #44	; 0x2c
    53b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53ba:	46c0      	nop			; (mov r8, r8)
    53bc:	00005915 	.word	0x00005915
    53c0:	20000030 	.word	0x20000030
    53c4:	0000976c 	.word	0x0000976c
    53c8:	000098c8 	.word	0x000098c8
    53cc:	000093e1 	.word	0x000093e1
    53d0:	000097bd 	.word	0x000097bd
    53d4:	200018b8 	.word	0x200018b8
    53d8:	00005f35 	.word	0x00005f35
    53dc:	000097d3 	.word	0x000097d3
    53e0:	000097e5 	.word	0x000097e5
    53e4:	000097f8 	.word	0x000097f8
    53e8:	0000980f 	.word	0x0000980f
    53ec:	00009823 	.word	0x00009823
    53f0:	200019c6 	.word	0x200019c6
    53f4:	000074b7 	.word	0x000074b7
    53f8:	20001948 	.word	0x20001948
    53fc:	00005d05 	.word	0x00005d05
    5400:	00009839 	.word	0x00009839
    5404:	0000984d 	.word	0x0000984d

00005408 <at_ble_pair_key_reply>:
    5408:	b5f0      	push	{r4, r5, r6, r7, lr}
    540a:	b085      	sub	sp, #20
    540c:	1c05      	adds	r5, r0, #0
    540e:	1c0c      	adds	r4, r1, #0
    5410:	1c16      	adds	r6, r2, #0
    5412:	2100      	movs	r1, #0
    5414:	4668      	mov	r0, sp
    5416:	2210      	movs	r2, #16
    5418:	4b1e      	ldr	r3, [pc, #120]	; (5494 <at_ble_pair_key_reply+0x8c>)
    541a:	4798      	blx	r3
    541c:	2101      	movs	r1, #1
    541e:	2e00      	cmp	r6, #0
    5420:	d101      	bne.n	5426 <at_ble_pair_key_reply+0x1e>
    5422:	1c31      	adds	r1, r6, #0
    5424:	466e      	mov	r6, sp
    5426:	2c00      	cmp	r4, #0
    5428:	d116      	bne.n	5458 <at_ble_pair_key_reply+0x50>
    542a:	2701      	movs	r7, #1
    542c:	1c23      	adds	r3, r4, #0
    542e:	1d70      	adds	r0, r6, #5
    5430:	3e01      	subs	r6, #1
    5432:	7802      	ldrb	r2, [r0, #0]
    5434:	3801      	subs	r0, #1
    5436:	3a30      	subs	r2, #48	; 0x30
    5438:	437a      	muls	r2, r7
    543a:	189b      	adds	r3, r3, r2
    543c:	220a      	movs	r2, #10
    543e:	4357      	muls	r7, r2
    5440:	42b0      	cmp	r0, r6
    5442:	d1f6      	bne.n	5432 <at_ble_pair_key_reply+0x2a>
    5444:	466a      	mov	r2, sp
    5446:	4668      	mov	r0, sp
    5448:	7013      	strb	r3, [r2, #0]
    544a:	0a1a      	lsrs	r2, r3, #8
    544c:	7042      	strb	r2, [r0, #1]
    544e:	0c1a      	lsrs	r2, r3, #16
    5450:	0e1b      	lsrs	r3, r3, #24
    5452:	7082      	strb	r2, [r0, #2]
    5454:	70c3      	strb	r3, [r0, #3]
    5456:	e015      	b.n	5484 <at_ble_pair_key_reply+0x7c>
    5458:	2c01      	cmp	r4, #1
    545a:	d107      	bne.n	546c <at_ble_pair_key_reply+0x64>
    545c:	2300      	movs	r3, #0
    545e:	4668      	mov	r0, sp
    5460:	5cf2      	ldrb	r2, [r6, r3]
    5462:	54c2      	strb	r2, [r0, r3]
    5464:	3301      	adds	r3, #1
    5466:	2b10      	cmp	r3, #16
    5468:	d1f9      	bne.n	545e <at_ble_pair_key_reply+0x56>
    546a:	e00b      	b.n	5484 <at_ble_pair_key_reply+0x7c>
    546c:	4c0a      	ldr	r4, [pc, #40]	; (5498 <at_ble_pair_key_reply+0x90>)
    546e:	490b      	ldr	r1, [pc, #44]	; (549c <at_ble_pair_key_reply+0x94>)
    5470:	22ac      	movs	r2, #172	; 0xac
    5472:	4b0b      	ldr	r3, [pc, #44]	; (54a0 <at_ble_pair_key_reply+0x98>)
    5474:	480b      	ldr	r0, [pc, #44]	; (54a4 <at_ble_pair_key_reply+0x9c>)
    5476:	6825      	ldr	r5, [r4, #0]
    5478:	47a8      	blx	r5
    547a:	6823      	ldr	r3, [r4, #0]
    547c:	480a      	ldr	r0, [pc, #40]	; (54a8 <at_ble_pair_key_reply+0xa0>)
    547e:	4798      	blx	r3
    5480:	20cf      	movs	r0, #207	; 0xcf
    5482:	e005      	b.n	5490 <at_ble_pair_key_reply+0x88>
    5484:	2004      	movs	r0, #4
    5486:	466a      	mov	r2, sp
    5488:	1c2b      	adds	r3, r5, #0
    548a:	4c08      	ldr	r4, [pc, #32]	; (54ac <at_ble_pair_key_reply+0xa4>)
    548c:	47a0      	blx	r4
    548e:	2000      	movs	r0, #0
    5490:	b005      	add	sp, #20
    5492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5494:	000074c9 	.word	0x000074c9
    5498:	20000030 	.word	0x20000030
    549c:	0000976c 	.word	0x0000976c
    54a0:	00009738 	.word	0x00009738
    54a4:	000093e1 	.word	0x000093e1
    54a8:	00009860 	.word	0x00009860
    54ac:	00005fb9 	.word	0x00005fb9

000054b0 <at_ble_send_slave_sec_request>:
    54b0:	b570      	push	{r4, r5, r6, lr}
    54b2:	4b17      	ldr	r3, [pc, #92]	; (5510 <at_ble_send_slave_sec_request+0x60>)
    54b4:	1c0e      	adds	r6, r1, #0
    54b6:	2100      	movs	r1, #0
    54b8:	1c05      	adds	r5, r0, #0
    54ba:	1c14      	adds	r4, r2, #0
    54bc:	4798      	blx	r3
    54be:	2807      	cmp	r0, #7
    54c0:	d90b      	bls.n	54da <at_ble_send_slave_sec_request+0x2a>
    54c2:	4c14      	ldr	r4, [pc, #80]	; (5514 <at_ble_send_slave_sec_request+0x64>)
    54c4:	4914      	ldr	r1, [pc, #80]	; (5518 <at_ble_send_slave_sec_request+0x68>)
    54c6:	22c3      	movs	r2, #195	; 0xc3
    54c8:	4b14      	ldr	r3, [pc, #80]	; (551c <at_ble_send_slave_sec_request+0x6c>)
    54ca:	4815      	ldr	r0, [pc, #84]	; (5520 <at_ble_send_slave_sec_request+0x70>)
    54cc:	6825      	ldr	r5, [r4, #0]
    54ce:	47a8      	blx	r5
    54d0:	6823      	ldr	r3, [r4, #0]
    54d2:	4814      	ldr	r0, [pc, #80]	; (5524 <at_ble_send_slave_sec_request+0x74>)
    54d4:	4798      	blx	r3
    54d6:	2001      	movs	r0, #1
    54d8:	e018      	b.n	550c <at_ble_send_slave_sec_request+0x5c>
    54da:	2312      	movs	r3, #18
    54dc:	4358      	muls	r0, r3
    54de:	4b12      	ldr	r3, [pc, #72]	; (5528 <at_ble_send_slave_sec_request+0x78>)
    54e0:	5cc3      	ldrb	r3, [r0, r3]
    54e2:	2b01      	cmp	r3, #1
    54e4:	d00b      	beq.n	54fe <at_ble_send_slave_sec_request+0x4e>
    54e6:	4c0b      	ldr	r4, [pc, #44]	; (5514 <at_ble_send_slave_sec_request+0x64>)
    54e8:	490b      	ldr	r1, [pc, #44]	; (5518 <at_ble_send_slave_sec_request+0x68>)
    54ea:	22c9      	movs	r2, #201	; 0xc9
    54ec:	4b0b      	ldr	r3, [pc, #44]	; (551c <at_ble_send_slave_sec_request+0x6c>)
    54ee:	480c      	ldr	r0, [pc, #48]	; (5520 <at_ble_send_slave_sec_request+0x70>)
    54f0:	6825      	ldr	r5, [r4, #0]
    54f2:	47a8      	blx	r5
    54f4:	6823      	ldr	r3, [r4, #0]
    54f6:	480d      	ldr	r0, [pc, #52]	; (552c <at_ble_send_slave_sec_request+0x7c>)
    54f8:	4798      	blx	r3
    54fa:	20e0      	movs	r0, #224	; 0xe0
    54fc:	e006      	b.n	550c <at_ble_send_slave_sec_request+0x5c>
    54fe:	00b1      	lsls	r1, r6, #2
    5500:	430c      	orrs	r4, r1
    5502:	1c28      	adds	r0, r5, #0
    5504:	b2e1      	uxtb	r1, r4
    5506:	4b0a      	ldr	r3, [pc, #40]	; (5530 <at_ble_send_slave_sec_request+0x80>)
    5508:	4798      	blx	r3
    550a:	2000      	movs	r0, #0
    550c:	bd70      	pop	{r4, r5, r6, pc}
    550e:	46c0      	nop			; (mov r8, r8)
    5510:	00005915 	.word	0x00005915
    5514:	20000030 	.word	0x20000030
    5518:	0000976c 	.word	0x0000976c
    551c:	0000974e 	.word	0x0000974e
    5520:	000093e1 	.word	0x000093e1
    5524:	0000986f 	.word	0x0000986f
    5528:	200018b8 	.word	0x200018b8
    552c:	0000987f 	.word	0x0000987f
    5530:	00006011 	.word	0x00006011

00005534 <at_ble_encryption_start>:
    5534:	b5f0      	push	{r4, r5, r6, r7, lr}
    5536:	260f      	movs	r6, #15
    5538:	b087      	sub	sp, #28
    553a:	ab02      	add	r3, sp, #8
    553c:	18f6      	adds	r6, r6, r3
    553e:	2308      	movs	r3, #8
    5540:	1c07      	adds	r7, r0, #0
    5542:	1e0c      	subs	r4, r1, #0
    5544:	9203      	str	r2, [sp, #12]
    5546:	7033      	strb	r3, [r6, #0]
    5548:	d02f      	beq.n	55aa <at_ble_encryption_start+0x76>
    554a:	4d20      	ldr	r5, [pc, #128]	; (55cc <at_ble_encryption_start+0x98>)
    554c:	311a      	adds	r1, #26
    554e:	1c33      	adds	r3, r6, #0
    5550:	47a8      	blx	r5
    5552:	1e05      	subs	r5, r0, #0
    5554:	d12a      	bne.n	55ac <at_ble_encryption_start+0x78>
    5556:	2212      	movs	r2, #18
    5558:	7833      	ldrb	r3, [r6, #0]
    555a:	4353      	muls	r3, r2
    555c:	4a1c      	ldr	r2, [pc, #112]	; (55d0 <at_ble_encryption_start+0x9c>)
    555e:	5c9b      	ldrb	r3, [r3, r2]
    5560:	2b00      	cmp	r3, #0
    5562:	d011      	beq.n	5588 <at_ble_encryption_start+0x54>
    5564:	2216      	movs	r2, #22
    5566:	4c1b      	ldr	r4, [pc, #108]	; (55d4 <at_ble_encryption_start+0xa0>)
    5568:	491b      	ldr	r1, [pc, #108]	; (55d8 <at_ble_encryption_start+0xa4>)
    556a:	32ff      	adds	r2, #255	; 0xff
    556c:	4b1b      	ldr	r3, [pc, #108]	; (55dc <at_ble_encryption_start+0xa8>)
    556e:	6825      	ldr	r5, [r4, #0]
    5570:	481b      	ldr	r0, [pc, #108]	; (55e0 <at_ble_encryption_start+0xac>)
    5572:	47a8      	blx	r5
    5574:	2212      	movs	r2, #18
    5576:	7833      	ldrb	r3, [r6, #0]
    5578:	481a      	ldr	r0, [pc, #104]	; (55e4 <at_ble_encryption_start+0xb0>)
    557a:	4353      	muls	r3, r2
    557c:	4a14      	ldr	r2, [pc, #80]	; (55d0 <at_ble_encryption_start+0x9c>)
    557e:	25e0      	movs	r5, #224	; 0xe0
    5580:	5c99      	ldrb	r1, [r3, r2]
    5582:	6823      	ldr	r3, [r4, #0]
    5584:	4798      	blx	r3
    5586:	e011      	b.n	55ac <at_ble_encryption_start+0x78>
    5588:	1c21      	adds	r1, r4, #0
    558a:	221c      	movs	r2, #28
    558c:	4b16      	ldr	r3, [pc, #88]	; (55e8 <at_ble_encryption_start+0xb4>)
    558e:	4817      	ldr	r0, [pc, #92]	; (55ec <at_ble_encryption_start+0xb8>)
    5590:	4798      	blx	r3
    5592:	1c23      	adds	r3, r4, #0
    5594:	7ea1      	ldrb	r1, [r4, #26]
    5596:	8a22      	ldrh	r2, [r4, #16]
    5598:	9100      	str	r1, [sp, #0]
    559a:	9903      	ldr	r1, [sp, #12]
    559c:	3312      	adds	r3, #18
    559e:	9101      	str	r1, [sp, #4]
    55a0:	1c38      	adds	r0, r7, #0
    55a2:	1c21      	adds	r1, r4, #0
    55a4:	4c12      	ldr	r4, [pc, #72]	; (55f0 <at_ble_encryption_start+0xbc>)
    55a6:	47a0      	blx	r4
    55a8:	e00c      	b.n	55c4 <at_ble_encryption_start+0x90>
    55aa:	25cf      	movs	r5, #207	; 0xcf
    55ac:	228f      	movs	r2, #143	; 0x8f
    55ae:	4c09      	ldr	r4, [pc, #36]	; (55d4 <at_ble_encryption_start+0xa0>)
    55b0:	4909      	ldr	r1, [pc, #36]	; (55d8 <at_ble_encryption_start+0xa4>)
    55b2:	4b0a      	ldr	r3, [pc, #40]	; (55dc <at_ble_encryption_start+0xa8>)
    55b4:	480a      	ldr	r0, [pc, #40]	; (55e0 <at_ble_encryption_start+0xac>)
    55b6:	0052      	lsls	r2, r2, #1
    55b8:	6826      	ldr	r6, [r4, #0]
    55ba:	47b0      	blx	r6
    55bc:	6823      	ldr	r3, [r4, #0]
    55be:	480d      	ldr	r0, [pc, #52]	; (55f4 <at_ble_encryption_start+0xc0>)
    55c0:	1c29      	adds	r1, r5, #0
    55c2:	4798      	blx	r3
    55c4:	1c28      	adds	r0, r5, #0
    55c6:	b007      	add	sp, #28
    55c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55ca:	46c0      	nop			; (mov r8, r8)
    55cc:	00005155 	.word	0x00005155
    55d0:	200018b8 	.word	0x200018b8
    55d4:	20000030 	.word	0x20000030
    55d8:	0000976c 	.word	0x0000976c
    55dc:	000098b0 	.word	0x000098b0
    55e0:	000093e1 	.word	0x000093e1
    55e4:	0000988e 	.word	0x0000988e
    55e8:	000074b7 	.word	0x000074b7
    55ec:	200019c6 	.word	0x200019c6
    55f0:	00006059 	.word	0x00006059
    55f4:	000094d6 	.word	0x000094d6

000055f8 <at_ble_encryption_request_reply>:
    55f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55fa:	b085      	sub	sp, #20
    55fc:	1c06      	adds	r6, r0, #0
    55fe:	9103      	str	r1, [sp, #12]
    5600:	1c17      	adds	r7, r2, #0
    5602:	1e1d      	subs	r5, r3, #0
    5604:	d014      	beq.n	5630 <at_ble_encryption_request_reply+0x38>
    5606:	2a00      	cmp	r2, #0
    5608:	d109      	bne.n	561e <at_ble_encryption_request_reply+0x26>
    560a:	7eab      	ldrb	r3, [r5, #26]
    560c:	4c10      	ldr	r4, [pc, #64]	; (5650 <at_ble_encryption_request_reply+0x58>)
    560e:	9300      	str	r3, [sp, #0]
    5610:	1c30      	adds	r0, r6, #0
    5612:	9903      	ldr	r1, [sp, #12]
    5614:	1c3a      	adds	r2, r7, #0
    5616:	1c2b      	adds	r3, r5, #0
    5618:	47a0      	blx	r4
    561a:	2400      	movs	r4, #0
    561c:	e015      	b.n	564a <at_ble_encryption_request_reply+0x52>
    561e:	1c19      	adds	r1, r3, #0
    5620:	4c0c      	ldr	r4, [pc, #48]	; (5654 <at_ble_encryption_request_reply+0x5c>)
    5622:	311a      	adds	r1, #26
    5624:	9a03      	ldr	r2, [sp, #12]
    5626:	2300      	movs	r3, #0
    5628:	47a0      	blx	r4
    562a:	1e04      	subs	r4, r0, #0
    562c:	d0ed      	beq.n	560a <at_ble_encryption_request_reply+0x12>
    562e:	e000      	b.n	5632 <at_ble_encryption_request_reply+0x3a>
    5630:	24cf      	movs	r4, #207	; 0xcf
    5632:	2238      	movs	r2, #56	; 0x38
    5634:	4d08      	ldr	r5, [pc, #32]	; (5658 <at_ble_encryption_request_reply+0x60>)
    5636:	4909      	ldr	r1, [pc, #36]	; (565c <at_ble_encryption_request_reply+0x64>)
    5638:	4b09      	ldr	r3, [pc, #36]	; (5660 <at_ble_encryption_request_reply+0x68>)
    563a:	480a      	ldr	r0, [pc, #40]	; (5664 <at_ble_encryption_request_reply+0x6c>)
    563c:	32ff      	adds	r2, #255	; 0xff
    563e:	682e      	ldr	r6, [r5, #0]
    5640:	47b0      	blx	r6
    5642:	682b      	ldr	r3, [r5, #0]
    5644:	4808      	ldr	r0, [pc, #32]	; (5668 <at_ble_encryption_request_reply+0x70>)
    5646:	1c21      	adds	r1, r4, #0
    5648:	4798      	blx	r3
    564a:	1c20      	adds	r0, r4, #0
    564c:	b005      	add	sp, #20
    564e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5650:	00006115 	.word	0x00006115
    5654:	00005155 	.word	0x00005155
    5658:	20000030 	.word	0x20000030
    565c:	0000976c 	.word	0x0000976c
    5660:	00009718 	.word	0x00009718
    5664:	000093e1 	.word	0x000093e1
    5668:	000094d6 	.word	0x000094d6

0000566c <patchFuncAndVars>:
    566c:	b538      	push	{r3, r4, r5, lr}
    566e:	1c05      	adds	r5, r0, #0
    5670:	4c27      	ldr	r4, [pc, #156]	; (5710 <patchFuncAndVars+0xa4>)
    5672:	4828      	ldr	r0, [pc, #160]	; (5714 <patchFuncAndVars+0xa8>)
    5674:	4928      	ldr	r1, [pc, #160]	; (5718 <patchFuncAndVars+0xac>)
    5676:	47a0      	blx	r4
    5678:	4828      	ldr	r0, [pc, #160]	; (571c <patchFuncAndVars+0xb0>)
    567a:	4929      	ldr	r1, [pc, #164]	; (5720 <patchFuncAndVars+0xb4>)
    567c:	47a0      	blx	r4
    567e:	4829      	ldr	r0, [pc, #164]	; (5724 <patchFuncAndVars+0xb8>)
    5680:	4929      	ldr	r1, [pc, #164]	; (5728 <patchFuncAndVars+0xbc>)
    5682:	47a0      	blx	r4
    5684:	4829      	ldr	r0, [pc, #164]	; (572c <patchFuncAndVars+0xc0>)
    5686:	492a      	ldr	r1, [pc, #168]	; (5730 <patchFuncAndVars+0xc4>)
    5688:	47a0      	blx	r4
    568a:	482a      	ldr	r0, [pc, #168]	; (5734 <patchFuncAndVars+0xc8>)
    568c:	492a      	ldr	r1, [pc, #168]	; (5738 <patchFuncAndVars+0xcc>)
    568e:	47a0      	blx	r4
    5690:	482a      	ldr	r0, [pc, #168]	; (573c <patchFuncAndVars+0xd0>)
    5692:	492b      	ldr	r1, [pc, #172]	; (5740 <patchFuncAndVars+0xd4>)
    5694:	47a0      	blx	r4
    5696:	482b      	ldr	r0, [pc, #172]	; (5744 <patchFuncAndVars+0xd8>)
    5698:	492b      	ldr	r1, [pc, #172]	; (5748 <patchFuncAndVars+0xdc>)
    569a:	47a0      	blx	r4
    569c:	482b      	ldr	r0, [pc, #172]	; (574c <patchFuncAndVars+0xe0>)
    569e:	492c      	ldr	r1, [pc, #176]	; (5750 <patchFuncAndVars+0xe4>)
    56a0:	47a0      	blx	r4
    56a2:	482c      	ldr	r0, [pc, #176]	; (5754 <patchFuncAndVars+0xe8>)
    56a4:	492c      	ldr	r1, [pc, #176]	; (5758 <patchFuncAndVars+0xec>)
    56a6:	47a0      	blx	r4
    56a8:	482c      	ldr	r0, [pc, #176]	; (575c <patchFuncAndVars+0xf0>)
    56aa:	492d      	ldr	r1, [pc, #180]	; (5760 <patchFuncAndVars+0xf4>)
    56ac:	47a0      	blx	r4
    56ae:	482d      	ldr	r0, [pc, #180]	; (5764 <patchFuncAndVars+0xf8>)
    56b0:	492d      	ldr	r1, [pc, #180]	; (5768 <patchFuncAndVars+0xfc>)
    56b2:	47a0      	blx	r4
    56b4:	482d      	ldr	r0, [pc, #180]	; (576c <patchFuncAndVars+0x100>)
    56b6:	492e      	ldr	r1, [pc, #184]	; (5770 <patchFuncAndVars+0x104>)
    56b8:	47a0      	blx	r4
    56ba:	482e      	ldr	r0, [pc, #184]	; (5774 <patchFuncAndVars+0x108>)
    56bc:	492e      	ldr	r1, [pc, #184]	; (5778 <patchFuncAndVars+0x10c>)
    56be:	47a0      	blx	r4
    56c0:	482e      	ldr	r0, [pc, #184]	; (577c <patchFuncAndVars+0x110>)
    56c2:	492f      	ldr	r1, [pc, #188]	; (5780 <patchFuncAndVars+0x114>)
    56c4:	47a0      	blx	r4
    56c6:	482f      	ldr	r0, [pc, #188]	; (5784 <patchFuncAndVars+0x118>)
    56c8:	492f      	ldr	r1, [pc, #188]	; (5788 <patchFuncAndVars+0x11c>)
    56ca:	47a0      	blx	r4
    56cc:	482f      	ldr	r0, [pc, #188]	; (578c <patchFuncAndVars+0x120>)
    56ce:	4930      	ldr	r1, [pc, #192]	; (5790 <patchFuncAndVars+0x124>)
    56d0:	47a0      	blx	r4
    56d2:	4830      	ldr	r0, [pc, #192]	; (5794 <patchFuncAndVars+0x128>)
    56d4:	4930      	ldr	r1, [pc, #192]	; (5798 <patchFuncAndVars+0x12c>)
    56d6:	47a0      	blx	r4
    56d8:	4830      	ldr	r0, [pc, #192]	; (579c <patchFuncAndVars+0x130>)
    56da:	4931      	ldr	r1, [pc, #196]	; (57a0 <patchFuncAndVars+0x134>)
    56dc:	47a0      	blx	r4
    56de:	4831      	ldr	r0, [pc, #196]	; (57a4 <patchFuncAndVars+0x138>)
    56e0:	4931      	ldr	r1, [pc, #196]	; (57a8 <patchFuncAndVars+0x13c>)
    56e2:	47a0      	blx	r4
    56e4:	4931      	ldr	r1, [pc, #196]	; (57ac <patchFuncAndVars+0x140>)
    56e6:	4832      	ldr	r0, [pc, #200]	; (57b0 <patchFuncAndVars+0x144>)
    56e8:	47a0      	blx	r4
    56ea:	7869      	ldrb	r1, [r5, #1]
    56ec:	2901      	cmp	r1, #1
    56ee:	d101      	bne.n	56f4 <patchFuncAndVars+0x88>
    56f0:	4830      	ldr	r0, [pc, #192]	; (57b4 <patchFuncAndVars+0x148>)
    56f2:	47a0      	blx	r4
    56f4:	4830      	ldr	r0, [pc, #192]	; (57b8 <patchFuncAndVars+0x14c>)
    56f6:	2101      	movs	r1, #1
    56f8:	47a0      	blx	r4
    56fa:	4830      	ldr	r0, [pc, #192]	; (57bc <patchFuncAndVars+0x150>)
    56fc:	2101      	movs	r1, #1
    56fe:	47a0      	blx	r4
    5700:	482f      	ldr	r0, [pc, #188]	; (57c0 <patchFuncAndVars+0x154>)
    5702:	2104      	movs	r1, #4
    5704:	47a0      	blx	r4
    5706:	2102      	movs	r1, #2
    5708:	482e      	ldr	r0, [pc, #184]	; (57c4 <patchFuncAndVars+0x158>)
    570a:	31ff      	adds	r1, #255	; 0xff
    570c:	47a0      	blx	r4
    570e:	bd38      	pop	{r3, r4, r5, pc}
    5710:	00007065 	.word	0x00007065
    5714:	100401c0 	.word	0x100401c0
    5718:	10006ae3 	.word	0x10006ae3
    571c:	1004000c 	.word	0x1004000c
    5720:	100053a5 	.word	0x100053a5
    5724:	10040010 	.word	0x10040010
    5728:	1000549d 	.word	0x1000549d
    572c:	1004004c 	.word	0x1004004c
    5730:	10005515 	.word	0x10005515
    5734:	10040034 	.word	0x10040034
    5738:	10005647 	.word	0x10005647
    573c:	10040068 	.word	0x10040068
    5740:	10005955 	.word	0x10005955
    5744:	10040088 	.word	0x10040088
    5748:	10005a5d 	.word	0x10005a5d
    574c:	100400bc 	.word	0x100400bc
    5750:	10005b7d 	.word	0x10005b7d
    5754:	100400dc 	.word	0x100400dc
    5758:	10005c9d 	.word	0x10005c9d
    575c:	100400e4 	.word	0x100400e4
    5760:	10005e6d 	.word	0x10005e6d
    5764:	100400e8 	.word	0x100400e8
    5768:	100060df 	.word	0x100060df
    576c:	100400ec 	.word	0x100400ec
    5770:	10006199 	.word	0x10006199
    5774:	1004010c 	.word	0x1004010c
    5778:	1000634d 	.word	0x1000634d
    577c:	10040154 	.word	0x10040154
    5780:	10006545 	.word	0x10006545
    5784:	10040160 	.word	0x10040160
    5788:	100065f5 	.word	0x100065f5
    578c:	10040174 	.word	0x10040174
    5790:	1000678d 	.word	0x1000678d
    5794:	10040210 	.word	0x10040210
    5798:	10007571 	.word	0x10007571
    579c:	10040038 	.word	0x10040038
    57a0:	100057ff 	.word	0x100057ff
    57a4:	10000004 	.word	0x10000004
    57a8:	10005881 	.word	0x10005881
    57ac:	100057db 	.word	0x100057db
    57b0:	1000003c 	.word	0x1000003c
    57b4:	10007ca0 	.word	0x10007ca0
    57b8:	10040168 	.word	0x10040168
    57bc:	10007bd0 	.word	0x10007bd0
    57c0:	10007bd4 	.word	0x10007bd4
    57c4:	10040000 	.word	0x10040000

000057c8 <__printingNullFun>:
    57c8:	b40f      	push	{r0, r1, r2, r3}
    57ca:	2000      	movs	r0, #0
    57cc:	b004      	add	sp, #16
    57ce:	4770      	bx	lr

000057d0 <dbg_le_set_bd_addr_req_handler>:
    57d0:	4a14      	ldr	r2, [pc, #80]	; (5824 <dbg_le_set_bd_addr_req_handler+0x54>)
    57d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57d4:	6814      	ldr	r4, [r2, #0]
    57d6:	2300      	movs	r3, #0
    57d8:	2205      	movs	r2, #5
    57da:	1c01      	adds	r1, r0, #0
    57dc:	2603      	movs	r6, #3
    57de:	270f      	movs	r7, #15
    57e0:	1c20      	adds	r0, r4, #0
    57e2:	4d11      	ldr	r5, [pc, #68]	; (5828 <dbg_le_set_bd_addr_req_handler+0x58>)
    57e4:	3009      	adds	r0, #9
    57e6:	60ab      	str	r3, [r5, #8]
    57e8:	60eb      	str	r3, [r5, #12]
    57ea:	7022      	strb	r2, [r4, #0]
    57ec:	320b      	adds	r2, #11
    57ee:	7123      	strb	r3, [r4, #4]
    57f0:	7162      	strb	r2, [r4, #5]
    57f2:	71a3      	strb	r3, [r4, #6]
    57f4:	71e3      	strb	r3, [r4, #7]
    57f6:	7223      	strb	r3, [r4, #8]
    57f8:	3a0a      	subs	r2, #10
    57fa:	4b0c      	ldr	r3, [pc, #48]	; (582c <dbg_le_set_bd_addr_req_handler+0x5c>)
    57fc:	7067      	strb	r7, [r4, #1]
    57fe:	70a6      	strb	r6, [r4, #2]
    5800:	70e6      	strb	r6, [r4, #3]
    5802:	4798      	blx	r3
    5804:	4b0a      	ldr	r3, [pc, #40]	; (5830 <dbg_le_set_bd_addr_req_handler+0x60>)
    5806:	1c20      	adds	r0, r4, #0
    5808:	802b      	strh	r3, [r5, #0]
    580a:	2306      	movs	r3, #6
    580c:	1c39      	adds	r1, r7, #0
    580e:	71e3      	strb	r3, [r4, #7]
    5810:	4b08      	ldr	r3, [pc, #32]	; (5834 <dbg_le_set_bd_addr_req_handler+0x64>)
    5812:	80ae      	strh	r6, [r5, #4]
    5814:	4798      	blx	r3
    5816:	4b08      	ldr	r3, [pc, #32]	; (5838 <dbg_le_set_bd_addr_req_handler+0x68>)
    5818:	4798      	blx	r3
    581a:	28d0      	cmp	r0, #208	; 0xd0
    581c:	d001      	beq.n	5822 <dbg_le_set_bd_addr_req_handler+0x52>
    581e:	68ab      	ldr	r3, [r5, #8]
    5820:	7818      	ldrb	r0, [r3, #0]
    5822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5824:	0000970c 	.word	0x0000970c
    5828:	200018a8 	.word	0x200018a8
    582c:	000074b7 	.word	0x000074b7
    5830:	00000329 	.word	0x00000329
    5834:	00004e51 	.word	0x00004e51
    5838:	000050b5 	.word	0x000050b5

0000583c <gapc_get_dev_info_cfm.constprop.1>:
    583c:	2200      	movs	r2, #0
    583e:	b538      	push	{r3, r4, r5, lr}
    5840:	4b2e      	ldr	r3, [pc, #184]	; (58fc <gapc_get_dev_info_cfm.constprop.1+0xc0>)
    5842:	250e      	movs	r5, #14
    5844:	609a      	str	r2, [r3, #8]
    5846:	60da      	str	r2, [r3, #12]
    5848:	4b2d      	ldr	r3, [pc, #180]	; (5900 <gapc_get_dev_info_cfm.constprop.1+0xc4>)
    584a:	681c      	ldr	r4, [r3, #0]
    584c:	2305      	movs	r3, #5
    584e:	7121      	strb	r1, [r4, #4]
    5850:	2110      	movs	r1, #16
    5852:	7023      	strb	r3, [r4, #0]
    5854:	70a5      	strb	r5, [r4, #2]
    5856:	3306      	adds	r3, #6
    5858:	3529      	adds	r5, #41	; 0x29
    585a:	7063      	strb	r3, [r4, #1]
    585c:	70e5      	strb	r5, [r4, #3]
    585e:	7161      	strb	r1, [r4, #5]
    5860:	71a2      	strb	r2, [r4, #6]
    5862:	71e2      	strb	r2, [r4, #7]
    5864:	7222      	strb	r2, [r4, #8]
    5866:	7260      	strb	r0, [r4, #9]
    5868:	72a2      	strb	r2, [r4, #10]
    586a:	2801      	cmp	r0, #1
    586c:	d032      	beq.n	58d4 <gapc_get_dev_info_cfm.constprop.1+0x98>
    586e:	4290      	cmp	r0, r2
    5870:	d01f      	beq.n	58b2 <gapc_get_dev_info_cfm.constprop.1+0x76>
    5872:	2802      	cmp	r0, #2
    5874:	d137      	bne.n	58e6 <gapc_get_dev_info_cfm.constprop.1+0xaa>
    5876:	4b23      	ldr	r3, [pc, #140]	; (5904 <gapc_get_dev_info_cfm.constprop.1+0xc8>)
    5878:	1c1a      	adds	r2, r3, #0
    587a:	32ce      	adds	r2, #206	; 0xce
    587c:	8811      	ldrh	r1, [r2, #0]
    587e:	72e1      	strb	r1, [r4, #11]
    5880:	8812      	ldrh	r2, [r2, #0]
    5882:	0a12      	lsrs	r2, r2, #8
    5884:	7322      	strb	r2, [r4, #12]
    5886:	1c1a      	adds	r2, r3, #0
    5888:	32d0      	adds	r2, #208	; 0xd0
    588a:	8811      	ldrh	r1, [r2, #0]
    588c:	7361      	strb	r1, [r4, #13]
    588e:	8812      	ldrh	r2, [r2, #0]
    5890:	0a12      	lsrs	r2, r2, #8
    5892:	73a2      	strb	r2, [r4, #14]
    5894:	1c1a      	adds	r2, r3, #0
    5896:	32d2      	adds	r2, #210	; 0xd2
    5898:	8811      	ldrh	r1, [r2, #0]
    589a:	33d4      	adds	r3, #212	; 0xd4
    589c:	73e1      	strb	r1, [r4, #15]
    589e:	8812      	ldrh	r2, [r2, #0]
    58a0:	2113      	movs	r1, #19
    58a2:	0a12      	lsrs	r2, r2, #8
    58a4:	7422      	strb	r2, [r4, #16]
    58a6:	881a      	ldrh	r2, [r3, #0]
    58a8:	7462      	strb	r2, [r4, #17]
    58aa:	881b      	ldrh	r3, [r3, #0]
    58ac:	0a1b      	lsrs	r3, r3, #8
    58ae:	74a3      	strb	r3, [r4, #18]
    58b0:	e01a      	b.n	58e8 <gapc_get_dev_info_cfm.constprop.1+0xac>
    58b2:	1c20      	adds	r0, r4, #0
    58b4:	4d13      	ldr	r5, [pc, #76]	; (5904 <gapc_get_dev_info_cfm.constprop.1+0xc8>)
    58b6:	4914      	ldr	r1, [pc, #80]	; (5908 <gapc_get_dev_info_cfm.constprop.1+0xcc>)
    58b8:	35aa      	adds	r5, #170	; 0xaa
    58ba:	882b      	ldrh	r3, [r5, #0]
    58bc:	300d      	adds	r0, #13
    58be:	72e3      	strb	r3, [r4, #11]
    58c0:	882b      	ldrh	r3, [r5, #0]
    58c2:	0a1b      	lsrs	r3, r3, #8
    58c4:	7323      	strb	r3, [r4, #12]
    58c6:	882a      	ldrh	r2, [r5, #0]
    58c8:	4b10      	ldr	r3, [pc, #64]	; (590c <gapc_get_dev_info_cfm.constprop.1+0xd0>)
    58ca:	4798      	blx	r3
    58cc:	8829      	ldrh	r1, [r5, #0]
    58ce:	310d      	adds	r1, #13
    58d0:	b289      	uxth	r1, r1
    58d2:	e009      	b.n	58e8 <gapc_get_dev_info_cfm.constprop.1+0xac>
    58d4:	4b0b      	ldr	r3, [pc, #44]	; (5904 <gapc_get_dev_info_cfm.constprop.1+0xc8>)
    58d6:	210d      	movs	r1, #13
    58d8:	33cc      	adds	r3, #204	; 0xcc
    58da:	881a      	ldrh	r2, [r3, #0]
    58dc:	72e2      	strb	r2, [r4, #11]
    58de:	881b      	ldrh	r3, [r3, #0]
    58e0:	0a1b      	lsrs	r3, r3, #8
    58e2:	7323      	strb	r3, [r4, #12]
    58e4:	e000      	b.n	58e8 <gapc_get_dev_info_cfm.constprop.1+0xac>
    58e6:	1c19      	adds	r1, r3, #0
    58e8:	1c0b      	adds	r3, r1, #0
    58ea:	3b09      	subs	r3, #9
    58ec:	71e3      	strb	r3, [r4, #7]
    58ee:	121b      	asrs	r3, r3, #8
    58f0:	7223      	strb	r3, [r4, #8]
    58f2:	1c20      	adds	r0, r4, #0
    58f4:	4b06      	ldr	r3, [pc, #24]	; (5910 <gapc_get_dev_info_cfm.constprop.1+0xd4>)
    58f6:	4798      	blx	r3
    58f8:	bd38      	pop	{r3, r4, r5, pc}
    58fa:	46c0      	nop			; (mov r8, r8)
    58fc:	200018a8 	.word	0x200018a8
    5900:	0000970c 	.word	0x0000970c
    5904:	20001948 	.word	0x20001948
    5908:	200019f4 	.word	0x200019f4
    590c:	000074b7 	.word	0x000074b7
    5910:	00004e51 	.word	0x00004e51

00005914 <check_ConnData_idx_role>:
    5914:	4b0c      	ldr	r3, [pc, #48]	; (5948 <check_ConnData_idx_role+0x34>)
    5916:	b570      	push	{r4, r5, r6, lr}
    5918:	1c04      	adds	r4, r0, #0
    591a:	2008      	movs	r0, #8
    591c:	429c      	cmp	r4, r3
    591e:	d011      	beq.n	5944 <check_ConnData_idx_role+0x30>
    5920:	2300      	movs	r3, #0
    5922:	2212      	movs	r2, #18
    5924:	435a      	muls	r2, r3
    5926:	4d09      	ldr	r5, [pc, #36]	; (594c <check_ConnData_idx_role+0x38>)
    5928:	b2d8      	uxtb	r0, r3
    592a:	1956      	adds	r6, r2, r5
    592c:	8976      	ldrh	r6, [r6, #10]
    592e:	42a6      	cmp	r6, r4
    5930:	d104      	bne.n	593c <check_ConnData_idx_role+0x28>
    5932:	2900      	cmp	r1, #0
    5934:	d006      	beq.n	5944 <check_ConnData_idx_role+0x30>
    5936:	5d53      	ldrb	r3, [r2, r5]
    5938:	700b      	strb	r3, [r1, #0]
    593a:	e003      	b.n	5944 <check_ConnData_idx_role+0x30>
    593c:	3301      	adds	r3, #1
    593e:	2b08      	cmp	r3, #8
    5940:	d1ef      	bne.n	5922 <check_ConnData_idx_role+0xe>
    5942:	1c18      	adds	r0, r3, #0
    5944:	bd70      	pop	{r4, r5, r6, pc}
    5946:	46c0      	nop			; (mov r8, r8)
    5948:	0000ffff 	.word	0x0000ffff
    594c:	200018b8 	.word	0x200018b8

00005950 <check_ConnData_emptyEntry>:
    5950:	2300      	movs	r3, #0
    5952:	2212      	movs	r2, #18
    5954:	435a      	muls	r2, r3
    5956:	4906      	ldr	r1, [pc, #24]	; (5970 <check_ConnData_emptyEntry+0x20>)
    5958:	b2d8      	uxtb	r0, r3
    595a:	1852      	adds	r2, r2, r1
    595c:	8951      	ldrh	r1, [r2, #10]
    595e:	4a05      	ldr	r2, [pc, #20]	; (5974 <check_ConnData_emptyEntry+0x24>)
    5960:	4291      	cmp	r1, r2
    5962:	d003      	beq.n	596c <check_ConnData_emptyEntry+0x1c>
    5964:	3301      	adds	r3, #1
    5966:	2b08      	cmp	r3, #8
    5968:	d1f3      	bne.n	5952 <check_ConnData_emptyEntry+0x2>
    596a:	1c18      	adds	r0, r3, #0
    596c:	4770      	bx	lr
    596e:	46c0      	nop			; (mov r8, r8)
    5970:	200018b8 	.word	0x200018b8
    5974:	0000ffff 	.word	0x0000ffff

00005978 <gapc_cmp_evt>:
    5978:	b5f0      	push	{r4, r5, r6, r7, lr}
    597a:	1c14      	adds	r4, r2, #0
    597c:	780a      	ldrb	r2, [r1, #0]
    597e:	b085      	sub	sp, #20
    5980:	1c03      	adds	r3, r0, #0
    5982:	1e50      	subs	r0, r2, #1
    5984:	9201      	str	r2, [sp, #4]
    5986:	784d      	ldrb	r5, [r1, #1]
    5988:	280f      	cmp	r0, #15
    598a:	d900      	bls.n	598e <gapc_cmp_evt+0x16>
    598c:	e085      	b.n	5a9a <gapc_cmp_evt+0x122>
    598e:	f001 fc6d 	bl	726c <__gnu_thumb1_case_uqi>
    5992:	5808      	.short	0x5808
    5994:	58588484 	.word	0x58588484
    5998:	132e6c84 	.word	0x132e6c84
    599c:	84849126 	.word	0x84849126
    59a0:	483a      	.short	0x483a
    59a2:	203a      	movs	r0, #58	; 0x3a
    59a4:	2d00      	cmp	r5, #0
    59a6:	d100      	bne.n	59aa <gapc_cmp_evt+0x32>
    59a8:	e085      	b.n	5ab6 <gapc_cmp_evt+0x13e>
    59aa:	0a1b      	lsrs	r3, r3, #8
    59ac:	8023      	strh	r3, [r4, #0]
    59ae:	2300      	movs	r3, #0
    59b0:	70a5      	strb	r5, [r4, #2]
    59b2:	70e3      	strb	r3, [r4, #3]
    59b4:	3834      	subs	r0, #52	; 0x34
    59b6:	e07e      	b.n	5ab6 <gapc_cmp_evt+0x13e>
    59b8:	aa02      	add	r2, sp, #8
    59ba:	1dd6      	adds	r6, r2, #7
    59bc:	2201      	movs	r2, #1
    59be:	0a1f      	lsrs	r7, r3, #8
    59c0:	1c38      	adds	r0, r7, #0
    59c2:	1c31      	adds	r1, r6, #0
    59c4:	4b3d      	ldr	r3, [pc, #244]	; (5abc <gapc_cmp_evt+0x144>)
    59c6:	7032      	strb	r2, [r6, #0]
    59c8:	4798      	blx	r3
    59ca:	2807      	cmp	r0, #7
    59cc:	d803      	bhi.n	59d6 <gapc_cmp_evt+0x5e>
    59ce:	7833      	ldrb	r3, [r6, #0]
    59d0:	203a      	movs	r0, #58	; 0x3a
    59d2:	2b00      	cmp	r3, #0
    59d4:	d06f      	beq.n	5ab6 <gapc_cmp_evt+0x13e>
    59d6:	8067      	strh	r7, [r4, #2]
    59d8:	7125      	strb	r5, [r4, #4]
    59da:	2009      	movs	r0, #9
    59dc:	e06b      	b.n	5ab6 <gapc_cmp_evt+0x13e>
    59de:	203a      	movs	r0, #58	; 0x3a
    59e0:	2d00      	cmp	r5, #0
    59e2:	d068      	beq.n	5ab6 <gapc_cmp_evt+0x13e>
    59e4:	0a1b      	lsrs	r3, r3, #8
    59e6:	8023      	strh	r3, [r4, #0]
    59e8:	70a5      	strb	r5, [r4, #2]
    59ea:	382c      	subs	r0, #44	; 0x2c
    59ec:	e063      	b.n	5ab6 <gapc_cmp_evt+0x13e>
    59ee:	203a      	movs	r0, #58	; 0x3a
    59f0:	2d00      	cmp	r5, #0
    59f2:	d060      	beq.n	5ab6 <gapc_cmp_evt+0x13e>
    59f4:	0a1b      	lsrs	r3, r3, #8
    59f6:	8023      	strh	r3, [r4, #0]
    59f8:	2300      	movs	r3, #0
    59fa:	70a5      	strb	r5, [r4, #2]
    59fc:	80a3      	strh	r3, [r4, #4]
    59fe:	80e3      	strh	r3, [r4, #6]
    5a00:	8123      	strh	r3, [r4, #8]
    5a02:	3833      	subs	r0, #51	; 0x33
    5a04:	e057      	b.n	5ab6 <gapc_cmp_evt+0x13e>
    5a06:	203a      	movs	r0, #58	; 0x3a
    5a08:	2d00      	cmp	r5, #0
    5a0a:	d054      	beq.n	5ab6 <gapc_cmp_evt+0x13e>
    5a0c:	7225      	strb	r5, [r4, #8]
    5a0e:	4c2c      	ldr	r4, [pc, #176]	; (5ac0 <gapc_cmp_evt+0x148>)
    5a10:	4b2c      	ldr	r3, [pc, #176]	; (5ac4 <gapc_cmp_evt+0x14c>)
    5a12:	482d      	ldr	r0, [pc, #180]	; (5ac8 <gapc_cmp_evt+0x150>)
    5a14:	492d      	ldr	r1, [pc, #180]	; (5acc <gapc_cmp_evt+0x154>)
    5a16:	228f      	movs	r2, #143	; 0x8f
    5a18:	6825      	ldr	r5, [r4, #0]
    5a1a:	47a8      	blx	r5
    5a1c:	6823      	ldr	r3, [r4, #0]
    5a1e:	482c      	ldr	r0, [pc, #176]	; (5ad0 <gapc_cmp_evt+0x158>)
    5a20:	e00c      	b.n	5a3c <gapc_cmp_evt+0xc4>
    5a22:	203a      	movs	r0, #58	; 0x3a
    5a24:	2d00      	cmp	r5, #0
    5a26:	d046      	beq.n	5ab6 <gapc_cmp_evt+0x13e>
    5a28:	7125      	strb	r5, [r4, #4]
    5a2a:	4c25      	ldr	r4, [pc, #148]	; (5ac0 <gapc_cmp_evt+0x148>)
    5a2c:	4b25      	ldr	r3, [pc, #148]	; (5ac4 <gapc_cmp_evt+0x14c>)
    5a2e:	4826      	ldr	r0, [pc, #152]	; (5ac8 <gapc_cmp_evt+0x150>)
    5a30:	4926      	ldr	r1, [pc, #152]	; (5acc <gapc_cmp_evt+0x154>)
    5a32:	229f      	movs	r2, #159	; 0x9f
    5a34:	6825      	ldr	r5, [r4, #0]
    5a36:	47a8      	blx	r5
    5a38:	6823      	ldr	r3, [r4, #0]
    5a3a:	4826      	ldr	r0, [pc, #152]	; (5ad4 <gapc_cmp_evt+0x15c>)
    5a3c:	4798      	blx	r3
    5a3e:	2029      	movs	r0, #41	; 0x29
    5a40:	e039      	b.n	5ab6 <gapc_cmp_evt+0x13e>
    5a42:	203a      	movs	r0, #58	; 0x3a
    5a44:	2d00      	cmp	r5, #0
    5a46:	d036      	beq.n	5ab6 <gapc_cmp_evt+0x13e>
    5a48:	4f1d      	ldr	r7, [pc, #116]	; (5ac0 <gapc_cmp_evt+0x148>)
    5a4a:	4920      	ldr	r1, [pc, #128]	; (5acc <gapc_cmp_evt+0x154>)
    5a4c:	22b5      	movs	r2, #181	; 0xb5
    5a4e:	4b1d      	ldr	r3, [pc, #116]	; (5ac4 <gapc_cmp_evt+0x14c>)
    5a50:	481d      	ldr	r0, [pc, #116]	; (5ac8 <gapc_cmp_evt+0x150>)
    5a52:	683e      	ldr	r6, [r7, #0]
    5a54:	47b0      	blx	r6
    5a56:	683b      	ldr	r3, [r7, #0]
    5a58:	481f      	ldr	r0, [pc, #124]	; (5ad8 <gapc_cmp_evt+0x160>)
    5a5a:	1c29      	adds	r1, r5, #0
    5a5c:	4798      	blx	r3
    5a5e:	466b      	mov	r3, sp
    5a60:	791b      	ldrb	r3, [r3, #4]
    5a62:	70e5      	strb	r5, [r4, #3]
    5a64:	70a3      	strb	r3, [r4, #2]
    5a66:	2011      	movs	r0, #17
    5a68:	e025      	b.n	5ab6 <gapc_cmp_evt+0x13e>
    5a6a:	203a      	movs	r0, #58	; 0x3a
    5a6c:	2d00      	cmp	r5, #0
    5a6e:	d022      	beq.n	5ab6 <gapc_cmp_evt+0x13e>
    5a70:	0a1b      	lsrs	r3, r3, #8
    5a72:	8063      	strh	r3, [r4, #2]
    5a74:	7025      	strb	r5, [r4, #0]
    5a76:	1d20      	adds	r0, r4, #4
    5a78:	2100      	movs	r1, #0
    5a7a:	2205      	movs	r2, #5
    5a7c:	4b17      	ldr	r3, [pc, #92]	; (5adc <gapc_cmp_evt+0x164>)
    5a7e:	4798      	blx	r3
    5a80:	4c0f      	ldr	r4, [pc, #60]	; (5ac0 <gapc_cmp_evt+0x148>)
    5a82:	4912      	ldr	r1, [pc, #72]	; (5acc <gapc_cmp_evt+0x154>)
    5a84:	22c7      	movs	r2, #199	; 0xc7
    5a86:	4b0f      	ldr	r3, [pc, #60]	; (5ac4 <gapc_cmp_evt+0x14c>)
    5a88:	480f      	ldr	r0, [pc, #60]	; (5ac8 <gapc_cmp_evt+0x150>)
    5a8a:	6826      	ldr	r6, [r4, #0]
    5a8c:	47b0      	blx	r6
    5a8e:	6823      	ldr	r3, [r4, #0]
    5a90:	4813      	ldr	r0, [pc, #76]	; (5ae0 <gapc_cmp_evt+0x168>)
    5a92:	1c29      	adds	r1, r5, #0
    5a94:	4798      	blx	r3
    5a96:	2012      	movs	r0, #18
    5a98:	e00d      	b.n	5ab6 <gapc_cmp_evt+0x13e>
    5a9a:	4c09      	ldr	r4, [pc, #36]	; (5ac0 <gapc_cmp_evt+0x148>)
    5a9c:	490b      	ldr	r1, [pc, #44]	; (5acc <gapc_cmp_evt+0x154>)
    5a9e:	22d1      	movs	r2, #209	; 0xd1
    5aa0:	4b08      	ldr	r3, [pc, #32]	; (5ac4 <gapc_cmp_evt+0x14c>)
    5aa2:	4809      	ldr	r0, [pc, #36]	; (5ac8 <gapc_cmp_evt+0x150>)
    5aa4:	6825      	ldr	r5, [r4, #0]
    5aa6:	47a8      	blx	r5
    5aa8:	6823      	ldr	r3, [r4, #0]
    5aaa:	480e      	ldr	r0, [pc, #56]	; (5ae4 <gapc_cmp_evt+0x16c>)
    5aac:	9901      	ldr	r1, [sp, #4]
    5aae:	4798      	blx	r3
    5ab0:	2000      	movs	r0, #0
    5ab2:	e000      	b.n	5ab6 <gapc_cmp_evt+0x13e>
    5ab4:	203a      	movs	r0, #58	; 0x3a
    5ab6:	b005      	add	sp, #20
    5ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5aba:	46c0      	nop			; (mov r8, r8)
    5abc:	00005915 	.word	0x00005915
    5ac0:	20000030 	.word	0x20000030
    5ac4:	000098dc 	.word	0x000098dc
    5ac8:	000093e1 	.word	0x000093e1
    5acc:	00009907 	.word	0x00009907
    5ad0:	00009942 	.word	0x00009942
    5ad4:	00009964 	.word	0x00009964
    5ad8:	00009986 	.word	0x00009986
    5adc:	000074c9 	.word	0x000074c9
    5ae0:	000099ad 	.word	0x000099ad
    5ae4:	000099d6 	.word	0x000099d6

00005ae8 <gapc_connection_cfm_handler>:
    5ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aea:	2500      	movs	r5, #0
    5aec:	b085      	sub	sp, #20
    5aee:	1c1e      	adds	r6, r3, #0
    5af0:	ab0a      	add	r3, sp, #40	; 0x28
    5af2:	781b      	ldrb	r3, [r3, #0]
    5af4:	9201      	str	r2, [sp, #4]
    5af6:	9302      	str	r3, [sp, #8]
    5af8:	ab0b      	add	r3, sp, #44	; 0x2c
    5afa:	781b      	ldrb	r3, [r3, #0]
    5afc:	1c07      	adds	r7, r0, #0
    5afe:	9303      	str	r3, [sp, #12]
    5b00:	ab0c      	add	r3, sp, #48	; 0x30
    5b02:	881a      	ldrh	r2, [r3, #0]
    5b04:	4b23      	ldr	r3, [pc, #140]	; (5b94 <gapc_connection_cfm_handler+0xac>)
    5b06:	9100      	str	r1, [sp, #0]
    5b08:	609d      	str	r5, [r3, #8]
    5b0a:	60dd      	str	r5, [r3, #12]
    5b0c:	4b22      	ldr	r3, [pc, #136]	; (5b98 <gapc_connection_cfm_handler+0xb0>)
    5b0e:	1c39      	adds	r1, r7, #0
    5b10:	681c      	ldr	r4, [r3, #0]
    5b12:	2305      	movs	r3, #5
    5b14:	1c20      	adds	r0, r4, #0
    5b16:	7023      	strb	r3, [r4, #0]
    5b18:	3b03      	subs	r3, #3
    5b1a:	7063      	strb	r3, [r4, #1]
    5b1c:	330c      	adds	r3, #12
    5b1e:	70a3      	strb	r3, [r4, #2]
    5b20:	70e3      	strb	r3, [r4, #3]
    5b22:	3302      	adds	r3, #2
    5b24:	7122      	strb	r2, [r4, #4]
    5b26:	7163      	strb	r3, [r4, #5]
    5b28:	4f1c      	ldr	r7, [pc, #112]	; (5b9c <gapc_connection_cfm_handler+0xb4>)
    5b2a:	71a5      	strb	r5, [r4, #6]
    5b2c:	71e5      	strb	r5, [r4, #7]
    5b2e:	7225      	strb	r5, [r4, #8]
    5b30:	2210      	movs	r2, #16
    5b32:	3009      	adds	r0, #9
    5b34:	47b8      	blx	r7
    5b36:	466b      	mov	r3, sp
    5b38:	1c20      	adds	r0, r4, #0
    5b3a:	781b      	ldrb	r3, [r3, #0]
    5b3c:	9901      	ldr	r1, [sp, #4]
    5b3e:	7663      	strb	r3, [r4, #25]
    5b40:	9b00      	ldr	r3, [sp, #0]
    5b42:	2210      	movs	r2, #16
    5b44:	0a1b      	lsrs	r3, r3, #8
    5b46:	76a3      	strb	r3, [r4, #26]
    5b48:	9b00      	ldr	r3, [sp, #0]
    5b4a:	301d      	adds	r0, #29
    5b4c:	0c1b      	lsrs	r3, r3, #16
    5b4e:	76e3      	strb	r3, [r4, #27]
    5b50:	9b00      	ldr	r3, [sp, #0]
    5b52:	0e1b      	lsrs	r3, r3, #24
    5b54:	7723      	strb	r3, [r4, #28]
    5b56:	47b8      	blx	r7
    5b58:	1c23      	adds	r3, r4, #0
    5b5a:	0a32      	lsrs	r2, r6, #8
    5b5c:	332d      	adds	r3, #45	; 0x2d
    5b5e:	705a      	strb	r2, [r3, #1]
    5b60:	0c32      	lsrs	r2, r6, #16
    5b62:	709a      	strb	r2, [r3, #2]
    5b64:	1c22      	adds	r2, r4, #0
    5b66:	701e      	strb	r6, [r3, #0]
    5b68:	3230      	adds	r2, #48	; 0x30
    5b6a:	0e33      	lsrs	r3, r6, #24
    5b6c:	7013      	strb	r3, [r2, #0]
    5b6e:	466a      	mov	r2, sp
    5b70:	1c23      	adds	r3, r4, #0
    5b72:	7a12      	ldrb	r2, [r2, #8]
    5b74:	3331      	adds	r3, #49	; 0x31
    5b76:	701a      	strb	r2, [r3, #0]
    5b78:	466a      	mov	r2, sp
    5b7a:	7b12      	ldrb	r2, [r2, #12]
    5b7c:	705d      	strb	r5, [r3, #1]
    5b7e:	709a      	strb	r2, [r3, #2]
    5b80:	70dd      	strb	r5, [r3, #3]
    5b82:	232c      	movs	r3, #44	; 0x2c
    5b84:	1c20      	adds	r0, r4, #0
    5b86:	71e3      	strb	r3, [r4, #7]
    5b88:	2135      	movs	r1, #53	; 0x35
    5b8a:	4b05      	ldr	r3, [pc, #20]	; (5ba0 <gapc_connection_cfm_handler+0xb8>)
    5b8c:	4798      	blx	r3
    5b8e:	1c28      	adds	r0, r5, #0
    5b90:	b005      	add	sp, #20
    5b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b94:	200018a8 	.word	0x200018a8
    5b98:	0000970c 	.word	0x0000970c
    5b9c:	000074b7 	.word	0x000074b7
    5ba0:	00004e51 	.word	0x00004e51

00005ba4 <gapc_con_req_ind>:
    5ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ba6:	7845      	ldrb	r5, [r0, #1]
    5ba8:	7803      	ldrb	r3, [r0, #0]
    5baa:	4c30      	ldr	r4, [pc, #192]	; (5c6c <gapc_con_req_ind+0xc8>)
    5bac:	022d      	lsls	r5, r5, #8
    5bae:	431d      	orrs	r5, r3
    5bb0:	85a5      	strh	r5, [r4, #44]	; 0x2c
    5bb2:	78c3      	ldrb	r3, [r0, #3]
    5bb4:	7882      	ldrb	r2, [r0, #2]
    5bb6:	b08b      	sub	sp, #44	; 0x2c
    5bb8:	021b      	lsls	r3, r3, #8
    5bba:	431a      	orrs	r2, r3
    5bbc:	466b      	mov	r3, sp
    5bbe:	9205      	str	r2, [sp, #20]
    5bc0:	8a9b      	ldrh	r3, [r3, #20]
    5bc2:	2120      	movs	r1, #32
    5bc4:	85e3      	strh	r3, [r4, #46]	; 0x2e
    5bc6:	7943      	ldrb	r3, [r0, #5]
    5bc8:	7902      	ldrb	r2, [r0, #4]
    5bca:	021b      	lsls	r3, r3, #8
    5bcc:	431a      	orrs	r2, r3
    5bce:	466b      	mov	r3, sp
    5bd0:	9206      	str	r2, [sp, #24]
    5bd2:	8b1b      	ldrh	r3, [r3, #24]
    5bd4:	1c06      	adds	r6, r0, #0
    5bd6:	8623      	strh	r3, [r4, #48]	; 0x30
    5bd8:	79c3      	ldrb	r3, [r0, #7]
    5bda:	7982      	ldrb	r2, [r0, #6]
    5bdc:	021b      	lsls	r3, r3, #8
    5bde:	431a      	orrs	r2, r3
    5be0:	466b      	mov	r3, sp
    5be2:	9207      	str	r2, [sp, #28]
    5be4:	466a      	mov	r2, sp
    5be6:	8b9b      	ldrh	r3, [r3, #28]
    5be8:	1852      	adds	r2, r2, r1
    5bea:	8663      	strh	r3, [r4, #50]	; 0x32
    5bec:	7a43      	ldrb	r3, [r0, #9]
    5bee:	1c01      	adds	r1, r0, #0
    5bf0:	9308      	str	r3, [sp, #32]
    5bf2:	1c23      	adds	r3, r4, #0
    5bf4:	7812      	ldrb	r2, [r2, #0]
    5bf6:	3377      	adds	r3, #119	; 0x77
    5bf8:	3478      	adds	r4, #120	; 0x78
    5bfa:	701a      	strb	r2, [r3, #0]
    5bfc:	310a      	adds	r1, #10
    5bfe:	2206      	movs	r2, #6
    5c00:	4b1b      	ldr	r3, [pc, #108]	; (5c70 <gapc_con_req_ind+0xcc>)
    5c02:	1c20      	adds	r0, r4, #0
    5c04:	4798      	blx	r3
    5c06:	7c33      	ldrb	r3, [r6, #16]
    5c08:	9309      	str	r3, [sp, #36]	; 0x24
    5c0a:	4b1a      	ldr	r3, [pc, #104]	; (5c74 <gapc_con_req_ind+0xd0>)
    5c0c:	4798      	blx	r3
    5c0e:	4e1a      	ldr	r6, [pc, #104]	; (5c78 <gapc_con_req_ind+0xd4>)
    5c10:	1e07      	subs	r7, r0, #0
    5c12:	2f07      	cmp	r7, #7
    5c14:	d81b      	bhi.n	5c4e <gapc_con_req_ind+0xaa>
    5c16:	2312      	movs	r3, #18
    5c18:	4343      	muls	r3, r0
    5c1a:	18f0      	adds	r0, r6, r3
    5c1c:	8145      	strh	r5, [r0, #10]
    5c1e:	4669      	mov	r1, sp
    5c20:	2524      	movs	r5, #36	; 0x24
    5c22:	1949      	adds	r1, r1, r5
    5c24:	7809      	ldrb	r1, [r1, #0]
    5c26:	2206      	movs	r2, #6
    5c28:	54f1      	strb	r1, [r6, r3]
    5c2a:	2120      	movs	r1, #32
    5c2c:	466b      	mov	r3, sp
    5c2e:	185b      	adds	r3, r3, r1
    5c30:	781b      	ldrb	r3, [r3, #0]
    5c32:	1c21      	adds	r1, r4, #0
    5c34:	7043      	strb	r3, [r0, #1]
    5c36:	466b      	mov	r3, sp
    5c38:	8a9b      	ldrh	r3, [r3, #20]
    5c3a:	3002      	adds	r0, #2
    5c3c:	8143      	strh	r3, [r0, #10]
    5c3e:	466b      	mov	r3, sp
    5c40:	8b1b      	ldrh	r3, [r3, #24]
    5c42:	8183      	strh	r3, [r0, #12]
    5c44:	466b      	mov	r3, sp
    5c46:	8b9b      	ldrh	r3, [r3, #28]
    5c48:	81c3      	strh	r3, [r0, #14]
    5c4a:	4b09      	ldr	r3, [pc, #36]	; (5c70 <gapc_con_req_ind+0xcc>)
    5c4c:	4798      	blx	r3
    5c4e:	2112      	movs	r1, #18
    5c50:	2300      	movs	r3, #0
    5c52:	434f      	muls	r7, r1
    5c54:	9300      	str	r3, [sp, #0]
    5c56:	9301      	str	r3, [sp, #4]
    5c58:	19f6      	adds	r6, r6, r7
    5c5a:	8971      	ldrh	r1, [r6, #10]
    5c5c:	4a07      	ldr	r2, [pc, #28]	; (5c7c <gapc_con_req_ind+0xd8>)
    5c5e:	9102      	str	r1, [sp, #8]
    5c60:	1c10      	adds	r0, r2, #0
    5c62:	1c19      	adds	r1, r3, #0
    5c64:	4c06      	ldr	r4, [pc, #24]	; (5c80 <gapc_con_req_ind+0xdc>)
    5c66:	47a0      	blx	r4
    5c68:	b00b      	add	sp, #44	; 0x2c
    5c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c6c:	20001948 	.word	0x20001948
    5c70:	000074b7 	.word	0x000074b7
    5c74:	00005951 	.word	0x00005951
    5c78:	200018b8 	.word	0x200018b8
    5c7c:	20000dc4 	.word	0x20000dc4
    5c80:	00005ae9 	.word	0x00005ae9

00005c84 <gapc_disconnect_cmd_handler>:
    5c84:	b510      	push	{r4, lr}
    5c86:	2400      	movs	r4, #0
    5c88:	2205      	movs	r2, #5
    5c8a:	4b0d      	ldr	r3, [pc, #52]	; (5cc0 <gapc_disconnect_cmd_handler+0x3c>)
    5c8c:	609c      	str	r4, [r3, #8]
    5c8e:	60dc      	str	r4, [r3, #12]
    5c90:	4b0c      	ldr	r3, [pc, #48]	; (5cc4 <gapc_disconnect_cmd_handler+0x40>)
    5c92:	681b      	ldr	r3, [r3, #0]
    5c94:	701a      	strb	r2, [r3, #0]
    5c96:	3a01      	subs	r2, #1
    5c98:	705a      	strb	r2, [r3, #1]
    5c9a:	320a      	adds	r2, #10
    5c9c:	709a      	strb	r2, [r3, #2]
    5c9e:	70da      	strb	r2, [r3, #3]
    5ca0:	3202      	adds	r2, #2
    5ca2:	715a      	strb	r2, [r3, #5]
    5ca4:	3a0f      	subs	r2, #15
    5ca6:	725a      	strb	r2, [r3, #9]
    5ca8:	3201      	adds	r2, #1
    5caa:	7119      	strb	r1, [r3, #4]
    5cac:	719c      	strb	r4, [r3, #6]
    5cae:	721c      	strb	r4, [r3, #8]
    5cb0:	7298      	strb	r0, [r3, #10]
    5cb2:	71da      	strb	r2, [r3, #7]
    5cb4:	1c18      	adds	r0, r3, #0
    5cb6:	210b      	movs	r1, #11
    5cb8:	4b03      	ldr	r3, [pc, #12]	; (5cc8 <gapc_disconnect_cmd_handler+0x44>)
    5cba:	4798      	blx	r3
    5cbc:	1c20      	adds	r0, r4, #0
    5cbe:	bd10      	pop	{r4, pc}
    5cc0:	200018a8 	.word	0x200018a8
    5cc4:	0000970c 	.word	0x0000970c
    5cc8:	00004e51 	.word	0x00004e51

00005ccc <gapc_disconnect_ind>:
    5ccc:	b510      	push	{r4, lr}
    5cce:	1c04      	adds	r4, r0, #0
    5cd0:	7843      	ldrb	r3, [r0, #1]
    5cd2:	7800      	ldrb	r0, [r0, #0]
    5cd4:	021b      	lsls	r3, r3, #8
    5cd6:	4318      	orrs	r0, r3
    5cd8:	8008      	strh	r0, [r1, #0]
    5cda:	78a3      	ldrb	r3, [r4, #2]
    5cdc:	1c0a      	adds	r2, r1, #0
    5cde:	70cb      	strb	r3, [r1, #3]
    5ce0:	2100      	movs	r1, #0
    5ce2:	4b06      	ldr	r3, [pc, #24]	; (5cfc <gapc_disconnect_ind+0x30>)
    5ce4:	7091      	strb	r1, [r2, #2]
    5ce6:	4798      	blx	r3
    5ce8:	2807      	cmp	r0, #7
    5cea:	d806      	bhi.n	5cfa <gapc_disconnect_ind+0x2e>
    5cec:	2312      	movs	r3, #18
    5cee:	4358      	muls	r0, r3
    5cf0:	4b03      	ldr	r3, [pc, #12]	; (5d00 <gapc_disconnect_ind+0x34>)
    5cf2:	1818      	adds	r0, r3, r0
    5cf4:	2301      	movs	r3, #1
    5cf6:	425b      	negs	r3, r3
    5cf8:	8143      	strh	r3, [r0, #10]
    5cfa:	bd10      	pop	{r4, pc}
    5cfc:	00005915 	.word	0x00005915
    5d00:	200018b8 	.word	0x200018b8

00005d04 <gapc_bond_cmd_handler>:
    5d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5d06:	2400      	movs	r4, #0
    5d08:	4684      	mov	ip, r0
    5d0a:	a808      	add	r0, sp, #32
    5d0c:	7807      	ldrb	r7, [r0, #0]
    5d0e:	a809      	add	r0, sp, #36	; 0x24
    5d10:	7806      	ldrb	r6, [r0, #0]
    5d12:	a80a      	add	r0, sp, #40	; 0x28
    5d14:	7800      	ldrb	r0, [r0, #0]
    5d16:	2505      	movs	r5, #5
    5d18:	9000      	str	r0, [sp, #0]
    5d1a:	a80b      	add	r0, sp, #44	; 0x2c
    5d1c:	7800      	ldrb	r0, [r0, #0]
    5d1e:	9001      	str	r0, [sp, #4]
    5d20:	4811      	ldr	r0, [pc, #68]	; (5d68 <gapc_bond_cmd_handler+0x64>)
    5d22:	6084      	str	r4, [r0, #8]
    5d24:	60c4      	str	r4, [r0, #12]
    5d26:	4811      	ldr	r0, [pc, #68]	; (5d6c <gapc_bond_cmd_handler+0x68>)
    5d28:	6800      	ldr	r0, [r0, #0]
    5d2a:	7303      	strb	r3, [r0, #12]
    5d2c:	466b      	mov	r3, sp
    5d2e:	781b      	ldrb	r3, [r3, #0]
    5d30:	7005      	strb	r5, [r0, #0]
    5d32:	73c3      	strb	r3, [r0, #15]
    5d34:	350d      	adds	r5, #13
    5d36:	466b      	mov	r3, sp
    5d38:	7045      	strb	r5, [r0, #1]
    5d3a:	3d04      	subs	r5, #4
    5d3c:	7085      	strb	r5, [r0, #2]
    5d3e:	70c5      	strb	r5, [r0, #3]
    5d40:	4665      	mov	r5, ip
    5d42:	791b      	ldrb	r3, [r3, #4]
    5d44:	7105      	strb	r5, [r0, #4]
    5d46:	7403      	strb	r3, [r0, #16]
    5d48:	2510      	movs	r5, #16
    5d4a:	2308      	movs	r3, #8
    5d4c:	7184      	strb	r4, [r0, #6]
    5d4e:	7204      	strb	r4, [r0, #8]
    5d50:	340a      	adds	r4, #10
    5d52:	7145      	strb	r5, [r0, #5]
    5d54:	7347      	strb	r7, [r0, #13]
    5d56:	7386      	strb	r6, [r0, #14]
    5d58:	7244      	strb	r4, [r0, #9]
    5d5a:	7281      	strb	r1, [r0, #10]
    5d5c:	72c2      	strb	r2, [r0, #11]
    5d5e:	71c3      	strb	r3, [r0, #7]
    5d60:	2111      	movs	r1, #17
    5d62:	4b03      	ldr	r3, [pc, #12]	; (5d70 <gapc_bond_cmd_handler+0x6c>)
    5d64:	4798      	blx	r3
    5d66:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5d68:	200018a8 	.word	0x200018a8
    5d6c:	0000970c 	.word	0x0000970c
    5d70:	00004e51 	.word	0x00004e51

00005d74 <gapc_bond_ind>:
    5d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d76:	780e      	ldrb	r6, [r1, #0]
    5d78:	1c03      	adds	r3, r0, #0
    5d7a:	1eb0      	subs	r0, r6, #2
    5d7c:	2805      	cmp	r0, #5
    5d7e:	d85d      	bhi.n	5e3c <gapc_bond_ind+0xc8>
    5d80:	1c15      	adds	r5, r2, #0
    5d82:	1c0c      	adds	r4, r1, #0
    5d84:	f001 fa72 	bl	726c <__gnu_thumb1_case_uqi>
    5d88:	2f5a030d 	.word	0x2f5a030d
    5d8c:	4740      	.short	0x4740
    5d8e:	2009      	movs	r0, #9
    5d90:	2a00      	cmp	r2, #0
    5d92:	d054      	beq.n	5e3e <gapc_bond_ind+0xca>
    5d94:	0a1b      	lsrs	r3, r3, #8
    5d96:	8053      	strh	r3, [r2, #2]
    5d98:	788b      	ldrb	r3, [r1, #2]
    5d9a:	4829      	ldr	r0, [pc, #164]	; (5e40 <gapc_bond_ind+0xcc>)
    5d9c:	7113      	strb	r3, [r2, #4]
    5d9e:	2100      	movs	r1, #0
    5da0:	e01c      	b.n	5ddc <gapc_bond_ind+0x68>
    5da2:	2009      	movs	r0, #9
    5da4:	2a00      	cmp	r2, #0
    5da6:	d04a      	beq.n	5e3e <gapc_bond_ind+0xca>
    5da8:	4c25      	ldr	r4, [pc, #148]	; (5e40 <gapc_bond_ind+0xcc>)
    5daa:	0a1b      	lsrs	r3, r3, #8
    5dac:	8053      	strh	r3, [r2, #2]
    5dae:	788b      	ldrb	r3, [r1, #2]
    5db0:	2700      	movs	r7, #0
    5db2:	1c10      	adds	r0, r2, #0
    5db4:	1c21      	adds	r1, r4, #0
    5db6:	7013      	strb	r3, [r2, #0]
    5db8:	4e22      	ldr	r6, [pc, #136]	; (5e44 <gapc_bond_ind+0xd0>)
    5dba:	7117      	strb	r7, [r2, #4]
    5dbc:	312e      	adds	r1, #46	; 0x2e
    5dbe:	2217      	movs	r2, #23
    5dc0:	3032      	adds	r0, #50	; 0x32
    5dc2:	47b0      	blx	r6
    5dc4:	1c28      	adds	r0, r5, #0
    5dc6:	1c21      	adds	r1, r4, #0
    5dc8:	2210      	movs	r2, #16
    5dca:	311e      	adds	r1, #30
    5dcc:	3022      	adds	r0, #34	; 0x22
    5dce:	47b0      	blx	r6
    5dd0:	1ca1      	adds	r1, r4, #2
    5dd2:	1da8      	adds	r0, r5, #6
    5dd4:	221c      	movs	r2, #28
    5dd6:	47b0      	blx	r6
    5dd8:	1c20      	adds	r0, r4, #0
    5dda:	1c39      	adds	r1, r7, #0
    5ddc:	2246      	movs	r2, #70	; 0x46
    5dde:	4b1a      	ldr	r3, [pc, #104]	; (5e48 <gapc_bond_ind+0xd4>)
    5de0:	4798      	blx	r3
    5de2:	2009      	movs	r0, #9
    5de4:	e02b      	b.n	5e3e <gapc_bond_ind+0xca>
    5de6:	4d16      	ldr	r5, [pc, #88]	; (5e40 <gapc_bond_ind+0xcc>)
    5de8:	3102      	adds	r1, #2
    5dea:	1c28      	adds	r0, r5, #0
    5dec:	2210      	movs	r2, #16
    5dee:	4e15      	ldr	r6, [pc, #84]	; (5e44 <gapc_bond_ind+0xd0>)
    5df0:	302e      	adds	r0, #46	; 0x2e
    5df2:	47b0      	blx	r6
    5df4:	1c28      	adds	r0, r5, #0
    5df6:	1c21      	adds	r1, r4, #0
    5df8:	303f      	adds	r0, #63	; 0x3f
    5dfa:	3112      	adds	r1, #18
    5dfc:	2206      	movs	r2, #6
    5dfe:	47b0      	blx	r6
    5e00:	7e23      	ldrb	r3, [r4, #24]
    5e02:	353e      	adds	r5, #62	; 0x3e
    5e04:	702b      	strb	r3, [r5, #0]
    5e06:	e019      	b.n	5e3c <gapc_bond_ind+0xc8>
    5e08:	480d      	ldr	r0, [pc, #52]	; (5e40 <gapc_bond_ind+0xcc>)
    5e0a:	3102      	adds	r1, #2
    5e0c:	2210      	movs	r2, #16
    5e0e:	4b0d      	ldr	r3, [pc, #52]	; (5e44 <gapc_bond_ind+0xd0>)
    5e10:	301e      	adds	r0, #30
    5e12:	4798      	blx	r3
    5e14:	e012      	b.n	5e3c <gapc_bond_ind+0xc8>
    5e16:	4d0a      	ldr	r5, [pc, #40]	; (5e40 <gapc_bond_ind+0xcc>)
    5e18:	3102      	adds	r1, #2
    5e1a:	2210      	movs	r2, #16
    5e1c:	4e09      	ldr	r6, [pc, #36]	; (5e44 <gapc_bond_ind+0xd0>)
    5e1e:	1ca8      	adds	r0, r5, #2
    5e20:	47b0      	blx	r6
    5e22:	1c28      	adds	r0, r5, #0
    5e24:	1c21      	adds	r1, r4, #0
    5e26:	7ce3      	ldrb	r3, [r4, #19]
    5e28:	7ca2      	ldrb	r2, [r4, #18]
    5e2a:	021b      	lsls	r3, r3, #8
    5e2c:	4313      	orrs	r3, r2
    5e2e:	3014      	adds	r0, #20
    5e30:	3114      	adds	r1, #20
    5e32:	2208      	movs	r2, #8
    5e34:	826b      	strh	r3, [r5, #18]
    5e36:	47b0      	blx	r6
    5e38:	7f23      	ldrb	r3, [r4, #28]
    5e3a:	772b      	strb	r3, [r5, #28]
    5e3c:	2000      	movs	r0, #0
    5e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e40:	20000d7e 	.word	0x20000d7e
    5e44:	000074b7 	.word	0x000074b7
    5e48:	000074c9 	.word	0x000074c9

00005e4c <gapc_bond_req_ind>:
    5e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e4e:	780d      	ldrb	r5, [r1, #0]
    5e50:	1c03      	adds	r3, r0, #0
    5e52:	7849      	ldrb	r1, [r1, #1]
    5e54:	2d07      	cmp	r5, #7
    5e56:	d860      	bhi.n	5f1a <gapc_bond_req_ind+0xce>
    5e58:	1c28      	adds	r0, r5, #0
    5e5a:	f001 fa07 	bl	726c <__gnu_thumb1_case_uqi>
    5e5e:	5e04      	.short	0x5e04
    5e60:	5e0b5e5e 	.word	0x5e0b5e5e
    5e64:	1f1f      	.short	0x1f1f
    5e66:	200a      	movs	r0, #10
    5e68:	2a00      	cmp	r2, #0
    5e6a:	d057      	beq.n	5f1c <gapc_bond_req_ind+0xd0>
    5e6c:	0a1b      	lsrs	r3, r3, #8
    5e6e:	8013      	strh	r3, [r2, #0]
    5e70:	7091      	strb	r1, [r2, #2]
    5e72:	e053      	b.n	5f1c <gapc_bond_req_ind+0xd0>
    5e74:	2a00      	cmp	r2, #0
    5e76:	d00b      	beq.n	5e90 <gapc_bond_req_ind+0x44>
    5e78:	0a1b      	lsrs	r3, r3, #8
    5e7a:	8013      	strh	r3, [r2, #0]
    5e7c:	2900      	cmp	r1, #0
    5e7e:	d102      	bne.n	5e86 <gapc_bond_req_ind+0x3a>
    5e80:	2301      	movs	r3, #1
    5e82:	7093      	strb	r3, [r2, #2]
    5e84:	e004      	b.n	5e90 <gapc_bond_req_ind+0x44>
    5e86:	2300      	movs	r3, #0
    5e88:	7093      	strb	r3, [r2, #2]
    5e8a:	2902      	cmp	r1, #2
    5e8c:	d102      	bne.n	5e94 <gapc_bond_req_ind+0x48>
    5e8e:	70d3      	strb	r3, [r2, #3]
    5e90:	200c      	movs	r0, #12
    5e92:	e043      	b.n	5f1c <gapc_bond_req_ind+0xd0>
    5e94:	2901      	cmp	r1, #1
    5e96:	d1fb      	bne.n	5e90 <gapc_bond_req_ind+0x44>
    5e98:	70d1      	strb	r1, [r2, #3]
    5e9a:	e7f9      	b.n	5e90 <gapc_bond_req_ind+0x44>
    5e9c:	2100      	movs	r1, #0
    5e9e:	4a20      	ldr	r2, [pc, #128]	; (5f20 <gapc_bond_req_ind+0xd4>)
    5ea0:	0a1b      	lsrs	r3, r3, #8
    5ea2:	6091      	str	r1, [r2, #8]
    5ea4:	60d1      	str	r1, [r2, #12]
    5ea6:	4a1f      	ldr	r2, [pc, #124]	; (5f24 <gapc_bond_req_ind+0xd8>)
    5ea8:	4f1f      	ldr	r7, [pc, #124]	; (5f28 <gapc_bond_req_ind+0xdc>)
    5eaa:	6814      	ldr	r4, [r2, #0]
    5eac:	2205      	movs	r2, #5
    5eae:	7123      	strb	r3, [r4, #4]
    5eb0:	1c20      	adds	r0, r4, #0
    5eb2:	2301      	movs	r3, #1
    5eb4:	7022      	strb	r2, [r4, #0]
    5eb6:	320f      	adds	r2, #15
    5eb8:	7062      	strb	r2, [r4, #1]
    5eba:	3a06      	subs	r2, #6
    5ebc:	70a2      	strb	r2, [r4, #2]
    5ebe:	70e2      	strb	r2, [r4, #3]
    5ec0:	3202      	adds	r2, #2
    5ec2:	71a1      	strb	r1, [r4, #6]
    5ec4:	71e1      	strb	r1, [r4, #7]
    5ec6:	7221      	strb	r1, [r4, #8]
    5ec8:	7162      	strb	r2, [r4, #5]
    5eca:	7265      	strb	r5, [r4, #9]
    5ecc:	72a3      	strb	r3, [r4, #10]
    5ece:	300b      	adds	r0, #11
    5ed0:	4e16      	ldr	r6, [pc, #88]	; (5f2c <gapc_bond_req_ind+0xe0>)
    5ed2:	1c39      	adds	r1, r7, #0
    5ed4:	2d07      	cmp	r5, #7
    5ed6:	d115      	bne.n	5f04 <gapc_bond_req_ind+0xb8>
    5ed8:	317e      	adds	r1, #126	; 0x7e
    5eda:	47b0      	blx	r6
    5edc:	1c3b      	adds	r3, r7, #0
    5ede:	1c20      	adds	r0, r4, #0
    5ee0:	1c39      	adds	r1, r7, #0
    5ee2:	338e      	adds	r3, #142	; 0x8e
    5ee4:	881a      	ldrh	r2, [r3, #0]
    5ee6:	3190      	adds	r1, #144	; 0x90
    5ee8:	76e2      	strb	r2, [r4, #27]
    5eea:	881b      	ldrh	r3, [r3, #0]
    5eec:	2208      	movs	r2, #8
    5eee:	0a1b      	lsrs	r3, r3, #8
    5ef0:	7723      	strb	r3, [r4, #28]
    5ef2:	301d      	adds	r0, #29
    5ef4:	47b0      	blx	r6
    5ef6:	1c39      	adds	r1, r7, #0
    5ef8:	3198      	adds	r1, #152	; 0x98
    5efa:	780a      	ldrb	r2, [r1, #0]
    5efc:	1da3      	adds	r3, r4, #6
    5efe:	77da      	strb	r2, [r3, #31]
    5f00:	2126      	movs	r1, #38	; 0x26
    5f02:	e002      	b.n	5f0a <gapc_bond_req_ind+0xbe>
    5f04:	319a      	adds	r1, #154	; 0x9a
    5f06:	47b0      	blx	r6
    5f08:	211b      	movs	r1, #27
    5f0a:	1c0b      	adds	r3, r1, #0
    5f0c:	2500      	movs	r5, #0
    5f0e:	3b09      	subs	r3, #9
    5f10:	71e3      	strb	r3, [r4, #7]
    5f12:	7225      	strb	r5, [r4, #8]
    5f14:	1c20      	adds	r0, r4, #0
    5f16:	4b06      	ldr	r3, [pc, #24]	; (5f30 <gapc_bond_req_ind+0xe4>)
    5f18:	4798      	blx	r3
    5f1a:	2000      	movs	r0, #0
    5f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f1e:	46c0      	nop			; (mov r8, r8)
    5f20:	200018a8 	.word	0x200018a8
    5f24:	0000970c 	.word	0x0000970c
    5f28:	20001948 	.word	0x20001948
    5f2c:	000074b7 	.word	0x000074b7
    5f30:	00004e51 	.word	0x00004e51

00005f34 <gapc_bond_cfm_handler_pair_resp>:
    5f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f36:	2400      	movs	r4, #0
    5f38:	b085      	sub	sp, #20
    5f3a:	1c07      	adds	r7, r0, #0
    5f3c:	a80a      	add	r0, sp, #40	; 0x28
    5f3e:	7806      	ldrb	r6, [r0, #0]
    5f40:	a80b      	add	r0, sp, #44	; 0x2c
    5f42:	7800      	ldrb	r0, [r0, #0]
    5f44:	2505      	movs	r5, #5
    5f46:	9001      	str	r0, [sp, #4]
    5f48:	a80c      	add	r0, sp, #48	; 0x30
    5f4a:	7800      	ldrb	r0, [r0, #0]
    5f4c:	9002      	str	r0, [sp, #8]
    5f4e:	a80d      	add	r0, sp, #52	; 0x34
    5f50:	7800      	ldrb	r0, [r0, #0]
    5f52:	9003      	str	r0, [sp, #12]
    5f54:	a80e      	add	r0, sp, #56	; 0x38
    5f56:	8800      	ldrh	r0, [r0, #0]
    5f58:	4684      	mov	ip, r0
    5f5a:	4814      	ldr	r0, [pc, #80]	; (5fac <gapc_bond_cfm_handler_pair_resp+0x78>)
    5f5c:	6084      	str	r4, [r0, #8]
    5f5e:	60c4      	str	r4, [r0, #12]
    5f60:	4813      	ldr	r0, [pc, #76]	; (5fb0 <gapc_bond_cfm_handler_pair_resp+0x7c>)
    5f62:	6800      	ldr	r0, [r0, #0]
    5f64:	7343      	strb	r3, [r0, #13]
    5f66:	466b      	mov	r3, sp
    5f68:	791b      	ldrb	r3, [r3, #4]
    5f6a:	7005      	strb	r5, [r0, #0]
    5f6c:	73c3      	strb	r3, [r0, #15]
    5f6e:	466b      	mov	r3, sp
    5f70:	350f      	adds	r5, #15
    5f72:	7045      	strb	r5, [r0, #1]
    5f74:	3d06      	subs	r5, #6
    5f76:	7085      	strb	r5, [r0, #2]
    5f78:	70c5      	strb	r5, [r0, #3]
    5f7a:	4665      	mov	r5, ip
    5f7c:	7a1b      	ldrb	r3, [r3, #8]
    5f7e:	7105      	strb	r5, [r0, #4]
    5f80:	7403      	strb	r3, [r0, #16]
    5f82:	466b      	mov	r3, sp
    5f84:	2510      	movs	r5, #16
    5f86:	7b1b      	ldrb	r3, [r3, #12]
    5f88:	7184      	strb	r4, [r0, #6]
    5f8a:	7204      	strb	r4, [r0, #8]
    5f8c:	3401      	adds	r4, #1
    5f8e:	7145      	strb	r5, [r0, #5]
    5f90:	7244      	strb	r4, [r0, #9]
    5f92:	7287      	strb	r7, [r0, #10]
    5f94:	72c1      	strb	r1, [r0, #11]
    5f96:	7302      	strb	r2, [r0, #12]
    5f98:	7386      	strb	r6, [r0, #14]
    5f9a:	7443      	strb	r3, [r0, #17]
    5f9c:	2309      	movs	r3, #9
    5f9e:	2112      	movs	r1, #18
    5fa0:	71c3      	strb	r3, [r0, #7]
    5fa2:	4b04      	ldr	r3, [pc, #16]	; (5fb4 <gapc_bond_cfm_handler_pair_resp+0x80>)
    5fa4:	4798      	blx	r3
    5fa6:	b005      	add	sp, #20
    5fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5faa:	46c0      	nop			; (mov r8, r8)
    5fac:	200018a8 	.word	0x200018a8
    5fb0:	0000970c 	.word	0x0000970c
    5fb4:	00004e51 	.word	0x00004e51

00005fb8 <gapc_bond_cfm_handler_key_exch>:
    5fb8:	b570      	push	{r4, r5, r6, lr}
    5fba:	2500      	movs	r5, #0
    5fbc:	4c10      	ldr	r4, [pc, #64]	; (6000 <gapc_bond_cfm_handler_key_exch+0x48>)
    5fbe:	2605      	movs	r6, #5
    5fc0:	60a5      	str	r5, [r4, #8]
    5fc2:	60e5      	str	r5, [r4, #12]
    5fc4:	4c0f      	ldr	r4, [pc, #60]	; (6004 <gapc_bond_cfm_handler_key_exch+0x4c>)
    5fc6:	6824      	ldr	r4, [r4, #0]
    5fc8:	7123      	strb	r3, [r4, #4]
    5fca:	7260      	strb	r0, [r4, #9]
    5fcc:	2310      	movs	r3, #16
    5fce:	1c20      	adds	r0, r4, #0
    5fd0:	7026      	strb	r6, [r4, #0]
    5fd2:	360f      	adds	r6, #15
    5fd4:	7066      	strb	r6, [r4, #1]
    5fd6:	3e06      	subs	r6, #6
    5fd8:	70a6      	strb	r6, [r4, #2]
    5fda:	70e6      	strb	r6, [r4, #3]
    5fdc:	7163      	strb	r3, [r4, #5]
    5fde:	71a5      	strb	r5, [r4, #6]
    5fe0:	71e5      	strb	r5, [r4, #7]
    5fe2:	7225      	strb	r5, [r4, #8]
    5fe4:	72a1      	strb	r1, [r4, #10]
    5fe6:	300b      	adds	r0, #11
    5fe8:	1c11      	adds	r1, r2, #0
    5fea:	1c1a      	adds	r2, r3, #0
    5fec:	4b06      	ldr	r3, [pc, #24]	; (6008 <gapc_bond_cfm_handler_key_exch+0x50>)
    5fee:	4798      	blx	r3
    5ff0:	2312      	movs	r3, #18
    5ff2:	1c20      	adds	r0, r4, #0
    5ff4:	71e3      	strb	r3, [r4, #7]
    5ff6:	211b      	movs	r1, #27
    5ff8:	4b04      	ldr	r3, [pc, #16]	; (600c <gapc_bond_cfm_handler_key_exch+0x54>)
    5ffa:	4798      	blx	r3
    5ffc:	bd70      	pop	{r4, r5, r6, pc}
    5ffe:	46c0      	nop			; (mov r8, r8)
    6000:	200018a8 	.word	0x200018a8
    6004:	0000970c 	.word	0x0000970c
    6008:	000074b7 	.word	0x000074b7
    600c:	00004e51 	.word	0x00004e51

00006010 <gapc_security_cmd_handler>:
    6010:	2200      	movs	r2, #0
    6012:	4b0e      	ldr	r3, [pc, #56]	; (604c <gapc_security_cmd_handler+0x3c>)
    6014:	b510      	push	{r4, lr}
    6016:	609a      	str	r2, [r3, #8]
    6018:	60da      	str	r2, [r3, #12]
    601a:	4b0d      	ldr	r3, [pc, #52]	; (6050 <gapc_security_cmd_handler+0x40>)
    601c:	2405      	movs	r4, #5
    601e:	681b      	ldr	r3, [r3, #0]
    6020:	7118      	strb	r0, [r3, #4]
    6022:	2010      	movs	r0, #16
    6024:	701c      	strb	r4, [r3, #0]
    6026:	719a      	strb	r2, [r3, #6]
    6028:	721a      	strb	r2, [r3, #8]
    602a:	3415      	adds	r4, #21
    602c:	320c      	adds	r2, #12
    602e:	705c      	strb	r4, [r3, #1]
    6030:	725a      	strb	r2, [r3, #9]
    6032:	3c0c      	subs	r4, #12
    6034:	3a0a      	subs	r2, #10
    6036:	709c      	strb	r4, [r3, #2]
    6038:	70dc      	strb	r4, [r3, #3]
    603a:	7158      	strb	r0, [r3, #5]
    603c:	7299      	strb	r1, [r3, #10]
    603e:	71da      	strb	r2, [r3, #7]
    6040:	1c18      	adds	r0, r3, #0
    6042:	210b      	movs	r1, #11
    6044:	4b03      	ldr	r3, [pc, #12]	; (6054 <gapc_security_cmd_handler+0x44>)
    6046:	4798      	blx	r3
    6048:	bd10      	pop	{r4, pc}
    604a:	46c0      	nop			; (mov r8, r8)
    604c:	200018a8 	.word	0x200018a8
    6050:	0000970c 	.word	0x0000970c
    6054:	00004e51 	.word	0x00004e51

00006058 <gapc_encrypt_cmd_handler>:
    6058:	b5f0      	push	{r4, r5, r6, r7, lr}
    605a:	2500      	movs	r5, #0
    605c:	b089      	sub	sp, #36	; 0x24
    605e:	9306      	str	r3, [sp, #24]
    6060:	ab0e      	add	r3, sp, #56	; 0x38
    6062:	781b      	ldrb	r3, [r3, #0]
    6064:	1c17      	adds	r7, r2, #0
    6066:	9307      	str	r3, [sp, #28]
    6068:	ab0f      	add	r3, sp, #60	; 0x3c
    606a:	781b      	ldrb	r3, [r3, #0]
    606c:	4a1b      	ldr	r2, [pc, #108]	; (60dc <gapc_encrypt_cmd_handler+0x84>)
    606e:	1c06      	adds	r6, r0, #0
    6070:	9105      	str	r1, [sp, #20]
    6072:	9300      	str	r3, [sp, #0]
    6074:	9501      	str	r5, [sp, #4]
    6076:	9002      	str	r0, [sp, #8]
    6078:	1c29      	adds	r1, r5, #0
    607a:	1c2b      	adds	r3, r5, #0
    607c:	1c10      	adds	r0, r2, #0
    607e:	4c18      	ldr	r4, [pc, #96]	; (60e0 <gapc_encrypt_cmd_handler+0x88>)
    6080:	47a0      	blx	r4
    6082:	4b18      	ldr	r3, [pc, #96]	; (60e4 <gapc_encrypt_cmd_handler+0x8c>)
    6084:	2210      	movs	r2, #16
    6086:	609d      	str	r5, [r3, #8]
    6088:	60dd      	str	r5, [r3, #12]
    608a:	4b17      	ldr	r3, [pc, #92]	; (60e8 <gapc_encrypt_cmd_handler+0x90>)
    608c:	9905      	ldr	r1, [sp, #20]
    608e:	681c      	ldr	r4, [r3, #0]
    6090:	2305      	movs	r3, #5
    6092:	7023      	strb	r3, [r4, #0]
    6094:	3311      	adds	r3, #17
    6096:	7063      	strb	r3, [r4, #1]
    6098:	3b08      	subs	r3, #8
    609a:	70a3      	strb	r3, [r4, #2]
    609c:	70e3      	strb	r3, [r4, #3]
    609e:	3b03      	subs	r3, #3
    60a0:	7162      	strb	r2, [r4, #5]
    60a2:	71a5      	strb	r5, [r4, #6]
    60a4:	71e5      	strb	r5, [r4, #7]
    60a6:	7225      	strb	r5, [r4, #8]
    60a8:	7263      	strb	r3, [r4, #9]
    60aa:	72a5      	strb	r5, [r4, #10]
    60ac:	18e0      	adds	r0, r4, r3
    60ae:	4d0f      	ldr	r5, [pc, #60]	; (60ec <gapc_encrypt_cmd_handler+0x94>)
    60b0:	7126      	strb	r6, [r4, #4]
    60b2:	47a8      	blx	r5
    60b4:	1c20      	adds	r0, r4, #0
    60b6:	0a3b      	lsrs	r3, r7, #8
    60b8:	7723      	strb	r3, [r4, #28]
    60ba:	9906      	ldr	r1, [sp, #24]
    60bc:	76e7      	strb	r7, [r4, #27]
    60be:	2208      	movs	r2, #8
    60c0:	301d      	adds	r0, #29
    60c2:	47a8      	blx	r5
    60c4:	466a      	mov	r2, sp
    60c6:	7f12      	ldrb	r2, [r2, #28]
    60c8:	1da3      	adds	r3, r4, #6
    60ca:	77da      	strb	r2, [r3, #31]
    60cc:	231d      	movs	r3, #29
    60ce:	1c20      	adds	r0, r4, #0
    60d0:	71e3      	strb	r3, [r4, #7]
    60d2:	2126      	movs	r1, #38	; 0x26
    60d4:	4b06      	ldr	r3, [pc, #24]	; (60f0 <gapc_encrypt_cmd_handler+0x98>)
    60d6:	4798      	blx	r3
    60d8:	b009      	add	sp, #36	; 0x24
    60da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60dc:	20000dd4 	.word	0x20000dd4
    60e0:	00005ae9 	.word	0x00005ae9
    60e4:	200018a8 	.word	0x200018a8
    60e8:	0000970c 	.word	0x0000970c
    60ec:	000074b7 	.word	0x000074b7
    60f0:	00004e51 	.word	0x00004e51

000060f4 <gapc_encrypt_req_ind>:
    60f4:	b508      	push	{r3, lr}
    60f6:	0a00      	lsrs	r0, r0, #8
    60f8:	8010      	strh	r0, [r2, #0]
    60fa:	784b      	ldrb	r3, [r1, #1]
    60fc:	7808      	ldrb	r0, [r1, #0]
    60fe:	021b      	lsls	r3, r3, #8
    6100:	4303      	orrs	r3, r0
    6102:	8053      	strh	r3, [r2, #2]
    6104:	1d10      	adds	r0, r2, #4
    6106:	3102      	adds	r1, #2
    6108:	2208      	movs	r2, #8
    610a:	4b01      	ldr	r3, [pc, #4]	; (6110 <gapc_encrypt_req_ind+0x1c>)
    610c:	4798      	blx	r3
    610e:	bd08      	pop	{r3, pc}
    6110:	000074b7 	.word	0x000074b7

00006114 <gapc_encrypt_cfm_handler>:
    6114:	b5f0      	push	{r4, r5, r6, r7, lr}
    6116:	2500      	movs	r5, #0
    6118:	b087      	sub	sp, #28
    611a:	9304      	str	r3, [sp, #16]
    611c:	ab0c      	add	r3, sp, #48	; 0x30
    611e:	781b      	ldrb	r3, [r3, #0]
    6120:	1c17      	adds	r7, r2, #0
    6122:	4a17      	ldr	r2, [pc, #92]	; (6180 <gapc_encrypt_cfm_handler+0x6c>)
    6124:	1c06      	adds	r6, r0, #0
    6126:	9305      	str	r3, [sp, #20]
    6128:	9100      	str	r1, [sp, #0]
    612a:	9002      	str	r0, [sp, #8]
    612c:	1c29      	adds	r1, r5, #0
    612e:	1c2b      	adds	r3, r5, #0
    6130:	9501      	str	r5, [sp, #4]
    6132:	1c10      	adds	r0, r2, #0
    6134:	4c13      	ldr	r4, [pc, #76]	; (6184 <gapc_encrypt_cfm_handler+0x70>)
    6136:	47a0      	blx	r4
    6138:	4b13      	ldr	r3, [pc, #76]	; (6188 <gapc_encrypt_cfm_handler+0x74>)
    613a:	2210      	movs	r2, #16
    613c:	609d      	str	r5, [r3, #8]
    613e:	60dd      	str	r5, [r3, #12]
    6140:	4b12      	ldr	r3, [pc, #72]	; (618c <gapc_encrypt_cfm_handler+0x78>)
    6142:	9904      	ldr	r1, [sp, #16]
    6144:	681c      	ldr	r4, [r3, #0]
    6146:	2305      	movs	r3, #5
    6148:	1c20      	adds	r0, r4, #0
    614a:	7023      	strb	r3, [r4, #0]
    614c:	3313      	adds	r3, #19
    614e:	7063      	strb	r3, [r4, #1]
    6150:	3b0a      	subs	r3, #10
    6152:	70a3      	strb	r3, [r4, #2]
    6154:	70e3      	strb	r3, [r4, #3]
    6156:	7162      	strb	r2, [r4, #5]
    6158:	7126      	strb	r6, [r4, #4]
    615a:	71a5      	strb	r5, [r4, #6]
    615c:	71e5      	strb	r5, [r4, #7]
    615e:	7225      	strb	r5, [r4, #8]
    6160:	7267      	strb	r7, [r4, #9]
    6162:	4b0b      	ldr	r3, [pc, #44]	; (6190 <gapc_encrypt_cfm_handler+0x7c>)
    6164:	300a      	adds	r0, #10
    6166:	4798      	blx	r3
    6168:	466b      	mov	r3, sp
    616a:	7d1b      	ldrb	r3, [r3, #20]
    616c:	1c20      	adds	r0, r4, #0
    616e:	76a3      	strb	r3, [r4, #26]
    6170:	2312      	movs	r3, #18
    6172:	211b      	movs	r1, #27
    6174:	71e3      	strb	r3, [r4, #7]
    6176:	4b07      	ldr	r3, [pc, #28]	; (6194 <gapc_encrypt_cfm_handler+0x80>)
    6178:	4798      	blx	r3
    617a:	b007      	add	sp, #28
    617c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    617e:	46c0      	nop			; (mov r8, r8)
    6180:	20000d6d 	.word	0x20000d6d
    6184:	00005ae9 	.word	0x00005ae9
    6188:	200018a8 	.word	0x200018a8
    618c:	0000970c 	.word	0x0000970c
    6190:	000074b7 	.word	0x000074b7
    6194:	00004e51 	.word	0x00004e51

00006198 <gapc_encrypt_ind>:
    6198:	780b      	ldrb	r3, [r1, #0]
    619a:	0a00      	lsrs	r0, r0, #8
    619c:	70d3      	strb	r3, [r2, #3]
    619e:	2300      	movs	r3, #0
    61a0:	8010      	strh	r0, [r2, #0]
    61a2:	7093      	strb	r3, [r2, #2]
    61a4:	4770      	bx	lr
	...

000061a8 <gapc_param_update_cfm_handler>:
    61a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61aa:	2400      	movs	r4, #0
    61ac:	1c0e      	adds	r6, r1, #0
    61ae:	490f      	ldr	r1, [pc, #60]	; (61ec <gapc_param_update_cfm_handler+0x44>)
    61b0:	1c05      	adds	r5, r0, #0
    61b2:	60cc      	str	r4, [r1, #12]
    61b4:	608c      	str	r4, [r1, #8]
    61b6:	490e      	ldr	r1, [pc, #56]	; (61f0 <gapc_param_update_cfm_handler+0x48>)
    61b8:	2705      	movs	r7, #5
    61ba:	6808      	ldr	r0, [r1, #0]
    61bc:	2110      	movs	r1, #16
    61be:	468c      	mov	ip, r1
    61c0:	7041      	strb	r1, [r0, #1]
    61c2:	7105      	strb	r5, [r0, #4]
    61c4:	210e      	movs	r1, #14
    61c6:	4665      	mov	r5, ip
    61c8:	7282      	strb	r2, [r0, #10]
    61ca:	7303      	strb	r3, [r0, #12]
    61cc:	0a12      	lsrs	r2, r2, #8
    61ce:	0a1b      	lsrs	r3, r3, #8
    61d0:	7007      	strb	r7, [r0, #0]
    61d2:	7145      	strb	r5, [r0, #5]
    61d4:	7246      	strb	r6, [r0, #9]
    61d6:	71c7      	strb	r7, [r0, #7]
    61d8:	7081      	strb	r1, [r0, #2]
    61da:	70c1      	strb	r1, [r0, #3]
    61dc:	7184      	strb	r4, [r0, #6]
    61de:	7204      	strb	r4, [r0, #8]
    61e0:	72c2      	strb	r2, [r0, #11]
    61e2:	7343      	strb	r3, [r0, #13]
    61e4:	4b03      	ldr	r3, [pc, #12]	; (61f4 <gapc_param_update_cfm_handler+0x4c>)
    61e6:	4798      	blx	r3
    61e8:	1c20      	adds	r0, r4, #0
    61ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61ec:	200018a8 	.word	0x200018a8
    61f0:	0000970c 	.word	0x0000970c
    61f4:	00004e51 	.word	0x00004e51

000061f8 <gapc_param_updated_ind>:
    61f8:	2300      	movs	r3, #0
    61fa:	0a00      	lsrs	r0, r0, #8
    61fc:	8010      	strh	r0, [r2, #0]
    61fe:	7093      	strb	r3, [r2, #2]
    6200:	784b      	ldrb	r3, [r1, #1]
    6202:	7808      	ldrb	r0, [r1, #0]
    6204:	021b      	lsls	r3, r3, #8
    6206:	4303      	orrs	r3, r0
    6208:	8093      	strh	r3, [r2, #4]
    620a:	78cb      	ldrb	r3, [r1, #3]
    620c:	7888      	ldrb	r0, [r1, #2]
    620e:	021b      	lsls	r3, r3, #8
    6210:	4303      	orrs	r3, r0
    6212:	80d3      	strh	r3, [r2, #6]
    6214:	794b      	ldrb	r3, [r1, #5]
    6216:	7909      	ldrb	r1, [r1, #4]
    6218:	021b      	lsls	r3, r3, #8
    621a:	430b      	orrs	r3, r1
    621c:	2007      	movs	r0, #7
    621e:	8113      	strh	r3, [r2, #8]
    6220:	4770      	bx	lr

00006222 <gapc_param_updated_req_ind>:
    6222:	0a00      	lsrs	r0, r0, #8
    6224:	8010      	strh	r0, [r2, #0]
    6226:	784b      	ldrb	r3, [r1, #1]
    6228:	7808      	ldrb	r0, [r1, #0]
    622a:	021b      	lsls	r3, r3, #8
    622c:	4303      	orrs	r3, r0
    622e:	8053      	strh	r3, [r2, #2]
    6230:	78cb      	ldrb	r3, [r1, #3]
    6232:	7888      	ldrb	r0, [r1, #2]
    6234:	021b      	lsls	r3, r3, #8
    6236:	4303      	orrs	r3, r0
    6238:	8093      	strh	r3, [r2, #4]
    623a:	794b      	ldrb	r3, [r1, #5]
    623c:	7908      	ldrb	r0, [r1, #4]
    623e:	021b      	lsls	r3, r3, #8
    6240:	4303      	orrs	r3, r0
    6242:	80d3      	strh	r3, [r2, #6]
    6244:	79cb      	ldrb	r3, [r1, #7]
    6246:	7989      	ldrb	r1, [r1, #6]
    6248:	021b      	lsls	r3, r3, #8
    624a:	430b      	orrs	r3, r1
    624c:	2008      	movs	r0, #8
    624e:	8113      	strh	r3, [r2, #8]
    6250:	4770      	bx	lr
	...

00006254 <gapc_dev_info_req_ind_handler>:
    6254:	b538      	push	{r3, r4, r5, lr}
    6256:	1c0b      	adds	r3, r1, #0
    6258:	0a01      	lsrs	r1, r0, #8
    625a:	8011      	strh	r1, [r2, #0]
    625c:	7818      	ldrb	r0, [r3, #0]
    625e:	7090      	strb	r0, [r2, #2]
    6260:	2800      	cmp	r0, #0
    6262:	d10f      	bne.n	6284 <gapc_dev_info_req_ind_handler+0x30>
    6264:	4b09      	ldr	r3, [pc, #36]	; (628c <gapc_dev_info_req_ind_handler+0x38>)
    6266:	33aa      	adds	r3, #170	; 0xaa
    6268:	881b      	ldrh	r3, [r3, #0]
    626a:	2b00      	cmp	r3, #0
    626c:	d10a      	bne.n	6284 <gapc_dev_info_req_ind_handler+0x30>
    626e:	4c08      	ldr	r4, [pc, #32]	; (6290 <gapc_dev_info_req_ind_handler+0x3c>)
    6270:	4908      	ldr	r1, [pc, #32]	; (6294 <gapc_dev_info_req_ind_handler+0x40>)
    6272:	4a09      	ldr	r2, [pc, #36]	; (6298 <gapc_dev_info_req_ind_handler+0x44>)
    6274:	4b09      	ldr	r3, [pc, #36]	; (629c <gapc_dev_info_req_ind_handler+0x48>)
    6276:	6825      	ldr	r5, [r4, #0]
    6278:	4809      	ldr	r0, [pc, #36]	; (62a0 <gapc_dev_info_req_ind_handler+0x4c>)
    627a:	47a8      	blx	r5
    627c:	6823      	ldr	r3, [r4, #0]
    627e:	4809      	ldr	r0, [pc, #36]	; (62a4 <gapc_dev_info_req_ind_handler+0x50>)
    6280:	4798      	blx	r3
    6282:	e001      	b.n	6288 <gapc_dev_info_req_ind_handler+0x34>
    6284:	4b08      	ldr	r3, [pc, #32]	; (62a8 <gapc_dev_info_req_ind_handler+0x54>)
    6286:	4798      	blx	r3
    6288:	bd38      	pop	{r3, r4, r5, pc}
    628a:	46c0      	nop			; (mov r8, r8)
    628c:	20001948 	.word	0x20001948
    6290:	20000030 	.word	0x20000030
    6294:	00009907 	.word	0x00009907
    6298:	000002b2 	.word	0x000002b2
    629c:	000098e9 	.word	0x000098e9
    62a0:	000093e1 	.word	0x000093e1
    62a4:	000099ec 	.word	0x000099ec
    62a8:	0000583d 	.word	0x0000583d

000062ac <gapc_sec_req_ind>:
    62ac:	0a00      	lsrs	r0, r0, #8
    62ae:	8010      	strh	r0, [r2, #0]
    62b0:	7809      	ldrb	r1, [r1, #0]
    62b2:	2301      	movs	r3, #1
    62b4:	1c08      	adds	r0, r1, #0
    62b6:	0889      	lsrs	r1, r1, #2
    62b8:	4018      	ands	r0, r3
    62ba:	400b      	ands	r3, r1
    62bc:	70d0      	strb	r0, [r2, #3]
    62be:	7113      	strb	r3, [r2, #4]
    62c0:	4770      	bx	lr

000062c2 <gapc_sign_counter_ind_handler>:
    62c2:	0a00      	lsrs	r0, r0, #8
    62c4:	8010      	strh	r0, [r2, #0]
    62c6:	784b      	ldrb	r3, [r1, #1]
    62c8:	0218      	lsls	r0, r3, #8
    62ca:	788b      	ldrb	r3, [r1, #2]
    62cc:	041b      	lsls	r3, r3, #16
    62ce:	4303      	orrs	r3, r0
    62d0:	7808      	ldrb	r0, [r1, #0]
    62d2:	4303      	orrs	r3, r0
    62d4:	78c8      	ldrb	r0, [r1, #3]
    62d6:	0600      	lsls	r0, r0, #24
    62d8:	4303      	orrs	r3, r0
    62da:	6053      	str	r3, [r2, #4]
    62dc:	794b      	ldrb	r3, [r1, #5]
    62de:	0218      	lsls	r0, r3, #8
    62e0:	798b      	ldrb	r3, [r1, #6]
    62e2:	041b      	lsls	r3, r3, #16
    62e4:	4303      	orrs	r3, r0
    62e6:	7908      	ldrb	r0, [r1, #4]
    62e8:	79c9      	ldrb	r1, [r1, #7]
    62ea:	4303      	orrs	r3, r0
    62ec:	0609      	lsls	r1, r1, #24
    62ee:	430b      	orrs	r3, r1
    62f0:	2000      	movs	r0, #0
    62f2:	6093      	str	r3, [r2, #8]
    62f4:	4770      	bx	lr
	...

000062f8 <gapc_peer_att_info_ind_handler>:
    62f8:	b510      	push	{r4, lr}
    62fa:	0a00      	lsrs	r0, r0, #8
    62fc:	8010      	strh	r0, [r2, #0]
    62fe:	7808      	ldrb	r0, [r1, #0]
    6300:	7090      	strb	r0, [r2, #2]
    6302:	788b      	ldrb	r3, [r1, #2]
    6304:	784c      	ldrb	r4, [r1, #1]
    6306:	021b      	lsls	r3, r3, #8
    6308:	4323      	orrs	r3, r4
    630a:	8093      	strh	r3, [r2, #4]
    630c:	2801      	cmp	r0, #1
    630e:	d027      	beq.n	6360 <gapc_peer_att_info_ind_handler+0x68>
    6310:	2800      	cmp	r0, #0
    6312:	d017      	beq.n	6344 <gapc_peer_att_info_ind_handler+0x4c>
    6314:	2802      	cmp	r0, #2
    6316:	d12a      	bne.n	636e <gapc_peer_att_info_ind_handler+0x76>
    6318:	790b      	ldrb	r3, [r1, #4]
    631a:	78c8      	ldrb	r0, [r1, #3]
    631c:	021b      	lsls	r3, r3, #8
    631e:	4303      	orrs	r3, r0
    6320:	8113      	strh	r3, [r2, #8]
    6322:	798b      	ldrb	r3, [r1, #6]
    6324:	7948      	ldrb	r0, [r1, #5]
    6326:	021b      	lsls	r3, r3, #8
    6328:	4303      	orrs	r3, r0
    632a:	80d3      	strh	r3, [r2, #6]
    632c:	7a0b      	ldrb	r3, [r1, #8]
    632e:	79c8      	ldrb	r0, [r1, #7]
    6330:	021b      	lsls	r3, r3, #8
    6332:	4303      	orrs	r3, r0
    6334:	8193      	strh	r3, [r2, #12]
    6336:	7a8b      	ldrb	r3, [r1, #10]
    6338:	7a49      	ldrb	r1, [r1, #9]
    633a:	021b      	lsls	r3, r3, #8
    633c:	430b      	orrs	r3, r1
    633e:	8153      	strh	r3, [r2, #10]
    6340:	2306      	movs	r3, #6
    6342:	e013      	b.n	636c <gapc_peer_att_info_ind_handler+0x74>
    6344:	1c14      	adds	r4, r2, #0
    6346:	1c20      	adds	r0, r4, #0
    6348:	790a      	ldrb	r2, [r1, #4]
    634a:	78cb      	ldrb	r3, [r1, #3]
    634c:	0212      	lsls	r2, r2, #8
    634e:	431a      	orrs	r2, r3
    6350:	80e2      	strh	r2, [r4, #6]
    6352:	4b07      	ldr	r3, [pc, #28]	; (6370 <gapc_peer_att_info_ind_handler+0x78>)
    6354:	3008      	adds	r0, #8
    6356:	3105      	adds	r1, #5
    6358:	4798      	blx	r3
    635a:	2302      	movs	r3, #2
    635c:	70a3      	strb	r3, [r4, #2]
    635e:	e006      	b.n	636e <gapc_peer_att_info_ind_handler+0x76>
    6360:	790b      	ldrb	r3, [r1, #4]
    6362:	78c9      	ldrb	r1, [r1, #3]
    6364:	021b      	lsls	r3, r3, #8
    6366:	430b      	orrs	r3, r1
    6368:	80d3      	strh	r3, [r2, #6]
    636a:	2305      	movs	r3, #5
    636c:	7093      	strb	r3, [r2, #2]
    636e:	bd10      	pop	{r4, pc}
    6370:	000074b7 	.word	0x000074b7

00006374 <gapc_con_channel_map_ind_handler>:
    6374:	b508      	push	{r3, lr}
    6376:	2300      	movs	r3, #0
    6378:	0a00      	lsrs	r0, r0, #8
    637a:	7013      	strb	r3, [r2, #0]
    637c:	8050      	strh	r0, [r2, #2]
    637e:	4b02      	ldr	r3, [pc, #8]	; (6388 <gapc_con_channel_map_ind_handler+0x14>)
    6380:	1d10      	adds	r0, r2, #4
    6382:	2205      	movs	r2, #5
    6384:	4798      	blx	r3
    6386:	bd08      	pop	{r3, pc}
    6388:	000074b7 	.word	0x000074b7

0000638c <gapc_lecb_connected>:
    638c:	7843      	ldrb	r3, [r0, #1]
    638e:	7802      	ldrb	r2, [r0, #0]
    6390:	021b      	lsls	r3, r3, #8
    6392:	4313      	orrs	r3, r2
    6394:	800b      	strh	r3, [r1, #0]
    6396:	78c3      	ldrb	r3, [r0, #3]
    6398:	7882      	ldrb	r2, [r0, #2]
    639a:	021b      	lsls	r3, r3, #8
    639c:	4313      	orrs	r3, r2
    639e:	804b      	strh	r3, [r1, #2]
    63a0:	7943      	ldrb	r3, [r0, #5]
    63a2:	7902      	ldrb	r2, [r0, #4]
    63a4:	021b      	lsls	r3, r3, #8
    63a6:	4313      	orrs	r3, r2
    63a8:	808b      	strh	r3, [r1, #4]
    63aa:	79c3      	ldrb	r3, [r0, #7]
    63ac:	7982      	ldrb	r2, [r0, #6]
    63ae:	021b      	lsls	r3, r3, #8
    63b0:	4313      	orrs	r3, r2
    63b2:	80cb      	strh	r3, [r1, #6]
    63b4:	2300      	movs	r3, #0
    63b6:	720b      	strb	r3, [r1, #8]
    63b8:	4770      	bx	lr

000063ba <gapc_lecb_disconnected>:
    63ba:	7843      	ldrb	r3, [r0, #1]
    63bc:	7802      	ldrb	r2, [r0, #0]
    63be:	021b      	lsls	r3, r3, #8
    63c0:	4313      	orrs	r3, r2
    63c2:	800b      	strh	r3, [r1, #0]
    63c4:	78c3      	ldrb	r3, [r0, #3]
    63c6:	7882      	ldrb	r2, [r0, #2]
    63c8:	021b      	lsls	r3, r3, #8
    63ca:	4313      	orrs	r3, r2
    63cc:	804b      	strh	r3, [r1, #2]
    63ce:	4770      	bx	lr

000063d0 <gapc_lecb_connect_req_ind>:
    63d0:	7843      	ldrb	r3, [r0, #1]
    63d2:	7802      	ldrb	r2, [r0, #0]
    63d4:	021b      	lsls	r3, r3, #8
    63d6:	4313      	orrs	r3, r2
    63d8:	800b      	strh	r3, [r1, #0]
    63da:	78c3      	ldrb	r3, [r0, #3]
    63dc:	7882      	ldrb	r2, [r0, #2]
    63de:	021b      	lsls	r3, r3, #8
    63e0:	4313      	orrs	r3, r2
    63e2:	804b      	strh	r3, [r1, #2]
    63e4:	7943      	ldrb	r3, [r0, #5]
    63e6:	7902      	ldrb	r2, [r0, #4]
    63e8:	021b      	lsls	r3, r3, #8
    63ea:	4313      	orrs	r3, r2
    63ec:	808b      	strh	r3, [r1, #4]
    63ee:	79c3      	ldrb	r3, [r0, #7]
    63f0:	7982      	ldrb	r2, [r0, #6]
    63f2:	021b      	lsls	r3, r3, #8
    63f4:	4313      	orrs	r3, r2
    63f6:	80cb      	strh	r3, [r1, #6]
    63f8:	4770      	bx	lr

000063fa <gapc_lecb_add_credit_resp_handler>:
    63fa:	7843      	ldrb	r3, [r0, #1]
    63fc:	7802      	ldrb	r2, [r0, #0]
    63fe:	021b      	lsls	r3, r3, #8
    6400:	4313      	orrs	r3, r2
    6402:	800b      	strh	r3, [r1, #0]
    6404:	78c3      	ldrb	r3, [r0, #3]
    6406:	7882      	ldrb	r2, [r0, #2]
    6408:	021b      	lsls	r3, r3, #8
    640a:	4313      	orrs	r3, r2
    640c:	804b      	strh	r3, [r1, #2]
    640e:	7943      	ldrb	r3, [r0, #5]
    6410:	7902      	ldrb	r2, [r0, #4]
    6412:	021b      	lsls	r3, r3, #8
    6414:	4313      	orrs	r3, r2
    6416:	808b      	strh	r3, [r1, #4]
    6418:	4770      	bx	lr
	...

0000641c <gapm_reset_req_handler>:
    641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    641e:	2300      	movs	r3, #0
    6420:	4a19      	ldr	r2, [pc, #100]	; (6488 <gapm_reset_req_handler+0x6c>)
    6422:	4c1a      	ldr	r4, [pc, #104]	; (648c <gapm_reset_req_handler+0x70>)
    6424:	6810      	ldr	r0, [r2, #0]
    6426:	2205      	movs	r2, #5
    6428:	60a3      	str	r3, [r4, #8]
    642a:	60e3      	str	r3, [r4, #12]
    642c:	7103      	strb	r3, [r0, #4]
    642e:	7183      	strb	r3, [r0, #6]
    6430:	7203      	strb	r3, [r0, #8]
    6432:	23d0      	movs	r3, #208	; 0xd0
    6434:	2110      	movs	r1, #16
    6436:	2501      	movs	r5, #1
    6438:	7002      	strb	r2, [r0, #0]
    643a:	3a03      	subs	r2, #3
    643c:	7042      	strb	r2, [r0, #1]
    643e:	011b      	lsls	r3, r3, #4
    6440:	320b      	adds	r2, #11
    6442:	7082      	strb	r2, [r0, #2]
    6444:	70c2      	strb	r2, [r0, #3]
    6446:	7141      	strb	r1, [r0, #5]
    6448:	8023      	strh	r3, [r4, #0]
    644a:	3906      	subs	r1, #6
    644c:	4b10      	ldr	r3, [pc, #64]	; (6490 <gapm_reset_req_handler+0x74>)
    644e:	7245      	strb	r5, [r0, #9]
    6450:	71c5      	strb	r5, [r0, #7]
    6452:	80a2      	strh	r2, [r4, #4]
    6454:	4798      	blx	r3
    6456:	4b0f      	ldr	r3, [pc, #60]	; (6494 <gapm_reset_req_handler+0x78>)
    6458:	4798      	blx	r3
    645a:	23d0      	movs	r3, #208	; 0xd0
    645c:	4298      	cmp	r0, r3
    645e:	d011      	beq.n	6484 <gapm_reset_req_handler+0x68>
    6460:	68a3      	ldr	r3, [r4, #8]
    6462:	781c      	ldrb	r4, [r3, #0]
    6464:	785b      	ldrb	r3, [r3, #1]
    6466:	42ac      	cmp	r4, r5
    6468:	d00c      	beq.n	6484 <gapm_reset_req_handler+0x68>
    646a:	4e0b      	ldr	r6, [pc, #44]	; (6498 <gapm_reset_req_handler+0x7c>)
    646c:	490b      	ldr	r1, [pc, #44]	; (649c <gapm_reset_req_handler+0x80>)
    646e:	2249      	movs	r2, #73	; 0x49
    6470:	4b0b      	ldr	r3, [pc, #44]	; (64a0 <gapm_reset_req_handler+0x84>)
    6472:	480c      	ldr	r0, [pc, #48]	; (64a4 <gapm_reset_req_handler+0x88>)
    6474:	6837      	ldr	r7, [r6, #0]
    6476:	47b8      	blx	r7
    6478:	6833      	ldr	r3, [r6, #0]
    647a:	480b      	ldr	r0, [pc, #44]	; (64a8 <gapm_reset_req_handler+0x8c>)
    647c:	1c29      	adds	r1, r5, #0
    647e:	1c22      	adds	r2, r4, #0
    6480:	4798      	blx	r3
    6482:	23e2      	movs	r3, #226	; 0xe2
    6484:	1c18      	adds	r0, r3, #0
    6486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6488:	0000970c 	.word	0x0000970c
    648c:	200018a8 	.word	0x200018a8
    6490:	00004e51 	.word	0x00004e51
    6494:	000050b5 	.word	0x000050b5
    6498:	20000030 	.word	0x20000030
    649c:	00009a37 	.word	0x00009a37
    64a0:	00009a00 	.word	0x00009a00
    64a4:	000093e1 	.word	0x000093e1
    64a8:	00009a72 	.word	0x00009a72

000064ac <gapm_set_dev_config_cmd_handler>:
    64ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    64ae:	b087      	sub	sp, #28
    64b0:	9303      	str	r3, [sp, #12]
    64b2:	ab0c      	add	r3, sp, #48	; 0x30
    64b4:	781b      	ldrb	r3, [r3, #0]
    64b6:	2605      	movs	r6, #5
    64b8:	9304      	str	r3, [sp, #16]
    64ba:	ab0d      	add	r3, sp, #52	; 0x34
    64bc:	781b      	ldrb	r3, [r3, #0]
    64be:	2710      	movs	r7, #16
    64c0:	9305      	str	r3, [sp, #20]
    64c2:	ab0e      	add	r3, sp, #56	; 0x38
    64c4:	881b      	ldrh	r3, [r3, #0]
    64c6:	4c38      	ldr	r4, [pc, #224]	; (65a8 <gapm_set_dev_config_cmd_handler+0xfc>)
    64c8:	9300      	str	r3, [sp, #0]
    64ca:	ab0f      	add	r3, sp, #60	; 0x3c
    64cc:	881b      	ldrh	r3, [r3, #0]
    64ce:	6824      	ldr	r4, [r4, #0]
    64d0:	9301      	str	r3, [sp, #4]
    64d2:	ab10      	add	r3, sp, #64	; 0x40
    64d4:	881b      	ldrh	r3, [r3, #0]
    64d6:	4d35      	ldr	r5, [pc, #212]	; (65ac <gapm_set_dev_config_cmd_handler+0x100>)
    64d8:	9302      	str	r3, [sp, #8]
    64da:	2300      	movs	r3, #0
    64dc:	60eb      	str	r3, [r5, #12]
    64de:	60ab      	str	r3, [r5, #8]
    64e0:	7026      	strb	r6, [r4, #0]
    64e2:	3e01      	subs	r6, #1
    64e4:	7066      	strb	r6, [r4, #1]
    64e6:	7123      	strb	r3, [r4, #4]
    64e8:	3609      	adds	r6, #9
    64ea:	71a3      	strb	r3, [r4, #6]
    64ec:	71e3      	strb	r3, [r4, #7]
    64ee:	7223      	strb	r3, [r4, #8]
    64f0:	72e1      	strb	r1, [r4, #11]
    64f2:	3303      	adds	r3, #3
    64f4:	0a09      	lsrs	r1, r1, #8
    64f6:	7263      	strb	r3, [r4, #9]
    64f8:	7167      	strb	r7, [r4, #5]
    64fa:	72a0      	strb	r0, [r4, #10]
    64fc:	7321      	strb	r1, [r4, #12]
    64fe:	4f2c      	ldr	r7, [pc, #176]	; (65b0 <gapm_set_dev_config_cmd_handler+0x104>)
    6500:	1c11      	adds	r1, r2, #0
    6502:	70a6      	strb	r6, [r4, #2]
    6504:	2206      	movs	r2, #6
    6506:	70e6      	strb	r6, [r4, #3]
    6508:	19a0      	adds	r0, r4, r6
    650a:	47b8      	blx	r7
    650c:	1c20      	adds	r0, r4, #0
    650e:	9903      	ldr	r1, [sp, #12]
    6510:	2210      	movs	r2, #16
    6512:	3013      	adds	r0, #19
    6514:	47b8      	blx	r7
    6516:	466a      	mov	r2, sp
    6518:	7c12      	ldrb	r2, [r2, #16]
    651a:	1d23      	adds	r3, r4, #4
    651c:	77da      	strb	r2, [r3, #31]
    651e:	466a      	mov	r2, sp
    6520:	7d12      	ldrb	r2, [r2, #20]
    6522:	1d63      	adds	r3, r4, #5
    6524:	77da      	strb	r2, [r3, #31]
    6526:	466a      	mov	r2, sp
    6528:	7812      	ldrb	r2, [r2, #0]
    652a:	1da3      	adds	r3, r4, #6
    652c:	77da      	strb	r2, [r3, #31]
    652e:	9b00      	ldr	r3, [sp, #0]
    6530:	1de2      	adds	r2, r4, #7
    6532:	0a1b      	lsrs	r3, r3, #8
    6534:	77d3      	strb	r3, [r2, #31]
    6536:	466a      	mov	r2, sp
    6538:	1c23      	adds	r3, r4, #0
    653a:	7912      	ldrb	r2, [r2, #4]
    653c:	3308      	adds	r3, #8
    653e:	77da      	strb	r2, [r3, #31]
    6540:	1c22      	adds	r2, r4, #0
    6542:	9b01      	ldr	r3, [sp, #4]
    6544:	3228      	adds	r2, #40	; 0x28
    6546:	0a1b      	lsrs	r3, r3, #8
    6548:	7013      	strb	r3, [r2, #0]
    654a:	466a      	mov	r2, sp
    654c:	1c23      	adds	r3, r4, #0
    654e:	7a12      	ldrb	r2, [r2, #8]
    6550:	3329      	adds	r3, #41	; 0x29
    6552:	701a      	strb	r2, [r3, #0]
    6554:	1c22      	adds	r2, r4, #0
    6556:	9b02      	ldr	r3, [sp, #8]
    6558:	322a      	adds	r2, #42	; 0x2a
    655a:	0a1b      	lsrs	r3, r3, #8
    655c:	7013      	strb	r3, [r2, #0]
    655e:	23d0      	movs	r3, #208	; 0xd0
    6560:	011b      	lsls	r3, r3, #4
    6562:	802b      	strh	r3, [r5, #0]
    6564:	2322      	movs	r3, #34	; 0x22
    6566:	212b      	movs	r1, #43	; 0x2b
    6568:	71e3      	strb	r3, [r4, #7]
    656a:	1c20      	adds	r0, r4, #0
    656c:	4b11      	ldr	r3, [pc, #68]	; (65b4 <gapm_set_dev_config_cmd_handler+0x108>)
    656e:	80ae      	strh	r6, [r5, #4]
    6570:	4798      	blx	r3
    6572:	4b11      	ldr	r3, [pc, #68]	; (65b8 <gapm_set_dev_config_cmd_handler+0x10c>)
    6574:	4798      	blx	r3
    6576:	23d0      	movs	r3, #208	; 0xd0
    6578:	4298      	cmp	r0, r3
    657a:	d011      	beq.n	65a0 <gapm_set_dev_config_cmd_handler+0xf4>
    657c:	68ab      	ldr	r3, [r5, #8]
    657e:	781c      	ldrb	r4, [r3, #0]
    6580:	785b      	ldrb	r3, [r3, #1]
    6582:	2c03      	cmp	r4, #3
    6584:	d00c      	beq.n	65a0 <gapm_set_dev_config_cmd_handler+0xf4>
    6586:	4d0d      	ldr	r5, [pc, #52]	; (65bc <gapm_set_dev_config_cmd_handler+0x110>)
    6588:	490d      	ldr	r1, [pc, #52]	; (65c0 <gapm_set_dev_config_cmd_handler+0x114>)
    658a:	2265      	movs	r2, #101	; 0x65
    658c:	4b0d      	ldr	r3, [pc, #52]	; (65c4 <gapm_set_dev_config_cmd_handler+0x118>)
    658e:	480e      	ldr	r0, [pc, #56]	; (65c8 <gapm_set_dev_config_cmd_handler+0x11c>)
    6590:	682e      	ldr	r6, [r5, #0]
    6592:	47b0      	blx	r6
    6594:	682b      	ldr	r3, [r5, #0]
    6596:	480d      	ldr	r0, [pc, #52]	; (65cc <gapm_set_dev_config_cmd_handler+0x120>)
    6598:	2103      	movs	r1, #3
    659a:	1c22      	adds	r2, r4, #0
    659c:	4798      	blx	r3
    659e:	23e2      	movs	r3, #226	; 0xe2
    65a0:	1c18      	adds	r0, r3, #0
    65a2:	b007      	add	sp, #28
    65a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65a6:	46c0      	nop			; (mov r8, r8)
    65a8:	0000970c 	.word	0x0000970c
    65ac:	200018a8 	.word	0x200018a8
    65b0:	000074b7 	.word	0x000074b7
    65b4:	00004e51 	.word	0x00004e51
    65b8:	000050b5 	.word	0x000050b5
    65bc:	20000030 	.word	0x20000030
    65c0:	00009a37 	.word	0x00009a37
    65c4:	00009a17 	.word	0x00009a17
    65c8:	000093e1 	.word	0x000093e1
    65cc:	00009a72 	.word	0x00009a72

000065d0 <gapm_get_dev_config_cmd_handler>:
    65d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65d2:	1c0d      	adds	r5, r1, #0
    65d4:	21cf      	movs	r1, #207	; 0xcf
    65d6:	2801      	cmp	r0, #1
    65d8:	d84b      	bhi.n	6672 <gapm_get_dev_config_cmd_handler+0xa2>
    65da:	2d00      	cmp	r5, #0
    65dc:	d049      	beq.n	6672 <gapm_get_dev_config_cmd_handler+0xa2>
    65de:	2200      	movs	r2, #0
    65e0:	2605      	movs	r6, #5
    65e2:	4b25      	ldr	r3, [pc, #148]	; (6678 <gapm_get_dev_config_cmd_handler+0xa8>)
    65e4:	4c25      	ldr	r4, [pc, #148]	; (667c <gapm_get_dev_config_cmd_handler+0xac>)
    65e6:	681b      	ldr	r3, [r3, #0]
    65e8:	60a2      	str	r2, [r4, #8]
    65ea:	60e2      	str	r2, [r4, #12]
    65ec:	701e      	strb	r6, [r3, #0]
    65ee:	3601      	adds	r6, #1
    65f0:	270d      	movs	r7, #13
    65f2:	705e      	strb	r6, [r3, #1]
    65f4:	2610      	movs	r6, #16
    65f6:	709f      	strb	r7, [r3, #2]
    65f8:	70df      	strb	r7, [r3, #3]
    65fa:	711a      	strb	r2, [r3, #4]
    65fc:	715e      	strb	r6, [r3, #5]
    65fe:	719a      	strb	r2, [r3, #6]
    6600:	71da      	strb	r2, [r3, #7]
    6602:	721a      	strb	r2, [r3, #8]
    6604:	2801      	cmp	r0, #1
    6606:	d134      	bne.n	6672 <gapm_get_dev_config_cmd_handler+0xa2>
    6608:	3206      	adds	r2, #6
    660a:	725a      	strb	r2, [r3, #9]
    660c:	22d0      	movs	r2, #208	; 0xd0
    660e:	0112      	lsls	r2, r2, #4
    6610:	8062      	strh	r2, [r4, #2]
    6612:	4a1b      	ldr	r2, [pc, #108]	; (6680 <gapm_get_dev_config_cmd_handler+0xb0>)
    6614:	71d8      	strb	r0, [r3, #7]
    6616:	39c5      	subs	r1, #197	; 0xc5
    6618:	1c18      	adds	r0, r3, #0
    661a:	4b1a      	ldr	r3, [pc, #104]	; (6684 <gapm_get_dev_config_cmd_handler+0xb4>)
    661c:	8022      	strh	r2, [r4, #0]
    661e:	80a7      	strh	r7, [r4, #4]
    6620:	4798      	blx	r3
    6622:	4b19      	ldr	r3, [pc, #100]	; (6688 <gapm_get_dev_config_cmd_handler+0xb8>)
    6624:	4798      	blx	r3
    6626:	21d0      	movs	r1, #208	; 0xd0
    6628:	4288      	cmp	r0, r1
    662a:	d022      	beq.n	6672 <gapm_get_dev_config_cmd_handler+0xa2>
    662c:	2301      	movs	r3, #1
    662e:	8821      	ldrh	r1, [r4, #0]
    6630:	4a16      	ldr	r2, [pc, #88]	; (668c <gapm_get_dev_config_cmd_handler+0xbc>)
    6632:	68a7      	ldr	r7, [r4, #8]
    6634:	425b      	negs	r3, r3
    6636:	4291      	cmp	r1, r2
    6638:	d001      	beq.n	663e <gapm_get_dev_config_cmd_handler+0x6e>
    663a:	8023      	strh	r3, [r4, #0]
    663c:	e008      	b.n	6650 <gapm_get_dev_config_cmd_handler+0x80>
    663e:	8063      	strh	r3, [r4, #2]
    6640:	1c39      	adds	r1, r7, #0
    6642:	4b13      	ldr	r3, [pc, #76]	; (6690 <gapm_get_dev_config_cmd_handler+0xc0>)
    6644:	1c68      	adds	r0, r5, #1
    6646:	2206      	movs	r2, #6
    6648:	4798      	blx	r3
    664a:	79bb      	ldrb	r3, [r7, #6]
    664c:	702b      	strb	r3, [r5, #0]
    664e:	68e7      	ldr	r7, [r4, #12]
    6650:	783c      	ldrb	r4, [r7, #0]
    6652:	7879      	ldrb	r1, [r7, #1]
    6654:	2c06      	cmp	r4, #6
    6656:	d00c      	beq.n	6672 <gapm_get_dev_config_cmd_handler+0xa2>
    6658:	4d0e      	ldr	r5, [pc, #56]	; (6694 <gapm_get_dev_config_cmd_handler+0xc4>)
    665a:	490f      	ldr	r1, [pc, #60]	; (6698 <gapm_get_dev_config_cmd_handler+0xc8>)
    665c:	2286      	movs	r2, #134	; 0x86
    665e:	4b0f      	ldr	r3, [pc, #60]	; (669c <gapm_get_dev_config_cmd_handler+0xcc>)
    6660:	480f      	ldr	r0, [pc, #60]	; (66a0 <gapm_get_dev_config_cmd_handler+0xd0>)
    6662:	682e      	ldr	r6, [r5, #0]
    6664:	47b0      	blx	r6
    6666:	2106      	movs	r1, #6
    6668:	682b      	ldr	r3, [r5, #0]
    666a:	480e      	ldr	r0, [pc, #56]	; (66a4 <gapm_get_dev_config_cmd_handler+0xd4>)
    666c:	1c22      	adds	r2, r4, #0
    666e:	4798      	blx	r3
    6670:	21e2      	movs	r1, #226	; 0xe2
    6672:	1c08      	adds	r0, r1, #0
    6674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6676:	46c0      	nop			; (mov r8, r8)
    6678:	0000970c 	.word	0x0000970c
    667c:	200018a8 	.word	0x200018a8
    6680:	00000d08 	.word	0x00000d08
    6684:	00004e51 	.word	0x00004e51
    6688:	000050b5 	.word	0x000050b5
    668c:	0000ffff 	.word	0x0000ffff
    6690:	000074b7 	.word	0x000074b7
    6694:	20000030 	.word	0x20000030
    6698:	00009a37 	.word	0x00009a37
    669c:	00009aa2 	.word	0x00009aa2
    66a0:	000093e1 	.word	0x000093e1
    66a4:	00009a72 	.word	0x00009a72

000066a8 <gapm_cancel_cmd_handler>:
    66a8:	b538      	push	{r3, r4, r5, lr}
    66aa:	2210      	movs	r2, #16
    66ac:	2400      	movs	r4, #0
    66ae:	4b13      	ldr	r3, [pc, #76]	; (66fc <gapm_cancel_cmd_handler+0x54>)
    66b0:	4d13      	ldr	r5, [pc, #76]	; (6700 <gapm_cancel_cmd_handler+0x58>)
    66b2:	6818      	ldr	r0, [r3, #0]
    66b4:	2305      	movs	r3, #5
    66b6:	60ac      	str	r4, [r5, #8]
    66b8:	60ec      	str	r4, [r5, #12]
    66ba:	7142      	strb	r2, [r0, #5]
    66bc:	3a0e      	subs	r2, #14
    66be:	7242      	strb	r2, [r0, #9]
    66c0:	22d0      	movs	r2, #208	; 0xd0
    66c2:	7003      	strb	r3, [r0, #0]
    66c4:	3b02      	subs	r3, #2
    66c6:	7043      	strb	r3, [r0, #1]
    66c8:	330a      	adds	r3, #10
    66ca:	7083      	strb	r3, [r0, #2]
    66cc:	70c3      	strb	r3, [r0, #3]
    66ce:	7104      	strb	r4, [r0, #4]
    66d0:	80ab      	strh	r3, [r5, #4]
    66d2:	3b0c      	subs	r3, #12
    66d4:	0112      	lsls	r2, r2, #4
    66d6:	71c3      	strb	r3, [r0, #7]
    66d8:	7184      	strb	r4, [r0, #6]
    66da:	4b0a      	ldr	r3, [pc, #40]	; (6704 <gapm_cancel_cmd_handler+0x5c>)
    66dc:	7204      	strb	r4, [r0, #8]
    66de:	210a      	movs	r1, #10
    66e0:	802a      	strh	r2, [r5, #0]
    66e2:	4798      	blx	r3
    66e4:	4b08      	ldr	r3, [pc, #32]	; (6708 <gapm_cancel_cmd_handler+0x60>)
    66e6:	4798      	blx	r3
    66e8:	28d0      	cmp	r0, #208	; 0xd0
    66ea:	d005      	beq.n	66f8 <gapm_cancel_cmd_handler+0x50>
    66ec:	68ab      	ldr	r3, [r5, #8]
    66ee:	1c20      	adds	r0, r4, #0
    66f0:	785b      	ldrb	r3, [r3, #1]
    66f2:	2b44      	cmp	r3, #68	; 0x44
    66f4:	d000      	beq.n	66f8 <gapm_cancel_cmd_handler+0x50>
    66f6:	1c18      	adds	r0, r3, #0
    66f8:	bd38      	pop	{r3, r4, r5, pc}
    66fa:	46c0      	nop			; (mov r8, r8)
    66fc:	0000970c 	.word	0x0000970c
    6700:	200018a8 	.word	0x200018a8
    6704:	00004e51 	.word	0x00004e51
    6708:	000050b5 	.word	0x000050b5

0000670c <gapm_dev_bdaddr_ind_handler>:
    670c:	b538      	push	{r3, r4, r5, lr}
    670e:	1c05      	adds	r5, r0, #0
    6710:	1c0c      	adds	r4, r1, #0
    6712:	1c48      	adds	r0, r1, #1
    6714:	2206      	movs	r2, #6
    6716:	1c29      	adds	r1, r5, #0
    6718:	4b02      	ldr	r3, [pc, #8]	; (6724 <gapm_dev_bdaddr_ind_handler+0x18>)
    671a:	4798      	blx	r3
    671c:	79ab      	ldrb	r3, [r5, #6]
    671e:	2000      	movs	r0, #0
    6720:	7023      	strb	r3, [r4, #0]
    6722:	bd38      	pop	{r3, r4, r5, pc}
    6724:	000074b7 	.word	0x000074b7

00006728 <gapm_cmp_evt>:
    6728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    672a:	7806      	ldrb	r6, [r0, #0]
    672c:	7845      	ldrb	r5, [r0, #1]
    672e:	1c30      	adds	r0, r6, #0
    6730:	380c      	subs	r0, #12
    6732:	1c0c      	adds	r4, r1, #0
    6734:	280b      	cmp	r0, #11
    6736:	d900      	bls.n	673a <gapm_cmp_evt+0x12>
    6738:	e08c      	b.n	6854 <gapm_cmp_evt+0x12c>
    673a:	f000 fd97 	bl	726c <__gnu_thumb1_case_uqi>
    673e:	1952      	.short	0x1952
    6740:	068b1919 	.word	0x068b1919
    6744:	8b595906 	.word	0x8b595906
    6748:	0d8b      	.short	0x0d8b
    674a:	2300      	movs	r3, #0
    674c:	2d45      	cmp	r5, #69	; 0x45
    674e:	d000      	beq.n	6752 <gapm_cmp_evt+0x2a>
    6750:	1c2b      	adds	r3, r5, #0
    6752:	7023      	strb	r3, [r4, #0]
    6754:	2002      	movs	r0, #2
    6756:	e08a      	b.n	686e <gapm_cmp_evt+0x146>
    6758:	203a      	movs	r0, #58	; 0x3a
    675a:	2d00      	cmp	r5, #0
    675c:	d100      	bne.n	6760 <gapm_cmp_evt+0x38>
    675e:	e086      	b.n	686e <gapm_cmp_evt+0x146>
    6760:	700d      	strb	r5, [r1, #0]
    6762:	1c48      	adds	r0, r1, #1
    6764:	2210      	movs	r2, #16
    6766:	2100      	movs	r1, #0
    6768:	4b41      	ldr	r3, [pc, #260]	; (6870 <gapm_cmp_evt+0x148>)
    676a:	4798      	blx	r3
    676c:	200f      	movs	r0, #15
    676e:	e07e      	b.n	686e <gapm_cmp_evt+0x146>
    6770:	2d00      	cmp	r5, #0
    6772:	d134      	bne.n	67de <gapm_cmp_evt+0xb6>
    6774:	4b3f      	ldr	r3, [pc, #252]	; (6874 <gapm_cmp_evt+0x14c>)
    6776:	4798      	blx	r3
    6778:	1e43      	subs	r3, r0, #1
    677a:	b2db      	uxtb	r3, r3
    677c:	1c28      	adds	r0, r5, #0
    677e:	2b06      	cmp	r3, #6
    6780:	d875      	bhi.n	686e <gapm_cmp_evt+0x146>
    6782:	466b      	mov	r3, sp
    6784:	4e3c      	ldr	r6, [pc, #240]	; (6878 <gapm_cmp_evt+0x150>)
    6786:	1dd9      	adds	r1, r3, #7
    6788:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
    678a:	4b3c      	ldr	r3, [pc, #240]	; (687c <gapm_cmp_evt+0x154>)
    678c:	4798      	blx	r3
    678e:	2312      	movs	r3, #18
    6790:	4358      	muls	r0, r3
    6792:	493b      	ldr	r1, [pc, #236]	; (6880 <gapm_cmp_evt+0x158>)
    6794:	1809      	adds	r1, r1, r0
    6796:	1c0b      	adds	r3, r1, #0
    6798:	894a      	ldrh	r2, [r1, #10]
    679a:	3308      	adds	r3, #8
    679c:	8122      	strh	r2, [r4, #8]
    679e:	784f      	ldrb	r7, [r1, #1]
    67a0:	72a5      	strb	r5, [r4, #10]
    67a2:	7027      	strb	r7, [r4, #0]
    67a4:	898a      	ldrh	r2, [r1, #12]
    67a6:	1c60      	adds	r0, r4, #1
    67a8:	81a2      	strh	r2, [r4, #12]
    67aa:	88db      	ldrh	r3, [r3, #6]
    67ac:	3102      	adds	r1, #2
    67ae:	81e3      	strh	r3, [r4, #14]
    67b0:	89cb      	ldrh	r3, [r1, #14]
    67b2:	2206      	movs	r2, #6
    67b4:	8223      	strh	r3, [r4, #16]
    67b6:	4b33      	ldr	r3, [pc, #204]	; (6884 <gapm_cmp_evt+0x15c>)
    67b8:	4798      	blx	r3
    67ba:	2f00      	cmp	r7, #0
    67bc:	d00a      	beq.n	67d4 <gapm_cmp_evt+0xac>
    67be:	79a3      	ldrb	r3, [r4, #6]
    67c0:	223f      	movs	r2, #63	; 0x3f
    67c2:	1c19      	adds	r1, r3, #0
    67c4:	3501      	adds	r5, #1
    67c6:	4391      	bics	r1, r2
    67c8:	29c0      	cmp	r1, #192	; 0xc0
    67ca:	d003      	beq.n	67d4 <gapm_cmp_evt+0xac>
    67cc:	065b      	lsls	r3, r3, #25
    67ce:	0fdb      	lsrs	r3, r3, #31
    67d0:	3502      	adds	r5, #2
    67d2:	1aed      	subs	r5, r5, r3
    67d4:	2301      	movs	r3, #1
    67d6:	425b      	negs	r3, r3
    67d8:	7025      	strb	r5, [r4, #0]
    67da:	85b3      	strh	r3, [r6, #44]	; 0x2c
    67dc:	e038      	b.n	6850 <gapm_cmp_evt+0x128>
    67de:	700d      	strb	r5, [r1, #0]
    67e0:	e004      	b.n	67ec <gapm_cmp_evt+0xc4>
    67e2:	2300      	movs	r3, #0
    67e4:	2d45      	cmp	r5, #69	; 0x45
    67e6:	d000      	beq.n	67ea <gapm_cmp_evt+0xc2>
    67e8:	1c2b      	adds	r3, r5, #0
    67ea:	7023      	strb	r3, [r4, #0]
    67ec:	2003      	movs	r0, #3
    67ee:	e03e      	b.n	686e <gapm_cmp_evt+0x146>
    67f0:	4e21      	ldr	r6, [pc, #132]	; (6878 <gapm_cmp_evt+0x150>)
    67f2:	2100      	movs	r1, #0
    67f4:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
    67f6:	4b21      	ldr	r3, [pc, #132]	; (687c <gapm_cmp_evt+0x154>)
    67f8:	4798      	blx	r3
    67fa:	2807      	cmp	r0, #7
    67fc:	d818      	bhi.n	6830 <gapm_cmp_evt+0x108>
    67fe:	2301      	movs	r3, #1
    6800:	425b      	negs	r3, r3
    6802:	85b3      	strh	r3, [r6, #44]	; 0x2c
    6804:	3313      	adds	r3, #19
    6806:	4358      	muls	r0, r3
    6808:	491d      	ldr	r1, [pc, #116]	; (6880 <gapm_cmp_evt+0x158>)
    680a:	1809      	adds	r1, r1, r0
    680c:	1c0b      	adds	r3, r1, #0
    680e:	894a      	ldrh	r2, [r1, #10]
    6810:	3308      	adds	r3, #8
    6812:	8122      	strh	r2, [r4, #8]
    6814:	784a      	ldrb	r2, [r1, #1]
    6816:	72a5      	strb	r5, [r4, #10]
    6818:	7022      	strb	r2, [r4, #0]
    681a:	898a      	ldrh	r2, [r1, #12]
    681c:	1c60      	adds	r0, r4, #1
    681e:	81a2      	strh	r2, [r4, #12]
    6820:	88db      	ldrh	r3, [r3, #6]
    6822:	3102      	adds	r1, #2
    6824:	81e3      	strh	r3, [r4, #14]
    6826:	89cb      	ldrh	r3, [r1, #14]
    6828:	2206      	movs	r2, #6
    682a:	8223      	strh	r3, [r4, #16]
    682c:	4b15      	ldr	r3, [pc, #84]	; (6884 <gapm_cmp_evt+0x15c>)
    682e:	4798      	blx	r3
    6830:	2200      	movs	r2, #0
    6832:	7823      	ldrb	r3, [r4, #0]
    6834:	4293      	cmp	r3, r2
    6836:	d00a      	beq.n	684e <gapm_cmp_evt+0x126>
    6838:	79a3      	ldrb	r3, [r4, #6]
    683a:	323f      	adds	r2, #63	; 0x3f
    683c:	1c19      	adds	r1, r3, #0
    683e:	4391      	bics	r1, r2
    6840:	3a3e      	subs	r2, #62	; 0x3e
    6842:	29c0      	cmp	r1, #192	; 0xc0
    6844:	d003      	beq.n	684e <gapm_cmp_evt+0x126>
    6846:	065b      	lsls	r3, r3, #25
    6848:	0fdb      	lsrs	r3, r3, #31
    684a:	3202      	adds	r2, #2
    684c:	1ad2      	subs	r2, r2, r3
    684e:	7022      	strb	r2, [r4, #0]
    6850:	2005      	movs	r0, #5
    6852:	e00c      	b.n	686e <gapm_cmp_evt+0x146>
    6854:	2292      	movs	r2, #146	; 0x92
    6856:	4c0c      	ldr	r4, [pc, #48]	; (6888 <gapm_cmp_evt+0x160>)
    6858:	490c      	ldr	r1, [pc, #48]	; (688c <gapm_cmp_evt+0x164>)
    685a:	0052      	lsls	r2, r2, #1
    685c:	4b0c      	ldr	r3, [pc, #48]	; (6890 <gapm_cmp_evt+0x168>)
    685e:	480d      	ldr	r0, [pc, #52]	; (6894 <gapm_cmp_evt+0x16c>)
    6860:	6825      	ldr	r5, [r4, #0]
    6862:	47a8      	blx	r5
    6864:	6823      	ldr	r3, [r4, #0]
    6866:	480c      	ldr	r0, [pc, #48]	; (6898 <gapm_cmp_evt+0x170>)
    6868:	1c31      	adds	r1, r6, #0
    686a:	4798      	blx	r3
    686c:	2000      	movs	r0, #0
    686e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6870:	000074c9 	.word	0x000074c9
    6874:	00005951 	.word	0x00005951
    6878:	20001948 	.word	0x20001948
    687c:	00005915 	.word	0x00005915
    6880:	200018b8 	.word	0x200018b8
    6884:	000074b7 	.word	0x000074b7
    6888:	20000030 	.word	0x20000030
    688c:	00009a37 	.word	0x00009a37
    6890:	00009ac2 	.word	0x00009ac2
    6894:	000093e1 	.word	0x000093e1
    6898:	00009a8a 	.word	0x00009a8a

0000689c <gapm_start_adv_cmd_handler>:
    689c:	b5f0      	push	{r4, r5, r6, r7, lr}
    689e:	b089      	sub	sp, #36	; 0x24
    68a0:	9303      	str	r3, [sp, #12]
    68a2:	ab0e      	add	r3, sp, #56	; 0x38
    68a4:	9102      	str	r1, [sp, #8]
    68a6:	cb02      	ldmia	r3!, {r1}
    68a8:	aa08      	add	r2, sp, #32
    68aa:	881e      	ldrh	r6, [r3, #0]
    68ac:	ab10      	add	r3, sp, #64	; 0x40
    68ae:	881b      	ldrh	r3, [r3, #0]
    68b0:	4c3b      	ldr	r4, [pc, #236]	; (69a0 <gapm_start_adv_cmd_handler+0x104>)
    68b2:	9300      	str	r3, [sp, #0]
    68b4:	ab11      	add	r3, sp, #68	; 0x44
    68b6:	781b      	ldrb	r3, [r3, #0]
    68b8:	9304      	str	r3, [sp, #16]
    68ba:	ab12      	add	r3, sp, #72	; 0x48
    68bc:	781b      	ldrb	r3, [r3, #0]
    68be:	9305      	str	r3, [sp, #20]
    68c0:	ab13      	add	r3, sp, #76	; 0x4c
    68c2:	781b      	ldrb	r3, [r3, #0]
    68c4:	9306      	str	r3, [sp, #24]
    68c6:	ab14      	add	r3, sp, #80	; 0x50
    68c8:	781b      	ldrb	r3, [r3, #0]
    68ca:	9301      	str	r3, [sp, #4]
    68cc:	2319      	movs	r3, #25
    68ce:	189b      	adds	r3, r3, r2
    68d0:	7fdd      	ldrb	r5, [r3, #31]
    68d2:	ab18      	add	r3, sp, #96	; 0x60
    68d4:	881f      	ldrh	r7, [r3, #0]
    68d6:	ab19      	add	r3, sp, #100	; 0x64
    68d8:	781b      	ldrb	r3, [r3, #0]
    68da:	2205      	movs	r2, #5
    68dc:	9307      	str	r3, [sp, #28]
    68de:	2300      	movs	r3, #0
    68e0:	60a3      	str	r3, [r4, #8]
    68e2:	60e3      	str	r3, [r4, #12]
    68e4:	4c2f      	ldr	r4, [pc, #188]	; (69a4 <gapm_start_adv_cmd_handler+0x108>)
    68e6:	6824      	ldr	r4, [r4, #0]
    68e8:	7022      	strb	r2, [r4, #0]
    68ea:	220d      	movs	r2, #13
    68ec:	7062      	strb	r2, [r4, #1]
    68ee:	70a2      	strb	r2, [r4, #2]
    68f0:	70e2      	strb	r2, [r4, #3]
    68f2:	2210      	movs	r2, #16
    68f4:	7123      	strb	r3, [r4, #4]
    68f6:	7162      	strb	r2, [r4, #5]
    68f8:	71a3      	strb	r3, [r4, #6]
    68fa:	71e3      	strb	r3, [r4, #7]
    68fc:	7223      	strb	r3, [r4, #8]
    68fe:	7260      	strb	r0, [r4, #9]
    6900:	72e3      	strb	r3, [r4, #11]
    6902:	7323      	strb	r3, [r4, #12]
    6904:	466b      	mov	r3, sp
    6906:	781b      	ldrb	r3, [r3, #0]
    6908:	466a      	mov	r2, sp
    690a:	73e3      	strb	r3, [r4, #15]
    690c:	9b00      	ldr	r3, [sp, #0]
    690e:	7a12      	ldrb	r2, [r2, #8]
    6910:	0a1b      	lsrs	r3, r3, #8
    6912:	7423      	strb	r3, [r4, #16]
    6914:	466b      	mov	r3, sp
    6916:	7c1b      	ldrb	r3, [r3, #16]
    6918:	7366      	strb	r6, [r4, #13]
    691a:	380e      	subs	r0, #14
    691c:	0a36      	lsrs	r6, r6, #8
    691e:	72a2      	strb	r2, [r4, #10]
    6920:	73a6      	strb	r6, [r4, #14]
    6922:	7463      	strb	r3, [r4, #17]
    6924:	2801      	cmp	r0, #1
    6926:	d80a      	bhi.n	693e <gapm_start_adv_cmd_handler+0xa2>
    6928:	2900      	cmp	r1, #0
    692a:	d004      	beq.n	6936 <gapm_start_adv_cmd_handler+0x9a>
    692c:	1c20      	adds	r0, r4, #0
    692e:	2206      	movs	r2, #6
    6930:	3012      	adds	r0, #18
    6932:	4b1d      	ldr	r3, [pc, #116]	; (69a8 <gapm_start_adv_cmd_handler+0x10c>)
    6934:	4798      	blx	r3
    6936:	466b      	mov	r3, sp
    6938:	7b1b      	ldrb	r3, [r3, #12]
    693a:	7623      	strb	r3, [r4, #24]
    693c:	e016      	b.n	696c <gapm_start_adv_cmd_handler+0xd0>
    693e:	466b      	mov	r3, sp
    6940:	7d1b      	ldrb	r3, [r3, #20]
    6942:	1c20      	adds	r0, r4, #0
    6944:	74a3      	strb	r3, [r4, #18]
    6946:	466b      	mov	r3, sp
    6948:	7e1b      	ldrb	r3, [r3, #24]
    694a:	9915      	ldr	r1, [sp, #84]	; 0x54
    694c:	74e3      	strb	r3, [r4, #19]
    694e:	466b      	mov	r3, sp
    6950:	791b      	ldrb	r3, [r3, #4]
    6952:	9a01      	ldr	r2, [sp, #4]
    6954:	7523      	strb	r3, [r4, #20]
    6956:	3015      	adds	r0, #21
    6958:	4e13      	ldr	r6, [pc, #76]	; (69a8 <gapm_start_adv_cmd_handler+0x10c>)
    695a:	47b0      	blx	r6
    695c:	1c23      	adds	r3, r4, #0
    695e:	1c20      	adds	r0, r4, #0
    6960:	3331      	adds	r3, #49	; 0x31
    6962:	701d      	strb	r5, [r3, #0]
    6964:	3032      	adds	r0, #50	; 0x32
    6966:	9917      	ldr	r1, [sp, #92]	; 0x5c
    6968:	1c2a      	adds	r2, r5, #0
    696a:	47b0      	blx	r6
    696c:	1c22      	adds	r2, r4, #0
    696e:	23a5      	movs	r3, #165	; 0xa5
    6970:	3251      	adds	r2, #81	; 0x51
    6972:	7013      	strb	r3, [r2, #0]
    6974:	7053      	strb	r3, [r2, #1]
    6976:	1c23      	adds	r3, r4, #0
    6978:	3353      	adds	r3, #83	; 0x53
    697a:	701f      	strb	r7, [r3, #0]
    697c:	0a3b      	lsrs	r3, r7, #8
    697e:	70d3      	strb	r3, [r2, #3]
    6980:	466a      	mov	r2, sp
    6982:	1c23      	adds	r3, r4, #0
    6984:	7f12      	ldrb	r2, [r2, #28]
    6986:	3355      	adds	r3, #85	; 0x55
    6988:	701a      	strb	r2, [r3, #0]
    698a:	2500      	movs	r5, #0
    698c:	234d      	movs	r3, #77	; 0x4d
    698e:	7225      	strb	r5, [r4, #8]
    6990:	71e3      	strb	r3, [r4, #7]
    6992:	1c20      	adds	r0, r4, #0
    6994:	2156      	movs	r1, #86	; 0x56
    6996:	4b05      	ldr	r3, [pc, #20]	; (69ac <gapm_start_adv_cmd_handler+0x110>)
    6998:	4798      	blx	r3
    699a:	1c28      	adds	r0, r5, #0
    699c:	b009      	add	sp, #36	; 0x24
    699e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69a0:	200018a8 	.word	0x200018a8
    69a4:	0000970c 	.word	0x0000970c
    69a8:	000074b7 	.word	0x000074b7
    69ac:	00004e51 	.word	0x00004e51

000069b0 <get_gap_local_addr_type>:
    69b0:	4b04      	ldr	r3, [pc, #16]	; (69c4 <get_gap_local_addr_type+0x14>)
    69b2:	2001      	movs	r0, #1
    69b4:	791b      	ldrb	r3, [r3, #4]
    69b6:	2b02      	cmp	r3, #2
    69b8:	d003      	beq.n	69c2 <get_gap_local_addr_type+0x12>
    69ba:	3b03      	subs	r3, #3
    69bc:	4258      	negs	r0, r3
    69be:	4158      	adcs	r0, r3
    69c0:	0040      	lsls	r0, r0, #1
    69c2:	4770      	bx	lr
    69c4:	20001948 	.word	0x20001948

000069c8 <gapm_adv_report_evt_handler>:
    69c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    69ca:	7843      	ldrb	r3, [r0, #1]
    69cc:	1c05      	adds	r5, r0, #0
    69ce:	9301      	str	r3, [sp, #4]
    69d0:	466b      	mov	r3, sp
    69d2:	1c0c      	adds	r4, r1, #0
    69d4:	791b      	ldrb	r3, [r3, #4]
    69d6:	7806      	ldrb	r6, [r0, #0]
    69d8:	2206      	movs	r2, #6
    69da:	704b      	strb	r3, [r1, #1]
    69dc:	1c88      	adds	r0, r1, #2
    69de:	4f1b      	ldr	r7, [pc, #108]	; (6a4c <gapm_adv_report_evt_handler+0x84>)
    69e0:	1ca9      	adds	r1, r5, #2
    69e2:	47b8      	blx	r7
    69e4:	1c20      	adds	r0, r4, #0
    69e6:	1c29      	adds	r1, r5, #0
    69e8:	7a2a      	ldrb	r2, [r5, #8]
    69ea:	3008      	adds	r0, #8
    69ec:	77c2      	strb	r2, [r0, #31]
    69ee:	3109      	adds	r1, #9
    69f0:	3528      	adds	r5, #40	; 0x28
    69f2:	47b8      	blx	r7
    69f4:	782b      	ldrb	r3, [r5, #0]
    69f6:	b25a      	sxtb	r2, r3
    69f8:	2a00      	cmp	r2, #0
    69fa:	da01      	bge.n	6a00 <gapm_adv_report_evt_handler+0x38>
    69fc:	3301      	adds	r3, #1
    69fe:	b2db      	uxtb	r3, r3
    6a00:	1c22      	adds	r2, r4, #0
    6a02:	3228      	adds	r2, #40	; 0x28
    6a04:	7013      	strb	r3, [r2, #0]
    6a06:	2200      	movs	r2, #0
    6a08:	9b01      	ldr	r3, [sp, #4]
    6a0a:	4293      	cmp	r3, r2
    6a0c:	d00a      	beq.n	6a24 <gapm_adv_report_evt_handler+0x5c>
    6a0e:	79e3      	ldrb	r3, [r4, #7]
    6a10:	323f      	adds	r2, #63	; 0x3f
    6a12:	1c19      	adds	r1, r3, #0
    6a14:	4391      	bics	r1, r2
    6a16:	3a3e      	subs	r2, #62	; 0x3e
    6a18:	29c0      	cmp	r1, #192	; 0xc0
    6a1a:	d003      	beq.n	6a24 <gapm_adv_report_evt_handler+0x5c>
    6a1c:	065b      	lsls	r3, r3, #25
    6a1e:	0fdb      	lsrs	r3, r3, #31
    6a20:	3202      	adds	r2, #2
    6a22:	1ad2      	subs	r2, r2, r3
    6a24:	7062      	strb	r2, [r4, #1]
    6a26:	2e04      	cmp	r6, #4
    6a28:	d80f      	bhi.n	6a4a <gapm_adv_report_evt_handler+0x82>
    6a2a:	1c30      	adds	r0, r6, #0
    6a2c:	f000 fc1e 	bl	726c <__gnu_thumb1_case_uqi>
    6a30:	09070503 	.word	0x09070503
    6a34:	0b          	.byte	0x0b
    6a35:	00          	.byte	0x00
    6a36:	2300      	movs	r3, #0
    6a38:	e006      	b.n	6a48 <gapm_adv_report_evt_handler+0x80>
    6a3a:	2301      	movs	r3, #1
    6a3c:	e004      	b.n	6a48 <gapm_adv_report_evt_handler+0x80>
    6a3e:	2302      	movs	r3, #2
    6a40:	e002      	b.n	6a48 <gapm_adv_report_evt_handler+0x80>
    6a42:	2303      	movs	r3, #3
    6a44:	e000      	b.n	6a48 <gapm_adv_report_evt_handler+0x80>
    6a46:	2305      	movs	r3, #5
    6a48:	7023      	strb	r3, [r4, #0]
    6a4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    6a4c:	000074b7 	.word	0x000074b7

00006a50 <gapm_resolv_addr_cmd_handler>:
    6a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a52:	2300      	movs	r3, #0
    6a54:	1c16      	adds	r6, r2, #0
    6a56:	4a16      	ldr	r2, [pc, #88]	; (6ab0 <gapm_resolv_addr_cmd_handler+0x60>)
    6a58:	1c05      	adds	r5, r0, #0
    6a5a:	6093      	str	r3, [r2, #8]
    6a5c:	60d3      	str	r3, [r2, #12]
    6a5e:	4a15      	ldr	r2, [pc, #84]	; (6ab4 <gapm_resolv_addr_cmd_handler+0x64>)
    6a60:	4f15      	ldr	r7, [pc, #84]	; (6ab8 <gapm_resolv_addr_cmd_handler+0x68>)
    6a62:	6814      	ldr	r4, [r2, #0]
    6a64:	2205      	movs	r2, #5
    6a66:	72a0      	strb	r0, [r4, #10]
    6a68:	1c20      	adds	r0, r4, #0
    6a6a:	7022      	strb	r2, [r4, #0]
    6a6c:	320f      	adds	r2, #15
    6a6e:	7062      	strb	r2, [r4, #1]
    6a70:	3a07      	subs	r2, #7
    6a72:	70a2      	strb	r2, [r4, #2]
    6a74:	70e2      	strb	r2, [r4, #3]
    6a76:	7123      	strb	r3, [r4, #4]
    6a78:	71a3      	strb	r3, [r4, #6]
    6a7a:	71e3      	strb	r3, [r4, #7]
    6a7c:	7223      	strb	r3, [r4, #8]
    6a7e:	3203      	adds	r2, #3
    6a80:	3317      	adds	r3, #23
    6a82:	7263      	strb	r3, [r4, #9]
    6a84:	7162      	strb	r2, [r4, #5]
    6a86:	300b      	adds	r0, #11
    6a88:	3a0a      	subs	r2, #10
    6a8a:	47b8      	blx	r7
    6a8c:	1c20      	adds	r0, r4, #0
    6a8e:	012d      	lsls	r5, r5, #4
    6a90:	1c31      	adds	r1, r6, #0
    6a92:	1c2a      	adds	r2, r5, #0
    6a94:	3011      	adds	r0, #17
    6a96:	47b8      	blx	r7
    6a98:	1c29      	adds	r1, r5, #0
    6a9a:	3111      	adds	r1, #17
    6a9c:	1c0b      	adds	r3, r1, #0
    6a9e:	3b09      	subs	r3, #9
    6aa0:	71e3      	strb	r3, [r4, #7]
    6aa2:	121b      	asrs	r3, r3, #8
    6aa4:	7223      	strb	r3, [r4, #8]
    6aa6:	1c20      	adds	r0, r4, #0
    6aa8:	4b04      	ldr	r3, [pc, #16]	; (6abc <gapm_resolv_addr_cmd_handler+0x6c>)
    6aaa:	4798      	blx	r3
    6aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6aae:	46c0      	nop			; (mov r8, r8)
    6ab0:	200018a8 	.word	0x200018a8
    6ab4:	0000970c 	.word	0x0000970c
    6ab8:	000074b7 	.word	0x000074b7
    6abc:	00004e51 	.word	0x00004e51

00006ac0 <gapm_addr_solved_ind_handler>:
    6ac0:	b570      	push	{r4, r5, r6, lr}
    6ac2:	1c04      	adds	r4, r0, #0
    6ac4:	1c08      	adds	r0, r1, #0
    6ac6:	1c0d      	adds	r5, r1, #0
    6ac8:	4e05      	ldr	r6, [pc, #20]	; (6ae0 <gapm_addr_solved_ind_handler+0x20>)
    6aca:	1c21      	adds	r1, r4, #0
    6acc:	2206      	movs	r2, #6
    6ace:	3011      	adds	r0, #17
    6ad0:	47b0      	blx	r6
    6ad2:	1c68      	adds	r0, r5, #1
    6ad4:	1da1      	adds	r1, r4, #6
    6ad6:	2210      	movs	r2, #16
    6ad8:	47b0      	blx	r6
    6ada:	2300      	movs	r3, #0
    6adc:	702b      	strb	r3, [r5, #0]
    6ade:	bd70      	pop	{r4, r5, r6, pc}
    6ae0:	000074b7 	.word	0x000074b7

00006ae4 <gapm_profile_added_ind_handler>:
    6ae4:	b510      	push	{r4, lr}
    6ae6:	7843      	ldrb	r3, [r0, #1]
    6ae8:	7902      	ldrb	r2, [r0, #4]
    6aea:	7944      	ldrb	r4, [r0, #5]
    6aec:	7800      	ldrb	r0, [r0, #0]
    6aee:	021b      	lsls	r3, r3, #8
    6af0:	4303      	orrs	r3, r0
    6af2:	2b1b      	cmp	r3, #27
    6af4:	d104      	bne.n	6b00 <gapm_profile_added_ind_handler+0x1c>
    6af6:	2300      	movs	r3, #0
    6af8:	700b      	strb	r3, [r1, #0]
    6afa:	0223      	lsls	r3, r4, #8
    6afc:	4313      	orrs	r3, r2
    6afe:	804b      	strh	r3, [r1, #2]
    6b00:	203a      	movs	r0, #58	; 0x3a
    6b02:	bd10      	pop	{r4, pc}

00006b04 <gattc_read_req_ind_parser>:
    6b04:	7843      	ldrb	r3, [r0, #1]
    6b06:	7802      	ldrb	r2, [r0, #0]
    6b08:	021b      	lsls	r3, r3, #8
    6b0a:	4313      	orrs	r3, r2
    6b0c:	804b      	strh	r3, [r1, #2]
    6b0e:	4770      	bx	lr

00006b10 <gattc_write_req_ind_parser>:
    6b10:	b508      	push	{r3, lr}
    6b12:	1c13      	adds	r3, r2, #0
    6b14:	0a00      	lsrs	r0, r0, #8
    6b16:	8010      	strh	r0, [r2, #0]
    6b18:	784a      	ldrb	r2, [r1, #1]
    6b1a:	7808      	ldrb	r0, [r1, #0]
    6b1c:	0212      	lsls	r2, r2, #8
    6b1e:	4302      	orrs	r2, r0
    6b20:	805a      	strh	r2, [r3, #2]
    6b22:	78ca      	ldrb	r2, [r1, #3]
    6b24:	7888      	ldrb	r0, [r1, #2]
    6b26:	0212      	lsls	r2, r2, #8
    6b28:	4302      	orrs	r2, r0
    6b2a:	809a      	strh	r2, [r3, #4]
    6b2c:	794a      	ldrb	r2, [r1, #5]
    6b2e:	7908      	ldrb	r0, [r1, #4]
    6b30:	0212      	lsls	r2, r2, #8
    6b32:	4302      	orrs	r2, r0
    6b34:	80da      	strh	r2, [r3, #6]
    6b36:	3308      	adds	r3, #8
    6b38:	1c18      	adds	r0, r3, #0
    6b3a:	3106      	adds	r1, #6
    6b3c:	4b01      	ldr	r3, [pc, #4]	; (6b44 <gattc_write_req_ind_parser+0x34>)
    6b3e:	4798      	blx	r3
    6b40:	bd08      	pop	{r3, pc}
    6b42:	46c0      	nop			; (mov r8, r8)
    6b44:	000074b7 	.word	0x000074b7

00006b48 <gattc_att_info_req_parser>:
    6b48:	7843      	ldrb	r3, [r0, #1]
    6b4a:	7802      	ldrb	r2, [r0, #0]
    6b4c:	021b      	lsls	r3, r3, #8
    6b4e:	4313      	orrs	r3, r2
    6b50:	800b      	strh	r3, [r1, #0]
    6b52:	4770      	bx	lr

00006b54 <gattc_read_cfm>:
    6b54:	b570      	push	{r4, r5, r6, lr}
    6b56:	1c1d      	adds	r5, r3, #0
    6b58:	2300      	movs	r3, #0
    6b5a:	4c17      	ldr	r4, [pc, #92]	; (6bb8 <gattc_read_cfm+0x64>)
    6b5c:	2605      	movs	r6, #5
    6b5e:	60a3      	str	r3, [r4, #8]
    6b60:	60e3      	str	r3, [r4, #12]
    6b62:	4c16      	ldr	r4, [pc, #88]	; (6bbc <gattc_read_cfm+0x68>)
    6b64:	6824      	ldr	r4, [r4, #0]
    6b66:	7121      	strb	r1, [r4, #4]
    6b68:	2110      	movs	r1, #16
    6b6a:	7026      	strb	r6, [r4, #0]
    6b6c:	360f      	adds	r6, #15
    6b6e:	7066      	strb	r6, [r4, #1]
    6b70:	71a3      	strb	r3, [r4, #6]
    6b72:	3e08      	subs	r6, #8
    6b74:	71e3      	strb	r3, [r4, #7]
    6b76:	7223      	strb	r3, [r4, #8]
    6b78:	7260      	strb	r0, [r4, #9]
    6b7a:	0a2b      	lsrs	r3, r5, #8
    6b7c:	0a00      	lsrs	r0, r0, #8
    6b7e:	70a6      	strb	r6, [r4, #2]
    6b80:	70e6      	strb	r6, [r4, #3]
    6b82:	7161      	strb	r1, [r4, #5]
    6b84:	72a0      	strb	r0, [r4, #10]
    6b86:	72e5      	strb	r5, [r4, #11]
    6b88:	7323      	strb	r3, [r4, #12]
    6b8a:	7362      	strb	r2, [r4, #13]
    6b8c:	2d00      	cmp	r5, #0
    6b8e:	d008      	beq.n	6ba2 <gattc_read_cfm+0x4e>
    6b90:	1c20      	adds	r0, r4, #0
    6b92:	9904      	ldr	r1, [sp, #16]
    6b94:	1c2a      	adds	r2, r5, #0
    6b96:	300e      	adds	r0, #14
    6b98:	4b09      	ldr	r3, [pc, #36]	; (6bc0 <gattc_read_cfm+0x6c>)
    6b9a:	350e      	adds	r5, #14
    6b9c:	4798      	blx	r3
    6b9e:	b2a9      	uxth	r1, r5
    6ba0:	e001      	b.n	6ba6 <gattc_read_cfm+0x52>
    6ba2:	210f      	movs	r1, #15
    6ba4:	73a5      	strb	r5, [r4, #14]
    6ba6:	1c0b      	adds	r3, r1, #0
    6ba8:	3b09      	subs	r3, #9
    6baa:	71e3      	strb	r3, [r4, #7]
    6bac:	121b      	asrs	r3, r3, #8
    6bae:	7223      	strb	r3, [r4, #8]
    6bb0:	1c20      	adds	r0, r4, #0
    6bb2:	4b04      	ldr	r3, [pc, #16]	; (6bc4 <gattc_read_cfm+0x70>)
    6bb4:	4798      	blx	r3
    6bb6:	bd70      	pop	{r4, r5, r6, pc}
    6bb8:	200018a8 	.word	0x200018a8
    6bbc:	0000970c 	.word	0x0000970c
    6bc0:	000074b7 	.word	0x000074b7
    6bc4:	00004e51 	.word	0x00004e51

00006bc8 <gattc_write_cfm>:
    6bc8:	b538      	push	{r3, r4, r5, lr}
    6bca:	2400      	movs	r4, #0
    6bcc:	1c0d      	adds	r5, r1, #0
    6bce:	4b0d      	ldr	r3, [pc, #52]	; (6c04 <gattc_write_cfm+0x3c>)
    6bd0:	2105      	movs	r1, #5
    6bd2:	609c      	str	r4, [r3, #8]
    6bd4:	60dc      	str	r4, [r3, #12]
    6bd6:	4b0c      	ldr	r3, [pc, #48]	; (6c08 <gattc_write_cfm+0x40>)
    6bd8:	681b      	ldr	r3, [r3, #0]
    6bda:	711d      	strb	r5, [r3, #4]
    6bdc:	72da      	strb	r2, [r3, #11]
    6bde:	2510      	movs	r5, #16
    6be0:	2203      	movs	r2, #3
    6be2:	7019      	strb	r1, [r3, #0]
    6be4:	3111      	adds	r1, #17
    6be6:	7059      	strb	r1, [r3, #1]
    6be8:	7258      	strb	r0, [r3, #9]
    6bea:	390a      	subs	r1, #10
    6bec:	0a00      	lsrs	r0, r0, #8
    6bee:	715d      	strb	r5, [r3, #5]
    6bf0:	7099      	strb	r1, [r3, #2]
    6bf2:	70d9      	strb	r1, [r3, #3]
    6bf4:	719c      	strb	r4, [r3, #6]
    6bf6:	721c      	strb	r4, [r3, #8]
    6bf8:	7298      	strb	r0, [r3, #10]
    6bfa:	71da      	strb	r2, [r3, #7]
    6bfc:	1c18      	adds	r0, r3, #0
    6bfe:	4b03      	ldr	r3, [pc, #12]	; (6c0c <gattc_write_cfm+0x44>)
    6c00:	4798      	blx	r3
    6c02:	bd38      	pop	{r3, r4, r5, pc}
    6c04:	200018a8 	.word	0x200018a8
    6c08:	0000970c 	.word	0x0000970c
    6c0c:	00004e51 	.word	0x00004e51

00006c10 <gattc_att_info_cfm>:
    6c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c12:	2500      	movs	r5, #0
    6c14:	4c0e      	ldr	r4, [pc, #56]	; (6c50 <gattc_att_info_cfm+0x40>)
    6c16:	2718      	movs	r7, #24
    6c18:	60a5      	str	r5, [r4, #8]
    6c1a:	60e5      	str	r5, [r4, #12]
    6c1c:	4c0d      	ldr	r4, [pc, #52]	; (6c54 <gattc_att_info_cfm+0x44>)
    6c1e:	2605      	movs	r6, #5
    6c20:	6824      	ldr	r4, [r4, #0]
    6c22:	7121      	strb	r1, [r4, #4]
    6c24:	2110      	movs	r1, #16
    6c26:	7067      	strb	r7, [r4, #1]
    6c28:	7260      	strb	r0, [r4, #9]
    6c2a:	3f0c      	subs	r7, #12
    6c2c:	72e2      	strb	r2, [r4, #11]
    6c2e:	0a00      	lsrs	r0, r0, #8
    6c30:	0a12      	lsrs	r2, r2, #8
    6c32:	7026      	strb	r6, [r4, #0]
    6c34:	70a7      	strb	r7, [r4, #2]
    6c36:	70e7      	strb	r7, [r4, #3]
    6c38:	7161      	strb	r1, [r4, #5]
    6c3a:	71a5      	strb	r5, [r4, #6]
    6c3c:	7225      	strb	r5, [r4, #8]
    6c3e:	72a0      	strb	r0, [r4, #10]
    6c40:	7363      	strb	r3, [r4, #13]
    6c42:	71e6      	strb	r6, [r4, #7]
    6c44:	7322      	strb	r2, [r4, #12]
    6c46:	1c20      	adds	r0, r4, #0
    6c48:	3902      	subs	r1, #2
    6c4a:	4b03      	ldr	r3, [pc, #12]	; (6c58 <gattc_att_info_cfm+0x48>)
    6c4c:	4798      	blx	r3
    6c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c50:	200018a8 	.word	0x200018a8
    6c54:	0000970c 	.word	0x0000970c
    6c58:	00004e51 	.word	0x00004e51

00006c5c <gattc_event_cfm_handler>:
    6c5c:	2200      	movs	r2, #0
    6c5e:	4b0e      	ldr	r3, [pc, #56]	; (6c98 <gattc_event_cfm_handler+0x3c>)
    6c60:	b510      	push	{r4, lr}
    6c62:	609a      	str	r2, [r3, #8]
    6c64:	60da      	str	r2, [r3, #12]
    6c66:	4b0d      	ldr	r3, [pc, #52]	; (6c9c <gattc_event_cfm_handler+0x40>)
    6c68:	2405      	movs	r4, #5
    6c6a:	681b      	ldr	r3, [r3, #0]
    6c6c:	7118      	strb	r0, [r3, #4]
    6c6e:	2010      	movs	r0, #16
    6c70:	701c      	strb	r4, [r3, #0]
    6c72:	3409      	adds	r4, #9
    6c74:	705c      	strb	r4, [r3, #1]
    6c76:	719a      	strb	r2, [r3, #6]
    6c78:	3c02      	subs	r4, #2
    6c7a:	721a      	strb	r2, [r3, #8]
    6c7c:	7259      	strb	r1, [r3, #9]
    6c7e:	3202      	adds	r2, #2
    6c80:	0a09      	lsrs	r1, r1, #8
    6c82:	709c      	strb	r4, [r3, #2]
    6c84:	70dc      	strb	r4, [r3, #3]
    6c86:	7158      	strb	r0, [r3, #5]
    6c88:	7299      	strb	r1, [r3, #10]
    6c8a:	71da      	strb	r2, [r3, #7]
    6c8c:	1c18      	adds	r0, r3, #0
    6c8e:	210b      	movs	r1, #11
    6c90:	4b03      	ldr	r3, [pc, #12]	; (6ca0 <gattc_event_cfm_handler+0x44>)
    6c92:	4798      	blx	r3
    6c94:	bd10      	pop	{r4, pc}
    6c96:	46c0      	nop			; (mov r8, r8)
    6c98:	200018a8 	.word	0x200018a8
    6c9c:	0000970c 	.word	0x0000970c
    6ca0:	00004e51 	.word	0x00004e51

00006ca4 <gattc_disc_svc_ind_parser>:
    6ca4:	b570      	push	{r4, r5, r6, lr}
    6ca6:	1c15      	adds	r5, r2, #0
    6ca8:	0a00      	lsrs	r0, r0, #8
    6caa:	8010      	strh	r0, [r2, #0]
    6cac:	784b      	ldrb	r3, [r1, #1]
    6cae:	780a      	ldrb	r2, [r1, #0]
    6cb0:	021b      	lsls	r3, r3, #8
    6cb2:	4313      	orrs	r3, r2
    6cb4:	806b      	strh	r3, [r5, #2]
    6cb6:	78cb      	ldrb	r3, [r1, #3]
    6cb8:	788a      	ldrb	r2, [r1, #2]
    6cba:	021b      	lsls	r3, r3, #8
    6cbc:	4313      	orrs	r3, r2
    6cbe:	80ab      	strh	r3, [r5, #4]
    6cc0:	790e      	ldrb	r6, [r1, #4]
    6cc2:	4b05      	ldr	r3, [pc, #20]	; (6cd8 <gattc_disc_svc_ind_parser+0x34>)
    6cc4:	1c30      	adds	r0, r6, #0
    6cc6:	1c0c      	adds	r4, r1, #0
    6cc8:	4798      	blx	r3
    6cca:	1c32      	adds	r2, r6, #0
    6ccc:	71a8      	strb	r0, [r5, #6]
    6cce:	1d61      	adds	r1, r4, #5
    6cd0:	1de8      	adds	r0, r5, #7
    6cd2:	4b02      	ldr	r3, [pc, #8]	; (6cdc <gattc_disc_svc_ind_parser+0x38>)
    6cd4:	4798      	blx	r3
    6cd6:	bd70      	pop	{r4, r5, r6, pc}
    6cd8:	00004735 	.word	0x00004735
    6cdc:	000074b7 	.word	0x000074b7

00006ce0 <gattc_disc_svc_incl_ind_parser>:
    6ce0:	b570      	push	{r4, r5, r6, lr}
    6ce2:	1c15      	adds	r5, r2, #0
    6ce4:	0a00      	lsrs	r0, r0, #8
    6ce6:	8010      	strh	r0, [r2, #0]
    6ce8:	784b      	ldrb	r3, [r1, #1]
    6cea:	780a      	ldrb	r2, [r1, #0]
    6cec:	021b      	lsls	r3, r3, #8
    6cee:	4313      	orrs	r3, r2
    6cf0:	806b      	strh	r3, [r5, #2]
    6cf2:	78cb      	ldrb	r3, [r1, #3]
    6cf4:	788a      	ldrb	r2, [r1, #2]
    6cf6:	021b      	lsls	r3, r3, #8
    6cf8:	4313      	orrs	r3, r2
    6cfa:	80ab      	strh	r3, [r5, #4]
    6cfc:	794b      	ldrb	r3, [r1, #5]
    6cfe:	790a      	ldrb	r2, [r1, #4]
    6d00:	021b      	lsls	r3, r3, #8
    6d02:	4313      	orrs	r3, r2
    6d04:	80eb      	strh	r3, [r5, #6]
    6d06:	798e      	ldrb	r6, [r1, #6]
    6d08:	4b05      	ldr	r3, [pc, #20]	; (6d20 <gattc_disc_svc_incl_ind_parser+0x40>)
    6d0a:	1c30      	adds	r0, r6, #0
    6d0c:	1c0c      	adds	r4, r1, #0
    6d0e:	4798      	blx	r3
    6d10:	7228      	strb	r0, [r5, #8]
    6d12:	1c28      	adds	r0, r5, #0
    6d14:	1c32      	adds	r2, r6, #0
    6d16:	1de1      	adds	r1, r4, #7
    6d18:	4b02      	ldr	r3, [pc, #8]	; (6d24 <gattc_disc_svc_incl_ind_parser+0x44>)
    6d1a:	3009      	adds	r0, #9
    6d1c:	4798      	blx	r3
    6d1e:	bd70      	pop	{r4, r5, r6, pc}
    6d20:	00004735 	.word	0x00004735
    6d24:	000074b7 	.word	0x000074b7

00006d28 <gattc_disc_char_ind_parser>:
    6d28:	b570      	push	{r4, r5, r6, lr}
    6d2a:	1c15      	adds	r5, r2, #0
    6d2c:	0a00      	lsrs	r0, r0, #8
    6d2e:	8010      	strh	r0, [r2, #0]
    6d30:	784b      	ldrb	r3, [r1, #1]
    6d32:	780a      	ldrb	r2, [r1, #0]
    6d34:	021b      	lsls	r3, r3, #8
    6d36:	4313      	orrs	r3, r2
    6d38:	806b      	strh	r3, [r5, #2]
    6d3a:	78cb      	ldrb	r3, [r1, #3]
    6d3c:	788a      	ldrb	r2, [r1, #2]
    6d3e:	021b      	lsls	r3, r3, #8
    6d40:	4313      	orrs	r3, r2
    6d42:	80ab      	strh	r3, [r5, #4]
    6d44:	790b      	ldrb	r3, [r1, #4]
    6d46:	1c0c      	adds	r4, r1, #0
    6d48:	71ab      	strb	r3, [r5, #6]
    6d4a:	794e      	ldrb	r6, [r1, #5]
    6d4c:	4b05      	ldr	r3, [pc, #20]	; (6d64 <gattc_disc_char_ind_parser+0x3c>)
    6d4e:	1c30      	adds	r0, r6, #0
    6d50:	4798      	blx	r3
    6d52:	71e8      	strb	r0, [r5, #7]
    6d54:	1c28      	adds	r0, r5, #0
    6d56:	1c32      	adds	r2, r6, #0
    6d58:	1da1      	adds	r1, r4, #6
    6d5a:	4b03      	ldr	r3, [pc, #12]	; (6d68 <gattc_disc_char_ind_parser+0x40>)
    6d5c:	3008      	adds	r0, #8
    6d5e:	4798      	blx	r3
    6d60:	bd70      	pop	{r4, r5, r6, pc}
    6d62:	46c0      	nop			; (mov r8, r8)
    6d64:	00004735 	.word	0x00004735
    6d68:	000074b7 	.word	0x000074b7

00006d6c <gattc_disc_char_desc_ind_parser>:
    6d6c:	b570      	push	{r4, r5, r6, lr}
    6d6e:	1c15      	adds	r5, r2, #0
    6d70:	0a00      	lsrs	r0, r0, #8
    6d72:	8010      	strh	r0, [r2, #0]
    6d74:	784b      	ldrb	r3, [r1, #1]
    6d76:	780a      	ldrb	r2, [r1, #0]
    6d78:	021b      	lsls	r3, r3, #8
    6d7a:	4313      	orrs	r3, r2
    6d7c:	806b      	strh	r3, [r5, #2]
    6d7e:	788e      	ldrb	r6, [r1, #2]
    6d80:	4b05      	ldr	r3, [pc, #20]	; (6d98 <gattc_disc_char_desc_ind_parser+0x2c>)
    6d82:	1c30      	adds	r0, r6, #0
    6d84:	1c0c      	adds	r4, r1, #0
    6d86:	4798      	blx	r3
    6d88:	1c32      	adds	r2, r6, #0
    6d8a:	7128      	strb	r0, [r5, #4]
    6d8c:	1ce1      	adds	r1, r4, #3
    6d8e:	1d68      	adds	r0, r5, #5
    6d90:	4b02      	ldr	r3, [pc, #8]	; (6d9c <gattc_disc_char_desc_ind_parser+0x30>)
    6d92:	4798      	blx	r3
    6d94:	bd70      	pop	{r4, r5, r6, pc}
    6d96:	46c0      	nop			; (mov r8, r8)
    6d98:	00004735 	.word	0x00004735
    6d9c:	000074b7 	.word	0x000074b7

00006da0 <gattc_event_ind_and_notification_parser>:
    6da0:	b510      	push	{r4, lr}
    6da2:	780c      	ldrb	r4, [r1, #0]
    6da4:	1c13      	adds	r3, r2, #0
    6da6:	2c12      	cmp	r4, #18
    6da8:	d10e      	bne.n	6dc8 <gattc_event_ind_and_notification_parser+0x28>
    6daa:	0a00      	lsrs	r0, r0, #8
    6dac:	8010      	strh	r0, [r2, #0]
    6dae:	788a      	ldrb	r2, [r1, #2]
    6db0:	709a      	strb	r2, [r3, #2]
    6db2:	7948      	ldrb	r0, [r1, #5]
    6db4:	790c      	ldrb	r4, [r1, #4]
    6db6:	0200      	lsls	r0, r0, #8
    6db8:	4320      	orrs	r0, r4
    6dba:	8098      	strh	r0, [r3, #4]
    6dbc:	3106      	adds	r1, #6
    6dbe:	1d98      	adds	r0, r3, #6
    6dc0:	4b0b      	ldr	r3, [pc, #44]	; (6df0 <gattc_event_ind_and_notification_parser+0x50>)
    6dc2:	4798      	blx	r3
    6dc4:	221b      	movs	r2, #27
    6dc6:	e010      	b.n	6dea <gattc_event_ind_and_notification_parser+0x4a>
    6dc8:	2200      	movs	r2, #0
    6dca:	2c13      	cmp	r4, #19
    6dcc:	d10d      	bne.n	6dea <gattc_event_ind_and_notification_parser+0x4a>
    6dce:	0a00      	lsrs	r0, r0, #8
    6dd0:	8018      	strh	r0, [r3, #0]
    6dd2:	788a      	ldrb	r2, [r1, #2]
    6dd4:	709a      	strb	r2, [r3, #2]
    6dd6:	7908      	ldrb	r0, [r1, #4]
    6dd8:	78cc      	ldrb	r4, [r1, #3]
    6dda:	0200      	lsls	r0, r0, #8
    6ddc:	4320      	orrs	r0, r4
    6dde:	8098      	strh	r0, [r3, #4]
    6de0:	3106      	adds	r1, #6
    6de2:	1d98      	adds	r0, r3, #6
    6de4:	4b02      	ldr	r3, [pc, #8]	; (6df0 <gattc_event_ind_and_notification_parser+0x50>)
    6de6:	4798      	blx	r3
    6de8:	221c      	movs	r2, #28
    6dea:	1c10      	adds	r0, r2, #0
    6dec:	bd10      	pop	{r4, pc}
    6dee:	46c0      	nop			; (mov r8, r8)
    6df0:	000074b7 	.word	0x000074b7

00006df4 <gattc_complete_evt_handler>:
    6df4:	b570      	push	{r4, r5, r6, lr}
    6df6:	1c14      	adds	r4, r2, #0
    6df8:	0a00      	lsrs	r0, r0, #8
    6dfa:	8010      	strh	r0, [r2, #0]
    6dfc:	7808      	ldrb	r0, [r1, #0]
    6dfe:	7090      	strb	r0, [r2, #2]
    6e00:	78cb      	ldrb	r3, [r1, #3]
    6e02:	784a      	ldrb	r2, [r1, #1]
    6e04:	7889      	ldrb	r1, [r1, #2]
    6e06:	021b      	lsls	r3, r3, #8
    6e08:	430b      	orrs	r3, r1
    6e0a:	4926      	ldr	r1, [pc, #152]	; (6ea4 <gattc_complete_evt_handler+0xb0>)
    6e0c:	3801      	subs	r0, #1
    6e0e:	800b      	strh	r3, [r1, #0]
    6e10:	70e2      	strb	r2, [r4, #3]
    6e12:	2813      	cmp	r0, #19
    6e14:	d835      	bhi.n	6e82 <gattc_complete_evt_handler+0x8e>
    6e16:	f000 fa29 	bl	726c <__gnu_thumb1_case_uqi>
    6e1a:	420c      	.short	0x420c
    6e1c:	42424242 	.word	0x42424242
    6e20:	1f1f1f42 	.word	0x1f1f1f42
    6e24:	0a0a0a1d 	.word	0x0a0a0a1d
    6e28:	1134340a 	.word	0x1134340a
    6e2c:	3217      	.short	0x3217
    6e2e:	2025      	movs	r0, #37	; 0x25
    6e30:	e036      	b.n	6ea0 <gattc_complete_evt_handler+0xac>
    6e32:	2024      	movs	r0, #36	; 0x24
    6e34:	2a00      	cmp	r2, #0
    6e36:	d133      	bne.n	6ea0 <gattc_complete_evt_handler+0xac>
    6e38:	3016      	adds	r0, #22
    6e3a:	e031      	b.n	6ea0 <gattc_complete_evt_handler+0xac>
    6e3c:	4a1a      	ldr	r2, [pc, #104]	; (6ea8 <gattc_complete_evt_handler+0xb4>)
    6e3e:	201d      	movs	r0, #29
    6e40:	6813      	ldr	r3, [r2, #0]
    6e42:	3b01      	subs	r3, #1
    6e44:	6013      	str	r3, [r2, #0]
    6e46:	e02b      	b.n	6ea0 <gattc_complete_evt_handler+0xac>
    6e48:	4a17      	ldr	r2, [pc, #92]	; (6ea8 <gattc_complete_evt_handler+0xb4>)
    6e4a:	201e      	movs	r0, #30
    6e4c:	6813      	ldr	r3, [r2, #0]
    6e4e:	3b01      	subs	r3, #1
    6e50:	6013      	str	r3, [r2, #0]
    6e52:	e025      	b.n	6ea0 <gattc_complete_evt_handler+0xac>
    6e54:	2019      	movs	r0, #25
    6e56:	e023      	b.n	6ea0 <gattc_complete_evt_handler+0xac>
    6e58:	203a      	movs	r0, #58	; 0x3a
    6e5a:	2a00      	cmp	r2, #0
    6e5c:	d020      	beq.n	6ea0 <gattc_complete_evt_handler+0xac>
    6e5e:	2382      	movs	r3, #130	; 0x82
    6e60:	009b      	lsls	r3, r3, #2
    6e62:	54e2      	strb	r2, [r4, r3]
    6e64:	22c8      	movs	r2, #200	; 0xc8
    6e66:	4c11      	ldr	r4, [pc, #68]	; (6eac <gattc_complete_evt_handler+0xb8>)
    6e68:	4911      	ldr	r1, [pc, #68]	; (6eb0 <gattc_complete_evt_handler+0xbc>)
    6e6a:	32ff      	adds	r2, #255	; 0xff
    6e6c:	4b11      	ldr	r3, [pc, #68]	; (6eb4 <gattc_complete_evt_handler+0xc0>)
    6e6e:	4812      	ldr	r0, [pc, #72]	; (6eb8 <gattc_complete_evt_handler+0xc4>)
    6e70:	6825      	ldr	r5, [r4, #0]
    6e72:	47a8      	blx	r5
    6e74:	6823      	ldr	r3, [r4, #0]
    6e76:	4811      	ldr	r0, [pc, #68]	; (6ebc <gattc_complete_evt_handler+0xc8>)
    6e78:	4798      	blx	r3
    6e7a:	2018      	movs	r0, #24
    6e7c:	e010      	b.n	6ea0 <gattc_complete_evt_handler+0xac>
    6e7e:	2021      	movs	r0, #33	; 0x21
    6e80:	e00e      	b.n	6ea0 <gattc_complete_evt_handler+0xac>
    6e82:	22d8      	movs	r2, #216	; 0xd8
    6e84:	4d09      	ldr	r5, [pc, #36]	; (6eac <gattc_complete_evt_handler+0xb8>)
    6e86:	490a      	ldr	r1, [pc, #40]	; (6eb0 <gattc_complete_evt_handler+0xbc>)
    6e88:	32ff      	adds	r2, #255	; 0xff
    6e8a:	4b0a      	ldr	r3, [pc, #40]	; (6eb4 <gattc_complete_evt_handler+0xc0>)
    6e8c:	480a      	ldr	r0, [pc, #40]	; (6eb8 <gattc_complete_evt_handler+0xc4>)
    6e8e:	682e      	ldr	r6, [r5, #0]
    6e90:	47b0      	blx	r6
    6e92:	78a1      	ldrb	r1, [r4, #2]
    6e94:	682b      	ldr	r3, [r5, #0]
    6e96:	480a      	ldr	r0, [pc, #40]	; (6ec0 <gattc_complete_evt_handler+0xcc>)
    6e98:	4798      	blx	r3
    6e9a:	2000      	movs	r0, #0
    6e9c:	e000      	b.n	6ea0 <gattc_complete_evt_handler+0xac>
    6e9e:	2017      	movs	r0, #23
    6ea0:	bd70      	pop	{r4, r5, r6, pc}
    6ea2:	46c0      	nop			; (mov r8, r8)
    6ea4:	20000de4 	.word	0x20000de4
    6ea8:	20000de8 	.word	0x20000de8
    6eac:	20000030 	.word	0x20000030
    6eb0:	00009acf 	.word	0x00009acf
    6eb4:	00009b2b 	.word	0x00009b2b
    6eb8:	000093e1 	.word	0x000093e1
    6ebc:	00009b0b 	.word	0x00009b0b
    6ec0:	000099d6 	.word	0x000099d6

00006ec4 <gattc_event_mtu_changed_ind_parser>:
    6ec4:	0a00      	lsrs	r0, r0, #8
    6ec6:	8010      	strh	r0, [r2, #0]
    6ec8:	784b      	ldrb	r3, [r1, #1]
    6eca:	7809      	ldrb	r1, [r1, #0]
    6ecc:	021b      	lsls	r3, r3, #8
    6ece:	430b      	orrs	r3, r1
    6ed0:	8053      	strh	r3, [r2, #2]
    6ed2:	4770      	bx	lr

00006ed4 <gattc_read_ind_parser>:
    6ed4:	0a00      	lsrs	r0, r0, #8
    6ed6:	b508      	push	{r3, lr}
    6ed8:	8010      	strh	r0, [r2, #0]
    6eda:	1c13      	adds	r3, r2, #0
    6edc:	2282      	movs	r2, #130	; 0x82
    6ede:	2000      	movs	r0, #0
    6ee0:	0092      	lsls	r2, r2, #2
    6ee2:	5498      	strb	r0, [r3, r2]
    6ee4:	784a      	ldrb	r2, [r1, #1]
    6ee6:	7808      	ldrb	r0, [r1, #0]
    6ee8:	0212      	lsls	r2, r2, #8
    6eea:	4302      	orrs	r2, r0
    6eec:	805a      	strh	r2, [r3, #2]
    6eee:	78ca      	ldrb	r2, [r1, #3]
    6ef0:	7888      	ldrb	r0, [r1, #2]
    6ef2:	0212      	lsls	r2, r2, #8
    6ef4:	4302      	orrs	r2, r0
    6ef6:	80da      	strh	r2, [r3, #6]
    6ef8:	794a      	ldrb	r2, [r1, #5]
    6efa:	7908      	ldrb	r0, [r1, #4]
    6efc:	0212      	lsls	r2, r2, #8
    6efe:	4302      	orrs	r2, r0
    6f00:	809a      	strh	r2, [r3, #4]
    6f02:	3308      	adds	r3, #8
    6f04:	1c18      	adds	r0, r3, #0
    6f06:	3106      	adds	r1, #6
    6f08:	4b01      	ldr	r3, [pc, #4]	; (6f10 <gattc_read_ind_parser+0x3c>)
    6f0a:	4798      	blx	r3
    6f0c:	bd08      	pop	{r3, pc}
    6f0e:	46c0      	nop			; (mov r8, r8)
    6f10:	000074b7 	.word	0x000074b7

00006f14 <gattc_svc_changed_cfg_ind_parser>:
    6f14:	0a00      	lsrs	r0, r0, #8
    6f16:	8010      	strh	r0, [r2, #0]
    6f18:	784b      	ldrb	r3, [r1, #1]
    6f1a:	7809      	ldrb	r1, [r1, #0]
    6f1c:	021b      	lsls	r3, r3, #8
    6f1e:	430b      	orrs	r3, r1
    6f20:	8053      	strh	r3, [r2, #2]
    6f22:	4770      	bx	lr

00006f24 <gattm_att_set_value_req_handler>:
    6f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f26:	2300      	movs	r3, #0
    6f28:	1c0d      	adds	r5, r1, #0
    6f2a:	491a      	ldr	r1, [pc, #104]	; (6f94 <gattm_att_set_value_req_handler+0x70>)
    6f2c:	4e1a      	ldr	r6, [pc, #104]	; (6f98 <gattm_att_set_value_req_handler+0x74>)
    6f2e:	680c      	ldr	r4, [r1, #0]
    6f30:	2105      	movs	r1, #5
    6f32:	60f3      	str	r3, [r6, #12]
    6f34:	60b3      	str	r3, [r6, #8]
    6f36:	7260      	strb	r0, [r4, #9]
    6f38:	0a00      	lsrs	r0, r0, #8
    6f3a:	270b      	movs	r7, #11
    6f3c:	72a0      	strb	r0, [r4, #10]
    6f3e:	1c20      	adds	r0, r4, #0
    6f40:	7021      	strb	r1, [r4, #0]
    6f42:	3107      	adds	r1, #7
    6f44:	7061      	strb	r1, [r4, #1]
    6f46:	7123      	strb	r3, [r4, #4]
    6f48:	3104      	adds	r1, #4
    6f4a:	71a3      	strb	r3, [r4, #6]
    6f4c:	71e3      	strb	r3, [r4, #7]
    6f4e:	7223      	strb	r3, [r4, #8]
    6f50:	0a2b      	lsrs	r3, r5, #8
    6f52:	7161      	strb	r1, [r4, #5]
    6f54:	72e5      	strb	r5, [r4, #11]
    6f56:	1c11      	adds	r1, r2, #0
    6f58:	7323      	strb	r3, [r4, #12]
    6f5a:	1c2a      	adds	r2, r5, #0
    6f5c:	4b0f      	ldr	r3, [pc, #60]	; (6f9c <gattm_att_set_value_req_handler+0x78>)
    6f5e:	70a7      	strb	r7, [r4, #2]
    6f60:	70e7      	strb	r7, [r4, #3]
    6f62:	300d      	adds	r0, #13
    6f64:	4798      	blx	r3
    6f66:	350d      	adds	r5, #13
    6f68:	4b0d      	ldr	r3, [pc, #52]	; (6fa0 <gattm_att_set_value_req_handler+0x7c>)
    6f6a:	b2a9      	uxth	r1, r5
    6f6c:	8033      	strh	r3, [r6, #0]
    6f6e:	1c0b      	adds	r3, r1, #0
    6f70:	3b09      	subs	r3, #9
    6f72:	71e3      	strb	r3, [r4, #7]
    6f74:	121b      	asrs	r3, r3, #8
    6f76:	7223      	strb	r3, [r4, #8]
    6f78:	1c20      	adds	r0, r4, #0
    6f7a:	4b0a      	ldr	r3, [pc, #40]	; (6fa4 <gattm_att_set_value_req_handler+0x80>)
    6f7c:	80b7      	strh	r7, [r6, #4]
    6f7e:	4798      	blx	r3
    6f80:	4b09      	ldr	r3, [pc, #36]	; (6fa8 <gattm_att_set_value_req_handler+0x84>)
    6f82:	4798      	blx	r3
    6f84:	23d0      	movs	r3, #208	; 0xd0
    6f86:	4298      	cmp	r0, r3
    6f88:	d001      	beq.n	6f8e <gattm_att_set_value_req_handler+0x6a>
    6f8a:	68b3      	ldr	r3, [r6, #8]
    6f8c:	789b      	ldrb	r3, [r3, #2]
    6f8e:	1c18      	adds	r0, r3, #0
    6f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f92:	46c0      	nop			; (mov r8, r8)
    6f94:	0000970c 	.word	0x0000970c
    6f98:	200018a8 	.word	0x200018a8
    6f9c:	000074b7 	.word	0x000074b7
    6fa0:	00000b0d 	.word	0x00000b0d
    6fa4:	00004e51 	.word	0x00004e51
    6fa8:	000050b5 	.word	0x000050b5

00006fac <gattm_att_get_value_req_handler>:
    6fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6fae:	2300      	movs	r3, #0
    6fb0:	1c06      	adds	r6, r0, #0
    6fb2:	9201      	str	r2, [sp, #4]
    6fb4:	4a1a      	ldr	r2, [pc, #104]	; (7020 <gattm_att_get_value_req_handler+0x74>)
    6fb6:	4c1b      	ldr	r4, [pc, #108]	; (7024 <gattm_att_get_value_req_handler+0x78>)
    6fb8:	6810      	ldr	r0, [r2, #0]
    6fba:	2205      	movs	r2, #5
    6fbc:	60a3      	str	r3, [r4, #8]
    6fbe:	60e3      	str	r3, [r4, #12]
    6fc0:	7103      	strb	r3, [r0, #4]
    6fc2:	7183      	strb	r3, [r0, #6]
    6fc4:	7203      	strb	r3, [r0, #8]
    6fc6:	0a33      	lsrs	r3, r6, #8
    6fc8:	7283      	strb	r3, [r0, #10]
    6fca:	4b17      	ldr	r3, [pc, #92]	; (7028 <gattm_att_get_value_req_handler+0x7c>)
    6fcc:	7002      	strb	r2, [r0, #0]
    6fce:	1892      	adds	r2, r2, r2
    6fd0:	7042      	strb	r2, [r0, #1]
    6fd2:	1c0f      	adds	r7, r1, #0
    6fd4:	8023      	strh	r3, [r4, #0]
    6fd6:	210b      	movs	r1, #11
    6fd8:	2302      	movs	r3, #2
    6fda:	3206      	adds	r2, #6
    6fdc:	7081      	strb	r1, [r0, #2]
    6fde:	70c1      	strb	r1, [r0, #3]
    6fe0:	7142      	strb	r2, [r0, #5]
    6fe2:	71c3      	strb	r3, [r0, #7]
    6fe4:	7246      	strb	r6, [r0, #9]
    6fe6:	4b11      	ldr	r3, [pc, #68]	; (702c <gattm_att_get_value_req_handler+0x80>)
    6fe8:	80a1      	strh	r1, [r4, #4]
    6fea:	4798      	blx	r3
    6fec:	4b10      	ldr	r3, [pc, #64]	; (7030 <gattm_att_get_value_req_handler+0x84>)
    6fee:	4798      	blx	r3
    6ff0:	25d0      	movs	r5, #208	; 0xd0
    6ff2:	42a8      	cmp	r0, r5
    6ff4:	d011      	beq.n	701a <gattm_att_get_value_req_handler+0x6e>
    6ff6:	68a1      	ldr	r1, [r4, #8]
    6ff8:	9801      	ldr	r0, [sp, #4]
    6ffa:	784c      	ldrb	r4, [r1, #1]
    6ffc:	780b      	ldrb	r3, [r1, #0]
    6ffe:	78ca      	ldrb	r2, [r1, #3]
    7000:	0224      	lsls	r4, r4, #8
    7002:	431c      	orrs	r4, r3
    7004:	788b      	ldrb	r3, [r1, #2]
    7006:	0212      	lsls	r2, r2, #8
    7008:	431a      	orrs	r2, r3
    700a:	803a      	strh	r2, [r7, #0]
    700c:	790d      	ldrb	r5, [r1, #4]
    700e:	4b09      	ldr	r3, [pc, #36]	; (7034 <gattm_att_get_value_req_handler+0x88>)
    7010:	3105      	adds	r1, #5
    7012:	4798      	blx	r3
    7014:	42a6      	cmp	r6, r4
    7016:	d000      	beq.n	701a <gattm_att_get_value_req_handler+0x6e>
    7018:	25e2      	movs	r5, #226	; 0xe2
    701a:	1c28      	adds	r0, r5, #0
    701c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    701e:	46c0      	nop			; (mov r8, r8)
    7020:	0000970c 	.word	0x0000970c
    7024:	200018a8 	.word	0x200018a8
    7028:	00000b0b 	.word	0x00000b0b
    702c:	00004e51 	.word	0x00004e51
    7030:	000050b5 	.word	0x000050b5
    7034:	000074b7 	.word	0x000074b7

00007038 <htpt_enable_rsp_handler>:
    7038:	780b      	ldrb	r3, [r1, #0]
    703a:	7013      	strb	r3, [r2, #0]
    703c:	784b      	ldrb	r3, [r1, #1]
    703e:	7053      	strb	r3, [r2, #1]
    7040:	4770      	bx	lr

00007042 <htpt_temp_send_rsp_handler>:
    7042:	780b      	ldrb	r3, [r1, #0]
    7044:	7013      	strb	r3, [r2, #0]
    7046:	4770      	bx	lr

00007048 <htpt_meas_intv_upd_rsp_handler>:
    7048:	780b      	ldrb	r3, [r1, #0]
    704a:	7013      	strb	r3, [r2, #0]
    704c:	4770      	bx	lr

0000704e <htpt_meas_intv_chg_req_ind_handler>:
    704e:	78cb      	ldrb	r3, [r1, #3]
    7050:	7889      	ldrb	r1, [r1, #2]
    7052:	021b      	lsls	r3, r3, #8
    7054:	430b      	orrs	r3, r1
    7056:	8013      	strh	r3, [r2, #0]
    7058:	4770      	bx	lr

0000705a <htpt_cfg_indntf_ind_handler>:
    705a:	780b      	ldrb	r3, [r1, #0]
    705c:	7013      	strb	r3, [r2, #0]
    705e:	784b      	ldrb	r3, [r1, #1]
    7060:	7053      	strb	r3, [r2, #1]
    7062:	4770      	bx	lr

00007064 <write_32_to_BTLC1000>:
    7064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7066:	2206      	movs	r2, #6
    7068:	ab01      	add	r3, sp, #4
    706a:	701a      	strb	r2, [r3, #0]
    706c:	0e02      	lsrs	r2, r0, #24
    706e:	705a      	strb	r2, [r3, #1]
    7070:	0c02      	lsrs	r2, r0, #16
    7072:	709a      	strb	r2, [r3, #2]
    7074:	0a02      	lsrs	r2, r0, #8
    7076:	70da      	strb	r2, [r3, #3]
    7078:	0e0a      	lsrs	r2, r1, #24
    707a:	715a      	strb	r2, [r3, #5]
    707c:	0c0a      	lsrs	r2, r1, #16
    707e:	719a      	strb	r2, [r3, #6]
    7080:	0a0a      	lsrs	r2, r1, #8
    7082:	7118      	strb	r0, [r3, #4]
    7084:	71da      	strb	r2, [r3, #7]
    7086:	7219      	strb	r1, [r3, #8]
    7088:	1c18      	adds	r0, r3, #0
    708a:	2109      	movs	r1, #9
    708c:	4b01      	ldr	r3, [pc, #4]	; (7094 <write_32_to_BTLC1000+0x30>)
    708e:	4798      	blx	r3
    7090:	b005      	add	sp, #20
    7092:	bd00      	pop	{pc}
    7094:	00004e51 	.word	0x00004e51

00007098 <patch_init>:
    7098:	b5f0      	push	{r4, r5, r6, r7, lr}
    709a:	b085      	sub	sp, #20
    709c:	4935      	ldr	r1, [pc, #212]	; (7174 <patch_init+0xdc>)
    709e:	2202      	movs	r2, #2
    70a0:	4b35      	ldr	r3, [pc, #212]	; (7178 <patch_init+0xe0>)
    70a2:	1c05      	adds	r5, r0, #0
    70a4:	a803      	add	r0, sp, #12
    70a6:	4798      	blx	r3
    70a8:	a803      	add	r0, sp, #12
    70aa:	2101      	movs	r1, #1
    70ac:	4e33      	ldr	r6, [pc, #204]	; (717c <patch_init+0xe4>)
    70ae:	47b0      	blx	r6
    70b0:	24fa      	movs	r4, #250	; 0xfa
    70b2:	1c07      	adds	r7, r0, #0
    70b4:	00e4      	lsls	r4, r4, #3
    70b6:	4b32      	ldr	r3, [pc, #200]	; (7180 <patch_init+0xe8>)
    70b8:	781a      	ldrb	r2, [r3, #0]
    70ba:	9300      	str	r3, [sp, #0]
    70bc:	2a00      	cmp	r2, #0
    70be:	d111      	bne.n	70e4 <patch_init+0x4c>
    70c0:	69ab      	ldr	r3, [r5, #24]
    70c2:	2001      	movs	r0, #1
    70c4:	4798      	blx	r3
    70c6:	1c2b      	adds	r3, r5, #0
    70c8:	332c      	adds	r3, #44	; 0x2c
    70ca:	781b      	ldrb	r3, [r3, #0]
    70cc:	2b02      	cmp	r3, #2
    70ce:	d106      	bne.n	70de <patch_init+0x46>
    70d0:	ab02      	add	r3, sp, #8
    70d2:	1cd8      	adds	r0, r3, #3
    70d4:	23fe      	movs	r3, #254	; 0xfe
    70d6:	2101      	movs	r1, #1
    70d8:	7003      	strb	r3, [r0, #0]
    70da:	6a2b      	ldr	r3, [r5, #32]
    70dc:	4798      	blx	r3
    70de:	3c01      	subs	r4, #1
    70e0:	2c00      	cmp	r4, #0
    70e2:	d1e8      	bne.n	70b6 <patch_init+0x1e>
    70e4:	9b00      	ldr	r3, [sp, #0]
    70e6:	781b      	ldrb	r3, [r3, #0]
    70e8:	2b00      	cmp	r3, #0
    70ea:	d03f      	beq.n	716c <patch_init+0xd4>
    70ec:	2302      	movs	r3, #2
    70ee:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    70f0:	33ff      	adds	r3, #255	; 0xff
    70f2:	4c24      	ldr	r4, [pc, #144]	; (7184 <patch_init+0xec>)
    70f4:	429a      	cmp	r2, r3
    70f6:	d110      	bne.n	711a <patch_init+0x82>
    70f8:	4823      	ldr	r0, [pc, #140]	; (7188 <patch_init+0xf0>)
    70fa:	4924      	ldr	r1, [pc, #144]	; (718c <patch_init+0xf4>)
    70fc:	47a0      	blx	r4
    70fe:	4824      	ldr	r0, [pc, #144]	; (7190 <patch_init+0xf8>)
    7100:	4924      	ldr	r1, [pc, #144]	; (7194 <patch_init+0xfc>)
    7102:	47a0      	blx	r4
    7104:	4824      	ldr	r0, [pc, #144]	; (7198 <patch_init+0x100>)
    7106:	4925      	ldr	r1, [pc, #148]	; (719c <patch_init+0x104>)
    7108:	47a0      	blx	r4
    710a:	4825      	ldr	r0, [pc, #148]	; (71a0 <patch_init+0x108>)
    710c:	2122      	movs	r1, #34	; 0x22
    710e:	47a0      	blx	r4
    7110:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7112:	4798      	blx	r3
    7114:	4823      	ldr	r0, [pc, #140]	; (71a4 <patch_init+0x10c>)
    7116:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7118:	4798      	blx	r3
    711a:	352c      	adds	r5, #44	; 0x2c
    711c:	2103      	movs	r1, #3
    711e:	4822      	ldr	r0, [pc, #136]	; (71a8 <patch_init+0x110>)
    7120:	9501      	str	r5, [sp, #4]
    7122:	47b0      	blx	r6
    7124:	4821      	ldr	r0, [pc, #132]	; (71ac <patch_init+0x114>)
    7126:	4922      	ldr	r1, [pc, #136]	; (71b0 <patch_init+0x118>)
    7128:	47a0      	blx	r4
    712a:	4d22      	ldr	r5, [pc, #136]	; (71b4 <patch_init+0x11c>)
    712c:	4e22      	ldr	r6, [pc, #136]	; (71b8 <patch_init+0x120>)
    712e:	3501      	adds	r5, #1
    7130:	4b22      	ldr	r3, [pc, #136]	; (71bc <patch_init+0x124>)
    7132:	4a20      	ldr	r2, [pc, #128]	; (71b4 <patch_init+0x11c>)
    7134:	7829      	ldrb	r1, [r5, #0]
    7136:	18f3      	adds	r3, r6, r3
    7138:	5cd3      	ldrb	r3, [r2, r3]
    713a:	0209      	lsls	r1, r1, #8
    713c:	4319      	orrs	r1, r3
    713e:	786b      	ldrb	r3, [r5, #1]
    7140:	1c30      	adds	r0, r6, #0
    7142:	041b      	lsls	r3, r3, #16
    7144:	4319      	orrs	r1, r3
    7146:	78ab      	ldrb	r3, [r5, #2]
    7148:	3604      	adds	r6, #4
    714a:	061b      	lsls	r3, r3, #24
    714c:	4319      	orrs	r1, r3
    714e:	47a0      	blx	r4
    7150:	4b1b      	ldr	r3, [pc, #108]	; (71c0 <patch_init+0x128>)
    7152:	3504      	adds	r5, #4
    7154:	429e      	cmp	r6, r3
    7156:	d1eb      	bne.n	7130 <patch_init+0x98>
    7158:	481a      	ldr	r0, [pc, #104]	; (71c4 <patch_init+0x12c>)
    715a:	2178      	movs	r1, #120	; 0x78
    715c:	47a0      	blx	r4
    715e:	4b1a      	ldr	r3, [pc, #104]	; (71c8 <patch_init+0x130>)
    7160:	9801      	ldr	r0, [sp, #4]
    7162:	4798      	blx	r3
    7164:	2302      	movs	r3, #2
    7166:	9a00      	ldr	r2, [sp, #0]
    7168:	7013      	strb	r3, [r2, #0]
    716a:	e000      	b.n	716e <patch_init+0xd6>
    716c:	27d1      	movs	r7, #209	; 0xd1
    716e:	1c38      	adds	r0, r7, #0
    7170:	b005      	add	sp, #20
    7172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7174:	00009b46 	.word	0x00009b46
    7178:	000074b7 	.word	0x000074b7
    717c:	00004e51 	.word	0x00004e51
    7180:	20000dec 	.word	0x20000dec
    7184:	00007065 	.word	0x00007065
    7188:	4000b1a8 	.word	0x4000b1a8
    718c:	02033f3f 	.word	0x02033f3f
    7190:	4000b1ac 	.word	0x4000b1ac
    7194:	3f3f0001 	.word	0x3f3f0001
    7198:	4000b048 	.word	0x4000b048
    719c:	00111133 	.word	0x00111133
    71a0:	4000b044 	.word	0x4000b044
    71a4:	00004b05 	.word	0x00004b05
    71a8:	00009710 	.word	0x00009710
    71ac:	4000f408 	.word	0x4000f408
    71b0:	00000c06 	.word	0x00000c06
    71b4:	00009b48 	.word	0x00009b48
    71b8:	10005184 	.word	0x10005184
    71bc:	efffae7c 	.word	0xefffae7c
    71c0:	10007d40 	.word	0x10007d40
    71c4:	4000f044 	.word	0x4000f044
    71c8:	0000566d 	.word	0x0000566d

000071cc <fifo_init>:
    71cc:	b510      	push	{r4, lr}
    71ce:	1e03      	subs	r3, r0, #0
    71d0:	d00b      	beq.n	71ea <fifo_init+0x1e>
    71d2:	2000      	movs	r0, #0
    71d4:	4282      	cmp	r2, r0
    71d6:	d008      	beq.n	71ea <fifo_init+0x1e>
    71d8:	1e54      	subs	r4, r2, #1
    71da:	4222      	tst	r2, r4
    71dc:	d105      	bne.n	71ea <fifo_init+0x1e>
    71de:	6018      	str	r0, [r3, #0]
    71e0:	6119      	str	r1, [r3, #16]
    71e2:	6058      	str	r0, [r3, #4]
    71e4:	609a      	str	r2, [r3, #8]
    71e6:	60dc      	str	r4, [r3, #12]
    71e8:	3001      	adds	r0, #1
    71ea:	bd10      	pop	{r4, pc}

000071ec <fifo_empty>:
    71ec:	6803      	ldr	r3, [r0, #0]
    71ee:	6840      	ldr	r0, [r0, #4]
    71f0:	1a18      	subs	r0, r3, r0
    71f2:	4243      	negs	r3, r0
    71f4:	4158      	adcs	r0, r3
    71f6:	b2c0      	uxtb	r0, r0
    71f8:	4770      	bx	lr

000071fa <fifo_full>:
    71fa:	6803      	ldr	r3, [r0, #0]
    71fc:	6842      	ldr	r2, [r0, #4]
    71fe:	6880      	ldr	r0, [r0, #8]
    7200:	1a9b      	subs	r3, r3, r2
    7202:	1a18      	subs	r0, r3, r0
    7204:	4243      	negs	r3, r0
    7206:	4158      	adcs	r0, r3
    7208:	b2c0      	uxtb	r0, r0
    720a:	4770      	bx	lr

0000720c <fifo_get>:
    720c:	b530      	push	{r4, r5, lr}
    720e:	6804      	ldr	r4, [r0, #0]
    7210:	6842      	ldr	r2, [r0, #4]
    7212:	1c03      	adds	r3, r0, #0
    7214:	2000      	movs	r0, #0
    7216:	4294      	cmp	r4, r2
    7218:	d008      	beq.n	722c <fifo_get+0x20>
    721a:	685a      	ldr	r2, [r3, #4]
    721c:	68dc      	ldr	r4, [r3, #12]
    721e:	6918      	ldr	r0, [r3, #16]
    7220:	1c55      	adds	r5, r2, #1
    7222:	605d      	str	r5, [r3, #4]
    7224:	4022      	ands	r2, r4
    7226:	5c83      	ldrb	r3, [r0, r2]
    7228:	2001      	movs	r0, #1
    722a:	700b      	strb	r3, [r1, #0]
    722c:	bd30      	pop	{r4, r5, pc}
	...

00007230 <fifo_put>:
    7230:	b538      	push	{r3, r4, r5, lr}
    7232:	4b08      	ldr	r3, [pc, #32]	; (7254 <fifo_put+0x24>)
    7234:	1c04      	adds	r4, r0, #0
    7236:	1c0d      	adds	r5, r1, #0
    7238:	4798      	blx	r3
    723a:	2300      	movs	r3, #0
    723c:	4298      	cmp	r0, r3
    723e:	d107      	bne.n	7250 <fifo_put+0x20>
    7240:	6823      	ldr	r3, [r4, #0]
    7242:	68e1      	ldr	r1, [r4, #12]
    7244:	6922      	ldr	r2, [r4, #16]
    7246:	1c58      	adds	r0, r3, #1
    7248:	400b      	ands	r3, r1
    724a:	6020      	str	r0, [r4, #0]
    724c:	54d5      	strb	r5, [r2, r3]
    724e:	2301      	movs	r3, #1
    7250:	1c18      	adds	r0, r3, #0
    7252:	bd38      	pop	{r3, r4, r5, pc}
    7254:	000071fb 	.word	0x000071fb

00007258 <__gnu_thumb1_case_sqi>:
    7258:	b402      	push	{r1}
    725a:	4671      	mov	r1, lr
    725c:	0849      	lsrs	r1, r1, #1
    725e:	0049      	lsls	r1, r1, #1
    7260:	5609      	ldrsb	r1, [r1, r0]
    7262:	0049      	lsls	r1, r1, #1
    7264:	448e      	add	lr, r1
    7266:	bc02      	pop	{r1}
    7268:	4770      	bx	lr
    726a:	46c0      	nop			; (mov r8, r8)

0000726c <__gnu_thumb1_case_uqi>:
    726c:	b402      	push	{r1}
    726e:	4671      	mov	r1, lr
    7270:	0849      	lsrs	r1, r1, #1
    7272:	0049      	lsls	r1, r1, #1
    7274:	5c09      	ldrb	r1, [r1, r0]
    7276:	0049      	lsls	r1, r1, #1
    7278:	448e      	add	lr, r1
    727a:	bc02      	pop	{r1}
    727c:	4770      	bx	lr
    727e:	46c0      	nop			; (mov r8, r8)

00007280 <__aeabi_uidiv>:
    7280:	2200      	movs	r2, #0
    7282:	0843      	lsrs	r3, r0, #1
    7284:	428b      	cmp	r3, r1
    7286:	d374      	bcc.n	7372 <__aeabi_uidiv+0xf2>
    7288:	0903      	lsrs	r3, r0, #4
    728a:	428b      	cmp	r3, r1
    728c:	d35f      	bcc.n	734e <__aeabi_uidiv+0xce>
    728e:	0a03      	lsrs	r3, r0, #8
    7290:	428b      	cmp	r3, r1
    7292:	d344      	bcc.n	731e <__aeabi_uidiv+0x9e>
    7294:	0b03      	lsrs	r3, r0, #12
    7296:	428b      	cmp	r3, r1
    7298:	d328      	bcc.n	72ec <__aeabi_uidiv+0x6c>
    729a:	0c03      	lsrs	r3, r0, #16
    729c:	428b      	cmp	r3, r1
    729e:	d30d      	bcc.n	72bc <__aeabi_uidiv+0x3c>
    72a0:	22ff      	movs	r2, #255	; 0xff
    72a2:	0209      	lsls	r1, r1, #8
    72a4:	ba12      	rev	r2, r2
    72a6:	0c03      	lsrs	r3, r0, #16
    72a8:	428b      	cmp	r3, r1
    72aa:	d302      	bcc.n	72b2 <__aeabi_uidiv+0x32>
    72ac:	1212      	asrs	r2, r2, #8
    72ae:	0209      	lsls	r1, r1, #8
    72b0:	d065      	beq.n	737e <__aeabi_uidiv+0xfe>
    72b2:	0b03      	lsrs	r3, r0, #12
    72b4:	428b      	cmp	r3, r1
    72b6:	d319      	bcc.n	72ec <__aeabi_uidiv+0x6c>
    72b8:	e000      	b.n	72bc <__aeabi_uidiv+0x3c>
    72ba:	0a09      	lsrs	r1, r1, #8
    72bc:	0bc3      	lsrs	r3, r0, #15
    72be:	428b      	cmp	r3, r1
    72c0:	d301      	bcc.n	72c6 <__aeabi_uidiv+0x46>
    72c2:	03cb      	lsls	r3, r1, #15
    72c4:	1ac0      	subs	r0, r0, r3
    72c6:	4152      	adcs	r2, r2
    72c8:	0b83      	lsrs	r3, r0, #14
    72ca:	428b      	cmp	r3, r1
    72cc:	d301      	bcc.n	72d2 <__aeabi_uidiv+0x52>
    72ce:	038b      	lsls	r3, r1, #14
    72d0:	1ac0      	subs	r0, r0, r3
    72d2:	4152      	adcs	r2, r2
    72d4:	0b43      	lsrs	r3, r0, #13
    72d6:	428b      	cmp	r3, r1
    72d8:	d301      	bcc.n	72de <__aeabi_uidiv+0x5e>
    72da:	034b      	lsls	r3, r1, #13
    72dc:	1ac0      	subs	r0, r0, r3
    72de:	4152      	adcs	r2, r2
    72e0:	0b03      	lsrs	r3, r0, #12
    72e2:	428b      	cmp	r3, r1
    72e4:	d301      	bcc.n	72ea <__aeabi_uidiv+0x6a>
    72e6:	030b      	lsls	r3, r1, #12
    72e8:	1ac0      	subs	r0, r0, r3
    72ea:	4152      	adcs	r2, r2
    72ec:	0ac3      	lsrs	r3, r0, #11
    72ee:	428b      	cmp	r3, r1
    72f0:	d301      	bcc.n	72f6 <__aeabi_uidiv+0x76>
    72f2:	02cb      	lsls	r3, r1, #11
    72f4:	1ac0      	subs	r0, r0, r3
    72f6:	4152      	adcs	r2, r2
    72f8:	0a83      	lsrs	r3, r0, #10
    72fa:	428b      	cmp	r3, r1
    72fc:	d301      	bcc.n	7302 <__aeabi_uidiv+0x82>
    72fe:	028b      	lsls	r3, r1, #10
    7300:	1ac0      	subs	r0, r0, r3
    7302:	4152      	adcs	r2, r2
    7304:	0a43      	lsrs	r3, r0, #9
    7306:	428b      	cmp	r3, r1
    7308:	d301      	bcc.n	730e <__aeabi_uidiv+0x8e>
    730a:	024b      	lsls	r3, r1, #9
    730c:	1ac0      	subs	r0, r0, r3
    730e:	4152      	adcs	r2, r2
    7310:	0a03      	lsrs	r3, r0, #8
    7312:	428b      	cmp	r3, r1
    7314:	d301      	bcc.n	731a <__aeabi_uidiv+0x9a>
    7316:	020b      	lsls	r3, r1, #8
    7318:	1ac0      	subs	r0, r0, r3
    731a:	4152      	adcs	r2, r2
    731c:	d2cd      	bcs.n	72ba <__aeabi_uidiv+0x3a>
    731e:	09c3      	lsrs	r3, r0, #7
    7320:	428b      	cmp	r3, r1
    7322:	d301      	bcc.n	7328 <__aeabi_uidiv+0xa8>
    7324:	01cb      	lsls	r3, r1, #7
    7326:	1ac0      	subs	r0, r0, r3
    7328:	4152      	adcs	r2, r2
    732a:	0983      	lsrs	r3, r0, #6
    732c:	428b      	cmp	r3, r1
    732e:	d301      	bcc.n	7334 <__aeabi_uidiv+0xb4>
    7330:	018b      	lsls	r3, r1, #6
    7332:	1ac0      	subs	r0, r0, r3
    7334:	4152      	adcs	r2, r2
    7336:	0943      	lsrs	r3, r0, #5
    7338:	428b      	cmp	r3, r1
    733a:	d301      	bcc.n	7340 <__aeabi_uidiv+0xc0>
    733c:	014b      	lsls	r3, r1, #5
    733e:	1ac0      	subs	r0, r0, r3
    7340:	4152      	adcs	r2, r2
    7342:	0903      	lsrs	r3, r0, #4
    7344:	428b      	cmp	r3, r1
    7346:	d301      	bcc.n	734c <__aeabi_uidiv+0xcc>
    7348:	010b      	lsls	r3, r1, #4
    734a:	1ac0      	subs	r0, r0, r3
    734c:	4152      	adcs	r2, r2
    734e:	08c3      	lsrs	r3, r0, #3
    7350:	428b      	cmp	r3, r1
    7352:	d301      	bcc.n	7358 <__aeabi_uidiv+0xd8>
    7354:	00cb      	lsls	r3, r1, #3
    7356:	1ac0      	subs	r0, r0, r3
    7358:	4152      	adcs	r2, r2
    735a:	0883      	lsrs	r3, r0, #2
    735c:	428b      	cmp	r3, r1
    735e:	d301      	bcc.n	7364 <__aeabi_uidiv+0xe4>
    7360:	008b      	lsls	r3, r1, #2
    7362:	1ac0      	subs	r0, r0, r3
    7364:	4152      	adcs	r2, r2
    7366:	0843      	lsrs	r3, r0, #1
    7368:	428b      	cmp	r3, r1
    736a:	d301      	bcc.n	7370 <__aeabi_uidiv+0xf0>
    736c:	004b      	lsls	r3, r1, #1
    736e:	1ac0      	subs	r0, r0, r3
    7370:	4152      	adcs	r2, r2
    7372:	1a41      	subs	r1, r0, r1
    7374:	d200      	bcs.n	7378 <__aeabi_uidiv+0xf8>
    7376:	4601      	mov	r1, r0
    7378:	4152      	adcs	r2, r2
    737a:	4610      	mov	r0, r2
    737c:	4770      	bx	lr
    737e:	e7ff      	b.n	7380 <__aeabi_uidiv+0x100>
    7380:	b501      	push	{r0, lr}
    7382:	2000      	movs	r0, #0
    7384:	f000 f80c 	bl	73a0 <__aeabi_idiv0>
    7388:	bd02      	pop	{r1, pc}
    738a:	46c0      	nop			; (mov r8, r8)

0000738c <__aeabi_uidivmod>:
    738c:	2900      	cmp	r1, #0
    738e:	d0f7      	beq.n	7380 <__aeabi_uidiv+0x100>
    7390:	b503      	push	{r0, r1, lr}
    7392:	f7ff ff75 	bl	7280 <__aeabi_uidiv>
    7396:	bc0e      	pop	{r1, r2, r3}
    7398:	4342      	muls	r2, r0
    739a:	1a89      	subs	r1, r1, r2
    739c:	4718      	bx	r3
    739e:	46c0      	nop			; (mov r8, r8)

000073a0 <__aeabi_idiv0>:
    73a0:	4770      	bx	lr
    73a2:	46c0      	nop			; (mov r8, r8)

000073a4 <__aeabi_lmul>:
    73a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    73a6:	464f      	mov	r7, r9
    73a8:	4646      	mov	r6, r8
    73aa:	0405      	lsls	r5, r0, #16
    73ac:	0c2d      	lsrs	r5, r5, #16
    73ae:	1c2c      	adds	r4, r5, #0
    73b0:	b4c0      	push	{r6, r7}
    73b2:	0417      	lsls	r7, r2, #16
    73b4:	0c16      	lsrs	r6, r2, #16
    73b6:	0c3f      	lsrs	r7, r7, #16
    73b8:	4699      	mov	r9, r3
    73ba:	0c03      	lsrs	r3, r0, #16
    73bc:	437c      	muls	r4, r7
    73be:	4375      	muls	r5, r6
    73c0:	435f      	muls	r7, r3
    73c2:	4373      	muls	r3, r6
    73c4:	197d      	adds	r5, r7, r5
    73c6:	0c26      	lsrs	r6, r4, #16
    73c8:	19ad      	adds	r5, r5, r6
    73ca:	469c      	mov	ip, r3
    73cc:	42af      	cmp	r7, r5
    73ce:	d903      	bls.n	73d8 <__aeabi_lmul+0x34>
    73d0:	2380      	movs	r3, #128	; 0x80
    73d2:	025b      	lsls	r3, r3, #9
    73d4:	4698      	mov	r8, r3
    73d6:	44c4      	add	ip, r8
    73d8:	464b      	mov	r3, r9
    73da:	4351      	muls	r1, r2
    73dc:	4343      	muls	r3, r0
    73de:	0424      	lsls	r4, r4, #16
    73e0:	0c2e      	lsrs	r6, r5, #16
    73e2:	0c24      	lsrs	r4, r4, #16
    73e4:	042d      	lsls	r5, r5, #16
    73e6:	4466      	add	r6, ip
    73e8:	192c      	adds	r4, r5, r4
    73ea:	1859      	adds	r1, r3, r1
    73ec:	1989      	adds	r1, r1, r6
    73ee:	1c20      	adds	r0, r4, #0
    73f0:	bc0c      	pop	{r2, r3}
    73f2:	4690      	mov	r8, r2
    73f4:	4699      	mov	r9, r3
    73f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000073f8 <__ffssi2>:
    73f8:	b508      	push	{r3, lr}
    73fa:	2300      	movs	r3, #0
    73fc:	2800      	cmp	r0, #0
    73fe:	d002      	beq.n	7406 <__ffssi2+0xe>
    7400:	f000 f804 	bl	740c <__ctzsi2>
    7404:	1c43      	adds	r3, r0, #1
    7406:	1c18      	adds	r0, r3, #0
    7408:	bd08      	pop	{r3, pc}
    740a:	46c0      	nop			; (mov r8, r8)

0000740c <__ctzsi2>:
    740c:	4241      	negs	r1, r0
    740e:	4008      	ands	r0, r1
    7410:	211c      	movs	r1, #28
    7412:	2301      	movs	r3, #1
    7414:	041b      	lsls	r3, r3, #16
    7416:	4298      	cmp	r0, r3
    7418:	d301      	bcc.n	741e <__ctzsi2+0x12>
    741a:	0c00      	lsrs	r0, r0, #16
    741c:	3910      	subs	r1, #16
    741e:	0a1b      	lsrs	r3, r3, #8
    7420:	4298      	cmp	r0, r3
    7422:	d301      	bcc.n	7428 <__ctzsi2+0x1c>
    7424:	0a00      	lsrs	r0, r0, #8
    7426:	3908      	subs	r1, #8
    7428:	091b      	lsrs	r3, r3, #4
    742a:	4298      	cmp	r0, r3
    742c:	d301      	bcc.n	7432 <__ctzsi2+0x26>
    742e:	0900      	lsrs	r0, r0, #4
    7430:	3904      	subs	r1, #4
    7432:	a202      	add	r2, pc, #8	; (adr r2, 743c <__ctzsi2+0x30>)
    7434:	5c10      	ldrb	r0, [r2, r0]
    7436:	1a40      	subs	r0, r0, r1
    7438:	4770      	bx	lr
    743a:	46c0      	nop			; (mov r8, r8)
    743c:	1d1d1c1b 	.word	0x1d1d1c1b
    7440:	1e1e1e1e 	.word	0x1e1e1e1e
    7444:	1f1f1f1f 	.word	0x1f1f1f1f
    7448:	1f1f1f1f 	.word	0x1f1f1f1f

0000744c <__libc_init_array>:
    744c:	4b0e      	ldr	r3, [pc, #56]	; (7488 <__libc_init_array+0x3c>)
    744e:	b570      	push	{r4, r5, r6, lr}
    7450:	2500      	movs	r5, #0
    7452:	1c1e      	adds	r6, r3, #0
    7454:	4c0d      	ldr	r4, [pc, #52]	; (748c <__libc_init_array+0x40>)
    7456:	1ae4      	subs	r4, r4, r3
    7458:	10a4      	asrs	r4, r4, #2
    745a:	42a5      	cmp	r5, r4
    745c:	d004      	beq.n	7468 <__libc_init_array+0x1c>
    745e:	00ab      	lsls	r3, r5, #2
    7460:	58f3      	ldr	r3, [r6, r3]
    7462:	4798      	blx	r3
    7464:	3501      	adds	r5, #1
    7466:	e7f8      	b.n	745a <__libc_init_array+0xe>
    7468:	f005 f99a 	bl	c7a0 <_init>
    746c:	4b08      	ldr	r3, [pc, #32]	; (7490 <__libc_init_array+0x44>)
    746e:	2500      	movs	r5, #0
    7470:	1c1e      	adds	r6, r3, #0
    7472:	4c08      	ldr	r4, [pc, #32]	; (7494 <__libc_init_array+0x48>)
    7474:	1ae4      	subs	r4, r4, r3
    7476:	10a4      	asrs	r4, r4, #2
    7478:	42a5      	cmp	r5, r4
    747a:	d004      	beq.n	7486 <__libc_init_array+0x3a>
    747c:	00ab      	lsls	r3, r5, #2
    747e:	58f3      	ldr	r3, [r6, r3]
    7480:	4798      	blx	r3
    7482:	3501      	adds	r5, #1
    7484:	e7f8      	b.n	7478 <__libc_init_array+0x2c>
    7486:	bd70      	pop	{r4, r5, r6, pc}
    7488:	0000c7ac 	.word	0x0000c7ac
    748c:	0000c7ac 	.word	0x0000c7ac
    7490:	0000c7ac 	.word	0x0000c7ac
    7494:	0000c7b0 	.word	0x0000c7b0

00007498 <memcmp>:
    7498:	b530      	push	{r4, r5, lr}
    749a:	2400      	movs	r4, #0
    749c:	4294      	cmp	r4, r2
    749e:	d008      	beq.n	74b2 <memcmp+0x1a>
    74a0:	5d03      	ldrb	r3, [r0, r4]
    74a2:	1c65      	adds	r5, r4, #1
    74a4:	5d0c      	ldrb	r4, [r1, r4]
    74a6:	42a3      	cmp	r3, r4
    74a8:	d001      	beq.n	74ae <memcmp+0x16>
    74aa:	1b18      	subs	r0, r3, r4
    74ac:	e002      	b.n	74b4 <memcmp+0x1c>
    74ae:	1c2c      	adds	r4, r5, #0
    74b0:	e7f4      	b.n	749c <memcmp+0x4>
    74b2:	2000      	movs	r0, #0
    74b4:	bd30      	pop	{r4, r5, pc}

000074b6 <memcpy>:
    74b6:	2300      	movs	r3, #0
    74b8:	b510      	push	{r4, lr}
    74ba:	4293      	cmp	r3, r2
    74bc:	d003      	beq.n	74c6 <memcpy+0x10>
    74be:	5ccc      	ldrb	r4, [r1, r3]
    74c0:	54c4      	strb	r4, [r0, r3]
    74c2:	3301      	adds	r3, #1
    74c4:	e7f9      	b.n	74ba <memcpy+0x4>
    74c6:	bd10      	pop	{r4, pc}

000074c8 <memset>:
    74c8:	1c03      	adds	r3, r0, #0
    74ca:	1882      	adds	r2, r0, r2
    74cc:	4293      	cmp	r3, r2
    74ce:	d002      	beq.n	74d6 <memset+0xe>
    74d0:	7019      	strb	r1, [r3, #0]
    74d2:	3301      	adds	r3, #1
    74d4:	e7fa      	b.n	74cc <memset+0x4>
    74d6:	4770      	bx	lr

000074d8 <iprintf>:
    74d8:	b40f      	push	{r0, r1, r2, r3}
    74da:	4b0b      	ldr	r3, [pc, #44]	; (7508 <iprintf+0x30>)
    74dc:	b513      	push	{r0, r1, r4, lr}
    74de:	681c      	ldr	r4, [r3, #0]
    74e0:	2c00      	cmp	r4, #0
    74e2:	d005      	beq.n	74f0 <iprintf+0x18>
    74e4:	69a3      	ldr	r3, [r4, #24]
    74e6:	2b00      	cmp	r3, #0
    74e8:	d102      	bne.n	74f0 <iprintf+0x18>
    74ea:	1c20      	adds	r0, r4, #0
    74ec:	f000 fb1e 	bl	7b2c <__sinit>
    74f0:	ab05      	add	r3, sp, #20
    74f2:	1c20      	adds	r0, r4, #0
    74f4:	68a1      	ldr	r1, [r4, #8]
    74f6:	9a04      	ldr	r2, [sp, #16]
    74f8:	9301      	str	r3, [sp, #4]
    74fa:	f000 fcd1 	bl	7ea0 <_vfiprintf_r>
    74fe:	bc16      	pop	{r1, r2, r4}
    7500:	bc08      	pop	{r3}
    7502:	b004      	add	sp, #16
    7504:	4718      	bx	r3
    7506:	46c0      	nop			; (mov r8, r8)
    7508:	20000094 	.word	0x20000094

0000750c <putchar>:
    750c:	b538      	push	{r3, r4, r5, lr}
    750e:	4b08      	ldr	r3, [pc, #32]	; (7530 <putchar+0x24>)
    7510:	1c05      	adds	r5, r0, #0
    7512:	681c      	ldr	r4, [r3, #0]
    7514:	2c00      	cmp	r4, #0
    7516:	d005      	beq.n	7524 <putchar+0x18>
    7518:	69a3      	ldr	r3, [r4, #24]
    751a:	2b00      	cmp	r3, #0
    751c:	d102      	bne.n	7524 <putchar+0x18>
    751e:	1c20      	adds	r0, r4, #0
    7520:	f000 fb04 	bl	7b2c <__sinit>
    7524:	1c29      	adds	r1, r5, #0
    7526:	1c20      	adds	r0, r4, #0
    7528:	68a2      	ldr	r2, [r4, #8]
    752a:	f000 ff4f 	bl	83cc <_putc_r>
    752e:	bd38      	pop	{r3, r4, r5, pc}
    7530:	20000094 	.word	0x20000094

00007534 <_puts_r>:
    7534:	b570      	push	{r4, r5, r6, lr}
    7536:	1c05      	adds	r5, r0, #0
    7538:	1c0e      	adds	r6, r1, #0
    753a:	2800      	cmp	r0, #0
    753c:	d004      	beq.n	7548 <_puts_r+0x14>
    753e:	6983      	ldr	r3, [r0, #24]
    7540:	2b00      	cmp	r3, #0
    7542:	d101      	bne.n	7548 <_puts_r+0x14>
    7544:	f000 faf2 	bl	7b2c <__sinit>
    7548:	68ac      	ldr	r4, [r5, #8]
    754a:	89a3      	ldrh	r3, [r4, #12]
    754c:	071b      	lsls	r3, r3, #28
    754e:	d502      	bpl.n	7556 <_puts_r+0x22>
    7550:	6923      	ldr	r3, [r4, #16]
    7552:	2b00      	cmp	r3, #0
    7554:	d119      	bne.n	758a <_puts_r+0x56>
    7556:	1c28      	adds	r0, r5, #0
    7558:	1c21      	adds	r1, r4, #0
    755a:	f000 f97b 	bl	7854 <__swsetup_r>
    755e:	2800      	cmp	r0, #0
    7560:	d013      	beq.n	758a <_puts_r+0x56>
    7562:	2001      	movs	r0, #1
    7564:	4240      	negs	r0, r0
    7566:	e045      	b.n	75f4 <_puts_r+0xc0>
    7568:	7831      	ldrb	r1, [r6, #0]
    756a:	2b00      	cmp	r3, #0
    756c:	da1b      	bge.n	75a6 <_puts_r+0x72>
    756e:	69a2      	ldr	r2, [r4, #24]
    7570:	4293      	cmp	r3, r2
    7572:	da11      	bge.n	7598 <_puts_r+0x64>
    7574:	1c22      	adds	r2, r4, #0
    7576:	1c28      	adds	r0, r5, #0
    7578:	f000 f914 	bl	77a4 <__swbuf_r>
    757c:	3001      	adds	r0, #1
    757e:	4242      	negs	r2, r0
    7580:	4142      	adcs	r2, r0
    7582:	b2d0      	uxtb	r0, r2
    7584:	2800      	cmp	r0, #0
    7586:	d1ec      	bne.n	7562 <_puts_r+0x2e>
    7588:	3601      	adds	r6, #1
    758a:	68a3      	ldr	r3, [r4, #8]
    758c:	7832      	ldrb	r2, [r6, #0]
    758e:	3b01      	subs	r3, #1
    7590:	60a3      	str	r3, [r4, #8]
    7592:	2a00      	cmp	r2, #0
    7594:	d1e8      	bne.n	7568 <_puts_r+0x34>
    7596:	e00c      	b.n	75b2 <_puts_r+0x7e>
    7598:	6823      	ldr	r3, [r4, #0]
    759a:	7019      	strb	r1, [r3, #0]
    759c:	6823      	ldr	r3, [r4, #0]
    759e:	7819      	ldrb	r1, [r3, #0]
    75a0:	290a      	cmp	r1, #10
    75a2:	d103      	bne.n	75ac <_puts_r+0x78>
    75a4:	e7e6      	b.n	7574 <_puts_r+0x40>
    75a6:	6823      	ldr	r3, [r4, #0]
    75a8:	7019      	strb	r1, [r3, #0]
    75aa:	6823      	ldr	r3, [r4, #0]
    75ac:	3301      	adds	r3, #1
    75ae:	6023      	str	r3, [r4, #0]
    75b0:	e7ea      	b.n	7588 <_puts_r+0x54>
    75b2:	2b00      	cmp	r3, #0
    75b4:	da17      	bge.n	75e6 <_puts_r+0xb2>
    75b6:	69a2      	ldr	r2, [r4, #24]
    75b8:	4293      	cmp	r3, r2
    75ba:	db08      	blt.n	75ce <_puts_r+0x9a>
    75bc:	230a      	movs	r3, #10
    75be:	6822      	ldr	r2, [r4, #0]
    75c0:	7013      	strb	r3, [r2, #0]
    75c2:	6823      	ldr	r3, [r4, #0]
    75c4:	7819      	ldrb	r1, [r3, #0]
    75c6:	290a      	cmp	r1, #10
    75c8:	d111      	bne.n	75ee <_puts_r+0xba>
    75ca:	1c28      	adds	r0, r5, #0
    75cc:	e001      	b.n	75d2 <_puts_r+0x9e>
    75ce:	1c28      	adds	r0, r5, #0
    75d0:	210a      	movs	r1, #10
    75d2:	1c22      	adds	r2, r4, #0
    75d4:	f000 f8e6 	bl	77a4 <__swbuf_r>
    75d8:	3001      	adds	r0, #1
    75da:	4242      	negs	r2, r0
    75dc:	4142      	adcs	r2, r0
    75de:	b2d0      	uxtb	r0, r2
    75e0:	2800      	cmp	r0, #0
    75e2:	d006      	beq.n	75f2 <_puts_r+0xbe>
    75e4:	e7bd      	b.n	7562 <_puts_r+0x2e>
    75e6:	230a      	movs	r3, #10
    75e8:	6822      	ldr	r2, [r4, #0]
    75ea:	7013      	strb	r3, [r2, #0]
    75ec:	6823      	ldr	r3, [r4, #0]
    75ee:	3301      	adds	r3, #1
    75f0:	6023      	str	r3, [r4, #0]
    75f2:	200a      	movs	r0, #10
    75f4:	bd70      	pop	{r4, r5, r6, pc}
	...

000075f8 <puts>:
    75f8:	b508      	push	{r3, lr}
    75fa:	4b03      	ldr	r3, [pc, #12]	; (7608 <puts+0x10>)
    75fc:	1c01      	adds	r1, r0, #0
    75fe:	6818      	ldr	r0, [r3, #0]
    7600:	f7ff ff98 	bl	7534 <_puts_r>
    7604:	bd08      	pop	{r3, pc}
    7606:	46c0      	nop			; (mov r8, r8)
    7608:	20000094 	.word	0x20000094

0000760c <rand>:
    760c:	4b15      	ldr	r3, [pc, #84]	; (7664 <rand+0x58>)
    760e:	b510      	push	{r4, lr}
    7610:	681c      	ldr	r4, [r3, #0]
    7612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7614:	2b00      	cmp	r3, #0
    7616:	d115      	bne.n	7644 <rand+0x38>
    7618:	2018      	movs	r0, #24
    761a:	f000 fb71 	bl	7d00 <malloc>
    761e:	4b12      	ldr	r3, [pc, #72]	; (7668 <rand+0x5c>)
    7620:	63a0      	str	r0, [r4, #56]	; 0x38
    7622:	8003      	strh	r3, [r0, #0]
    7624:	4b11      	ldr	r3, [pc, #68]	; (766c <rand+0x60>)
    7626:	2201      	movs	r2, #1
    7628:	8043      	strh	r3, [r0, #2]
    762a:	4b11      	ldr	r3, [pc, #68]	; (7670 <rand+0x64>)
    762c:	8083      	strh	r3, [r0, #4]
    762e:	4b11      	ldr	r3, [pc, #68]	; (7674 <rand+0x68>)
    7630:	80c3      	strh	r3, [r0, #6]
    7632:	4b11      	ldr	r3, [pc, #68]	; (7678 <rand+0x6c>)
    7634:	8103      	strh	r3, [r0, #8]
    7636:	2305      	movs	r3, #5
    7638:	8143      	strh	r3, [r0, #10]
    763a:	3306      	adds	r3, #6
    763c:	8183      	strh	r3, [r0, #12]
    763e:	2300      	movs	r3, #0
    7640:	6102      	str	r2, [r0, #16]
    7642:	6143      	str	r3, [r0, #20]
    7644:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    7646:	4a0d      	ldr	r2, [pc, #52]	; (767c <rand+0x70>)
    7648:	6920      	ldr	r0, [r4, #16]
    764a:	6961      	ldr	r1, [r4, #20]
    764c:	4b0c      	ldr	r3, [pc, #48]	; (7680 <rand+0x74>)
    764e:	f7ff fea9 	bl	73a4 <__aeabi_lmul>
    7652:	2201      	movs	r2, #1
    7654:	2300      	movs	r3, #0
    7656:	1880      	adds	r0, r0, r2
    7658:	4159      	adcs	r1, r3
    765a:	6120      	str	r0, [r4, #16]
    765c:	6161      	str	r1, [r4, #20]
    765e:	0048      	lsls	r0, r1, #1
    7660:	0840      	lsrs	r0, r0, #1
    7662:	bd10      	pop	{r4, pc}
    7664:	20000094 	.word	0x20000094
    7668:	0000330e 	.word	0x0000330e
    766c:	ffffabcd 	.word	0xffffabcd
    7670:	00001234 	.word	0x00001234
    7674:	ffffe66d 	.word	0xffffe66d
    7678:	ffffdeec 	.word	0xffffdeec
    767c:	4c957f2d 	.word	0x4c957f2d
    7680:	5851f42d 	.word	0x5851f42d

00007684 <setbuf>:
    7684:	b508      	push	{r3, lr}
    7686:	424a      	negs	r2, r1
    7688:	414a      	adcs	r2, r1
    768a:	2380      	movs	r3, #128	; 0x80
    768c:	0052      	lsls	r2, r2, #1
    768e:	00db      	lsls	r3, r3, #3
    7690:	f000 f802 	bl	7698 <setvbuf>
    7694:	bd08      	pop	{r3, pc}
	...

00007698 <setvbuf>:
    7698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    769a:	1c1e      	adds	r6, r3, #0
    769c:	4b3c      	ldr	r3, [pc, #240]	; (7790 <setvbuf+0xf8>)
    769e:	1c04      	adds	r4, r0, #0
    76a0:	681d      	ldr	r5, [r3, #0]
    76a2:	1c0f      	adds	r7, r1, #0
    76a4:	9201      	str	r2, [sp, #4]
    76a6:	2d00      	cmp	r5, #0
    76a8:	d005      	beq.n	76b6 <setvbuf+0x1e>
    76aa:	69ab      	ldr	r3, [r5, #24]
    76ac:	2b00      	cmp	r3, #0
    76ae:	d102      	bne.n	76b6 <setvbuf+0x1e>
    76b0:	1c28      	adds	r0, r5, #0
    76b2:	f000 fa3b 	bl	7b2c <__sinit>
    76b6:	4b37      	ldr	r3, [pc, #220]	; (7794 <setvbuf+0xfc>)
    76b8:	429c      	cmp	r4, r3
    76ba:	d101      	bne.n	76c0 <setvbuf+0x28>
    76bc:	686c      	ldr	r4, [r5, #4]
    76be:	e008      	b.n	76d2 <setvbuf+0x3a>
    76c0:	4b35      	ldr	r3, [pc, #212]	; (7798 <setvbuf+0x100>)
    76c2:	429c      	cmp	r4, r3
    76c4:	d101      	bne.n	76ca <setvbuf+0x32>
    76c6:	68ac      	ldr	r4, [r5, #8]
    76c8:	e003      	b.n	76d2 <setvbuf+0x3a>
    76ca:	4b34      	ldr	r3, [pc, #208]	; (779c <setvbuf+0x104>)
    76cc:	429c      	cmp	r4, r3
    76ce:	d100      	bne.n	76d2 <setvbuf+0x3a>
    76d0:	68ec      	ldr	r4, [r5, #12]
    76d2:	9b01      	ldr	r3, [sp, #4]
    76d4:	2b02      	cmp	r3, #2
    76d6:	d858      	bhi.n	778a <setvbuf+0xf2>
    76d8:	2e00      	cmp	r6, #0
    76da:	db56      	blt.n	778a <setvbuf+0xf2>
    76dc:	1c28      	adds	r0, r5, #0
    76de:	1c21      	adds	r1, r4, #0
    76e0:	f000 f9b6 	bl	7a50 <_fflush_r>
    76e4:	2300      	movs	r3, #0
    76e6:	6063      	str	r3, [r4, #4]
    76e8:	61a3      	str	r3, [r4, #24]
    76ea:	89a3      	ldrh	r3, [r4, #12]
    76ec:	061b      	lsls	r3, r3, #24
    76ee:	d503      	bpl.n	76f8 <setvbuf+0x60>
    76f0:	1c28      	adds	r0, r5, #0
    76f2:	6921      	ldr	r1, [r4, #16]
    76f4:	f000 fb0e 	bl	7d14 <_free_r>
    76f8:	2283      	movs	r2, #131	; 0x83
    76fa:	89a3      	ldrh	r3, [r4, #12]
    76fc:	4393      	bics	r3, r2
    76fe:	81a3      	strh	r3, [r4, #12]
    7700:	9b01      	ldr	r3, [sp, #4]
    7702:	2b02      	cmp	r3, #2
    7704:	d013      	beq.n	772e <setvbuf+0x96>
    7706:	2f00      	cmp	r7, #0
    7708:	d125      	bne.n	7756 <setvbuf+0xbe>
    770a:	2e00      	cmp	r6, #0
    770c:	d101      	bne.n	7712 <setvbuf+0x7a>
    770e:	2680      	movs	r6, #128	; 0x80
    7710:	00f6      	lsls	r6, r6, #3
    7712:	1c30      	adds	r0, r6, #0
    7714:	f000 faf4 	bl	7d00 <malloc>
    7718:	1e07      	subs	r7, r0, #0
    771a:	d118      	bne.n	774e <setvbuf+0xb6>
    771c:	2080      	movs	r0, #128	; 0x80
    771e:	00c0      	lsls	r0, r0, #3
    7720:	f000 faee 	bl	7d00 <malloc>
    7724:	1e07      	subs	r7, r0, #0
    7726:	d110      	bne.n	774a <setvbuf+0xb2>
    7728:	2001      	movs	r0, #1
    772a:	4240      	negs	r0, r0
    772c:	e000      	b.n	7730 <setvbuf+0x98>
    772e:	2000      	movs	r0, #0
    7730:	2202      	movs	r2, #2
    7732:	89a3      	ldrh	r3, [r4, #12]
    7734:	4313      	orrs	r3, r2
    7736:	81a3      	strh	r3, [r4, #12]
    7738:	2300      	movs	r3, #0
    773a:	60a3      	str	r3, [r4, #8]
    773c:	1c23      	adds	r3, r4, #0
    773e:	3347      	adds	r3, #71	; 0x47
    7740:	6023      	str	r3, [r4, #0]
    7742:	6123      	str	r3, [r4, #16]
    7744:	2301      	movs	r3, #1
    7746:	6163      	str	r3, [r4, #20]
    7748:	e021      	b.n	778e <setvbuf+0xf6>
    774a:	2680      	movs	r6, #128	; 0x80
    774c:	00f6      	lsls	r6, r6, #3
    774e:	2280      	movs	r2, #128	; 0x80
    7750:	89a3      	ldrh	r3, [r4, #12]
    7752:	4313      	orrs	r3, r2
    7754:	81a3      	strh	r3, [r4, #12]
    7756:	9b01      	ldr	r3, [sp, #4]
    7758:	2b01      	cmp	r3, #1
    775a:	d105      	bne.n	7768 <setvbuf+0xd0>
    775c:	89a3      	ldrh	r3, [r4, #12]
    775e:	9a01      	ldr	r2, [sp, #4]
    7760:	431a      	orrs	r2, r3
    7762:	4273      	negs	r3, r6
    7764:	81a2      	strh	r2, [r4, #12]
    7766:	61a3      	str	r3, [r4, #24]
    7768:	4b0d      	ldr	r3, [pc, #52]	; (77a0 <setvbuf+0x108>)
    776a:	2000      	movs	r0, #0
    776c:	62ab      	str	r3, [r5, #40]	; 0x28
    776e:	89a2      	ldrh	r2, [r4, #12]
    7770:	6027      	str	r7, [r4, #0]
    7772:	6127      	str	r7, [r4, #16]
    7774:	6166      	str	r6, [r4, #20]
    7776:	0713      	lsls	r3, r2, #28
    7778:	d509      	bpl.n	778e <setvbuf+0xf6>
    777a:	2303      	movs	r3, #3
    777c:	401a      	ands	r2, r3
    777e:	4253      	negs	r3, r2
    7780:	4153      	adcs	r3, r2
    7782:	425b      	negs	r3, r3
    7784:	401e      	ands	r6, r3
    7786:	60a6      	str	r6, [r4, #8]
    7788:	e001      	b.n	778e <setvbuf+0xf6>
    778a:	2001      	movs	r0, #1
    778c:	4240      	negs	r0, r0
    778e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7790:	20000094 	.word	0x20000094
    7794:	0000c70c 	.word	0x0000c70c
    7798:	0000c72c 	.word	0x0000c72c
    779c:	0000c74c 	.word	0x0000c74c
    77a0:	00007aa9 	.word	0x00007aa9

000077a4 <__swbuf_r>:
    77a4:	b570      	push	{r4, r5, r6, lr}
    77a6:	1c05      	adds	r5, r0, #0
    77a8:	1c0e      	adds	r6, r1, #0
    77aa:	1c14      	adds	r4, r2, #0
    77ac:	2800      	cmp	r0, #0
    77ae:	d004      	beq.n	77ba <__swbuf_r+0x16>
    77b0:	6983      	ldr	r3, [r0, #24]
    77b2:	2b00      	cmp	r3, #0
    77b4:	d101      	bne.n	77ba <__swbuf_r+0x16>
    77b6:	f000 f9b9 	bl	7b2c <__sinit>
    77ba:	4b23      	ldr	r3, [pc, #140]	; (7848 <__swbuf_r+0xa4>)
    77bc:	429c      	cmp	r4, r3
    77be:	d101      	bne.n	77c4 <__swbuf_r+0x20>
    77c0:	686c      	ldr	r4, [r5, #4]
    77c2:	e008      	b.n	77d6 <__swbuf_r+0x32>
    77c4:	4b21      	ldr	r3, [pc, #132]	; (784c <__swbuf_r+0xa8>)
    77c6:	429c      	cmp	r4, r3
    77c8:	d101      	bne.n	77ce <__swbuf_r+0x2a>
    77ca:	68ac      	ldr	r4, [r5, #8]
    77cc:	e003      	b.n	77d6 <__swbuf_r+0x32>
    77ce:	4b20      	ldr	r3, [pc, #128]	; (7850 <__swbuf_r+0xac>)
    77d0:	429c      	cmp	r4, r3
    77d2:	d100      	bne.n	77d6 <__swbuf_r+0x32>
    77d4:	68ec      	ldr	r4, [r5, #12]
    77d6:	69a3      	ldr	r3, [r4, #24]
    77d8:	60a3      	str	r3, [r4, #8]
    77da:	89a3      	ldrh	r3, [r4, #12]
    77dc:	071b      	lsls	r3, r3, #28
    77de:	d50a      	bpl.n	77f6 <__swbuf_r+0x52>
    77e0:	6923      	ldr	r3, [r4, #16]
    77e2:	2b00      	cmp	r3, #0
    77e4:	d007      	beq.n	77f6 <__swbuf_r+0x52>
    77e6:	6823      	ldr	r3, [r4, #0]
    77e8:	6922      	ldr	r2, [r4, #16]
    77ea:	b2f6      	uxtb	r6, r6
    77ec:	1a98      	subs	r0, r3, r2
    77ee:	6963      	ldr	r3, [r4, #20]
    77f0:	4298      	cmp	r0, r3
    77f2:	db0f      	blt.n	7814 <__swbuf_r+0x70>
    77f4:	e008      	b.n	7808 <__swbuf_r+0x64>
    77f6:	1c28      	adds	r0, r5, #0
    77f8:	1c21      	adds	r1, r4, #0
    77fa:	f000 f82b 	bl	7854 <__swsetup_r>
    77fe:	2800      	cmp	r0, #0
    7800:	d0f1      	beq.n	77e6 <__swbuf_r+0x42>
    7802:	2001      	movs	r0, #1
    7804:	4240      	negs	r0, r0
    7806:	e01d      	b.n	7844 <__swbuf_r+0xa0>
    7808:	1c28      	adds	r0, r5, #0
    780a:	1c21      	adds	r1, r4, #0
    780c:	f000 f920 	bl	7a50 <_fflush_r>
    7810:	2800      	cmp	r0, #0
    7812:	d1f6      	bne.n	7802 <__swbuf_r+0x5e>
    7814:	68a3      	ldr	r3, [r4, #8]
    7816:	3001      	adds	r0, #1
    7818:	3b01      	subs	r3, #1
    781a:	60a3      	str	r3, [r4, #8]
    781c:	6823      	ldr	r3, [r4, #0]
    781e:	1c5a      	adds	r2, r3, #1
    7820:	6022      	str	r2, [r4, #0]
    7822:	701e      	strb	r6, [r3, #0]
    7824:	6963      	ldr	r3, [r4, #20]
    7826:	4298      	cmp	r0, r3
    7828:	d005      	beq.n	7836 <__swbuf_r+0x92>
    782a:	89a3      	ldrh	r3, [r4, #12]
    782c:	1c30      	adds	r0, r6, #0
    782e:	07db      	lsls	r3, r3, #31
    7830:	d508      	bpl.n	7844 <__swbuf_r+0xa0>
    7832:	2e0a      	cmp	r6, #10
    7834:	d106      	bne.n	7844 <__swbuf_r+0xa0>
    7836:	1c28      	adds	r0, r5, #0
    7838:	1c21      	adds	r1, r4, #0
    783a:	f000 f909 	bl	7a50 <_fflush_r>
    783e:	2800      	cmp	r0, #0
    7840:	d1df      	bne.n	7802 <__swbuf_r+0x5e>
    7842:	1c30      	adds	r0, r6, #0
    7844:	bd70      	pop	{r4, r5, r6, pc}
    7846:	46c0      	nop			; (mov r8, r8)
    7848:	0000c70c 	.word	0x0000c70c
    784c:	0000c72c 	.word	0x0000c72c
    7850:	0000c74c 	.word	0x0000c74c

00007854 <__swsetup_r>:
    7854:	4b35      	ldr	r3, [pc, #212]	; (792c <__swsetup_r+0xd8>)
    7856:	b570      	push	{r4, r5, r6, lr}
    7858:	681d      	ldr	r5, [r3, #0]
    785a:	1c06      	adds	r6, r0, #0
    785c:	1c0c      	adds	r4, r1, #0
    785e:	2d00      	cmp	r5, #0
    7860:	d005      	beq.n	786e <__swsetup_r+0x1a>
    7862:	69ab      	ldr	r3, [r5, #24]
    7864:	2b00      	cmp	r3, #0
    7866:	d102      	bne.n	786e <__swsetup_r+0x1a>
    7868:	1c28      	adds	r0, r5, #0
    786a:	f000 f95f 	bl	7b2c <__sinit>
    786e:	4b30      	ldr	r3, [pc, #192]	; (7930 <__swsetup_r+0xdc>)
    7870:	429c      	cmp	r4, r3
    7872:	d101      	bne.n	7878 <__swsetup_r+0x24>
    7874:	686c      	ldr	r4, [r5, #4]
    7876:	e008      	b.n	788a <__swsetup_r+0x36>
    7878:	4b2e      	ldr	r3, [pc, #184]	; (7934 <__swsetup_r+0xe0>)
    787a:	429c      	cmp	r4, r3
    787c:	d101      	bne.n	7882 <__swsetup_r+0x2e>
    787e:	68ac      	ldr	r4, [r5, #8]
    7880:	e003      	b.n	788a <__swsetup_r+0x36>
    7882:	4b2d      	ldr	r3, [pc, #180]	; (7938 <__swsetup_r+0xe4>)
    7884:	429c      	cmp	r4, r3
    7886:	d100      	bne.n	788a <__swsetup_r+0x36>
    7888:	68ec      	ldr	r4, [r5, #12]
    788a:	89a3      	ldrh	r3, [r4, #12]
    788c:	b29a      	uxth	r2, r3
    788e:	0711      	lsls	r1, r2, #28
    7890:	d423      	bmi.n	78da <__swsetup_r+0x86>
    7892:	06d1      	lsls	r1, r2, #27
    7894:	d407      	bmi.n	78a6 <__swsetup_r+0x52>
    7896:	2209      	movs	r2, #9
    7898:	2001      	movs	r0, #1
    789a:	6032      	str	r2, [r6, #0]
    789c:	3237      	adds	r2, #55	; 0x37
    789e:	4313      	orrs	r3, r2
    78a0:	81a3      	strh	r3, [r4, #12]
    78a2:	4240      	negs	r0, r0
    78a4:	e040      	b.n	7928 <__swsetup_r+0xd4>
    78a6:	0753      	lsls	r3, r2, #29
    78a8:	d513      	bpl.n	78d2 <__swsetup_r+0x7e>
    78aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    78ac:	2900      	cmp	r1, #0
    78ae:	d008      	beq.n	78c2 <__swsetup_r+0x6e>
    78b0:	1c23      	adds	r3, r4, #0
    78b2:	3344      	adds	r3, #68	; 0x44
    78b4:	4299      	cmp	r1, r3
    78b6:	d002      	beq.n	78be <__swsetup_r+0x6a>
    78b8:	1c30      	adds	r0, r6, #0
    78ba:	f000 fa2b 	bl	7d14 <_free_r>
    78be:	2300      	movs	r3, #0
    78c0:	6363      	str	r3, [r4, #52]	; 0x34
    78c2:	2224      	movs	r2, #36	; 0x24
    78c4:	89a3      	ldrh	r3, [r4, #12]
    78c6:	4393      	bics	r3, r2
    78c8:	81a3      	strh	r3, [r4, #12]
    78ca:	2300      	movs	r3, #0
    78cc:	6063      	str	r3, [r4, #4]
    78ce:	6923      	ldr	r3, [r4, #16]
    78d0:	6023      	str	r3, [r4, #0]
    78d2:	2208      	movs	r2, #8
    78d4:	89a3      	ldrh	r3, [r4, #12]
    78d6:	4313      	orrs	r3, r2
    78d8:	81a3      	strh	r3, [r4, #12]
    78da:	6923      	ldr	r3, [r4, #16]
    78dc:	2b00      	cmp	r3, #0
    78de:	d10b      	bne.n	78f8 <__swsetup_r+0xa4>
    78e0:	23a0      	movs	r3, #160	; 0xa0
    78e2:	89a2      	ldrh	r2, [r4, #12]
    78e4:	009b      	lsls	r3, r3, #2
    78e6:	4013      	ands	r3, r2
    78e8:	2280      	movs	r2, #128	; 0x80
    78ea:	0092      	lsls	r2, r2, #2
    78ec:	4293      	cmp	r3, r2
    78ee:	d003      	beq.n	78f8 <__swsetup_r+0xa4>
    78f0:	1c30      	adds	r0, r6, #0
    78f2:	1c21      	adds	r1, r4, #0
    78f4:	f000 f9ac 	bl	7c50 <__smakebuf_r>
    78f8:	2301      	movs	r3, #1
    78fa:	89a2      	ldrh	r2, [r4, #12]
    78fc:	4013      	ands	r3, r2
    78fe:	d005      	beq.n	790c <__swsetup_r+0xb8>
    7900:	2300      	movs	r3, #0
    7902:	60a3      	str	r3, [r4, #8]
    7904:	6963      	ldr	r3, [r4, #20]
    7906:	425b      	negs	r3, r3
    7908:	61a3      	str	r3, [r4, #24]
    790a:	e003      	b.n	7914 <__swsetup_r+0xc0>
    790c:	0791      	lsls	r1, r2, #30
    790e:	d400      	bmi.n	7912 <__swsetup_r+0xbe>
    7910:	6963      	ldr	r3, [r4, #20]
    7912:	60a3      	str	r3, [r4, #8]
    7914:	2000      	movs	r0, #0
    7916:	6923      	ldr	r3, [r4, #16]
    7918:	4283      	cmp	r3, r0
    791a:	d105      	bne.n	7928 <__swsetup_r+0xd4>
    791c:	0613      	lsls	r3, r2, #24
    791e:	d503      	bpl.n	7928 <__swsetup_r+0xd4>
    7920:	2340      	movs	r3, #64	; 0x40
    7922:	431a      	orrs	r2, r3
    7924:	81a2      	strh	r2, [r4, #12]
    7926:	3801      	subs	r0, #1
    7928:	bd70      	pop	{r4, r5, r6, pc}
    792a:	46c0      	nop			; (mov r8, r8)
    792c:	20000094 	.word	0x20000094
    7930:	0000c70c 	.word	0x0000c70c
    7934:	0000c72c 	.word	0x0000c72c
    7938:	0000c74c 	.word	0x0000c74c

0000793c <__sflush_r>:
    793c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    793e:	898a      	ldrh	r2, [r1, #12]
    7940:	1c05      	adds	r5, r0, #0
    7942:	1c0c      	adds	r4, r1, #0
    7944:	0713      	lsls	r3, r2, #28
    7946:	d45e      	bmi.n	7a06 <__sflush_r+0xca>
    7948:	684b      	ldr	r3, [r1, #4]
    794a:	2b00      	cmp	r3, #0
    794c:	dc02      	bgt.n	7954 <__sflush_r+0x18>
    794e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7950:	2b00      	cmp	r3, #0
    7952:	dd1a      	ble.n	798a <__sflush_r+0x4e>
    7954:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7956:	2f00      	cmp	r7, #0
    7958:	d017      	beq.n	798a <__sflush_r+0x4e>
    795a:	2300      	movs	r3, #0
    795c:	682e      	ldr	r6, [r5, #0]
    795e:	602b      	str	r3, [r5, #0]
    7960:	2380      	movs	r3, #128	; 0x80
    7962:	015b      	lsls	r3, r3, #5
    7964:	401a      	ands	r2, r3
    7966:	d001      	beq.n	796c <__sflush_r+0x30>
    7968:	6d62      	ldr	r2, [r4, #84]	; 0x54
    796a:	e015      	b.n	7998 <__sflush_r+0x5c>
    796c:	1c28      	adds	r0, r5, #0
    796e:	6a21      	ldr	r1, [r4, #32]
    7970:	2301      	movs	r3, #1
    7972:	47b8      	blx	r7
    7974:	1c02      	adds	r2, r0, #0
    7976:	1c43      	adds	r3, r0, #1
    7978:	d10e      	bne.n	7998 <__sflush_r+0x5c>
    797a:	682b      	ldr	r3, [r5, #0]
    797c:	2b00      	cmp	r3, #0
    797e:	d00b      	beq.n	7998 <__sflush_r+0x5c>
    7980:	2b1d      	cmp	r3, #29
    7982:	d001      	beq.n	7988 <__sflush_r+0x4c>
    7984:	2b16      	cmp	r3, #22
    7986:	d102      	bne.n	798e <__sflush_r+0x52>
    7988:	602e      	str	r6, [r5, #0]
    798a:	2000      	movs	r0, #0
    798c:	e05e      	b.n	7a4c <__sflush_r+0x110>
    798e:	2140      	movs	r1, #64	; 0x40
    7990:	89a3      	ldrh	r3, [r4, #12]
    7992:	430b      	orrs	r3, r1
    7994:	81a3      	strh	r3, [r4, #12]
    7996:	e059      	b.n	7a4c <__sflush_r+0x110>
    7998:	89a3      	ldrh	r3, [r4, #12]
    799a:	075b      	lsls	r3, r3, #29
    799c:	d506      	bpl.n	79ac <__sflush_r+0x70>
    799e:	6863      	ldr	r3, [r4, #4]
    79a0:	1ad2      	subs	r2, r2, r3
    79a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    79a4:	2b00      	cmp	r3, #0
    79a6:	d001      	beq.n	79ac <__sflush_r+0x70>
    79a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    79aa:	1ad2      	subs	r2, r2, r3
    79ac:	2300      	movs	r3, #0
    79ae:	1c28      	adds	r0, r5, #0
    79b0:	6a21      	ldr	r1, [r4, #32]
    79b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    79b4:	47b8      	blx	r7
    79b6:	89a3      	ldrh	r3, [r4, #12]
    79b8:	1c42      	adds	r2, r0, #1
    79ba:	d106      	bne.n	79ca <__sflush_r+0x8e>
    79bc:	682a      	ldr	r2, [r5, #0]
    79be:	2a00      	cmp	r2, #0
    79c0:	d003      	beq.n	79ca <__sflush_r+0x8e>
    79c2:	2a1d      	cmp	r2, #29
    79c4:	d001      	beq.n	79ca <__sflush_r+0x8e>
    79c6:	2a16      	cmp	r2, #22
    79c8:	d119      	bne.n	79fe <__sflush_r+0xc2>
    79ca:	2200      	movs	r2, #0
    79cc:	6062      	str	r2, [r4, #4]
    79ce:	6922      	ldr	r2, [r4, #16]
    79d0:	6022      	str	r2, [r4, #0]
    79d2:	04db      	lsls	r3, r3, #19
    79d4:	d505      	bpl.n	79e2 <__sflush_r+0xa6>
    79d6:	1c43      	adds	r3, r0, #1
    79d8:	d102      	bne.n	79e0 <__sflush_r+0xa4>
    79da:	682b      	ldr	r3, [r5, #0]
    79dc:	2b00      	cmp	r3, #0
    79de:	d100      	bne.n	79e2 <__sflush_r+0xa6>
    79e0:	6560      	str	r0, [r4, #84]	; 0x54
    79e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    79e4:	602e      	str	r6, [r5, #0]
    79e6:	2900      	cmp	r1, #0
    79e8:	d0cf      	beq.n	798a <__sflush_r+0x4e>
    79ea:	1c23      	adds	r3, r4, #0
    79ec:	3344      	adds	r3, #68	; 0x44
    79ee:	4299      	cmp	r1, r3
    79f0:	d002      	beq.n	79f8 <__sflush_r+0xbc>
    79f2:	1c28      	adds	r0, r5, #0
    79f4:	f000 f98e 	bl	7d14 <_free_r>
    79f8:	2000      	movs	r0, #0
    79fa:	6360      	str	r0, [r4, #52]	; 0x34
    79fc:	e026      	b.n	7a4c <__sflush_r+0x110>
    79fe:	2240      	movs	r2, #64	; 0x40
    7a00:	4313      	orrs	r3, r2
    7a02:	81a3      	strh	r3, [r4, #12]
    7a04:	e022      	b.n	7a4c <__sflush_r+0x110>
    7a06:	690f      	ldr	r7, [r1, #16]
    7a08:	2f00      	cmp	r7, #0
    7a0a:	d0be      	beq.n	798a <__sflush_r+0x4e>
    7a0c:	680b      	ldr	r3, [r1, #0]
    7a0e:	600f      	str	r7, [r1, #0]
    7a10:	1bdb      	subs	r3, r3, r7
    7a12:	9301      	str	r3, [sp, #4]
    7a14:	2300      	movs	r3, #0
    7a16:	0792      	lsls	r2, r2, #30
    7a18:	d100      	bne.n	7a1c <__sflush_r+0xe0>
    7a1a:	694b      	ldr	r3, [r1, #20]
    7a1c:	60a3      	str	r3, [r4, #8]
    7a1e:	9b01      	ldr	r3, [sp, #4]
    7a20:	2b00      	cmp	r3, #0
    7a22:	ddb2      	ble.n	798a <__sflush_r+0x4e>
    7a24:	1c28      	adds	r0, r5, #0
    7a26:	6a21      	ldr	r1, [r4, #32]
    7a28:	1c3a      	adds	r2, r7, #0
    7a2a:	9b01      	ldr	r3, [sp, #4]
    7a2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7a2e:	47b0      	blx	r6
    7a30:	2800      	cmp	r0, #0
    7a32:	dc06      	bgt.n	7a42 <__sflush_r+0x106>
    7a34:	2240      	movs	r2, #64	; 0x40
    7a36:	2001      	movs	r0, #1
    7a38:	89a3      	ldrh	r3, [r4, #12]
    7a3a:	4240      	negs	r0, r0
    7a3c:	4313      	orrs	r3, r2
    7a3e:	81a3      	strh	r3, [r4, #12]
    7a40:	e004      	b.n	7a4c <__sflush_r+0x110>
    7a42:	9b01      	ldr	r3, [sp, #4]
    7a44:	183f      	adds	r7, r7, r0
    7a46:	1a1b      	subs	r3, r3, r0
    7a48:	9301      	str	r3, [sp, #4]
    7a4a:	e7e8      	b.n	7a1e <__sflush_r+0xe2>
    7a4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007a50 <_fflush_r>:
    7a50:	b538      	push	{r3, r4, r5, lr}
    7a52:	690b      	ldr	r3, [r1, #16]
    7a54:	1c05      	adds	r5, r0, #0
    7a56:	1c0c      	adds	r4, r1, #0
    7a58:	2b00      	cmp	r3, #0
    7a5a:	d101      	bne.n	7a60 <_fflush_r+0x10>
    7a5c:	2000      	movs	r0, #0
    7a5e:	e01c      	b.n	7a9a <_fflush_r+0x4a>
    7a60:	2800      	cmp	r0, #0
    7a62:	d004      	beq.n	7a6e <_fflush_r+0x1e>
    7a64:	6983      	ldr	r3, [r0, #24]
    7a66:	2b00      	cmp	r3, #0
    7a68:	d101      	bne.n	7a6e <_fflush_r+0x1e>
    7a6a:	f000 f85f 	bl	7b2c <__sinit>
    7a6e:	4b0b      	ldr	r3, [pc, #44]	; (7a9c <_fflush_r+0x4c>)
    7a70:	429c      	cmp	r4, r3
    7a72:	d101      	bne.n	7a78 <_fflush_r+0x28>
    7a74:	686c      	ldr	r4, [r5, #4]
    7a76:	e008      	b.n	7a8a <_fflush_r+0x3a>
    7a78:	4b09      	ldr	r3, [pc, #36]	; (7aa0 <_fflush_r+0x50>)
    7a7a:	429c      	cmp	r4, r3
    7a7c:	d101      	bne.n	7a82 <_fflush_r+0x32>
    7a7e:	68ac      	ldr	r4, [r5, #8]
    7a80:	e003      	b.n	7a8a <_fflush_r+0x3a>
    7a82:	4b08      	ldr	r3, [pc, #32]	; (7aa4 <_fflush_r+0x54>)
    7a84:	429c      	cmp	r4, r3
    7a86:	d100      	bne.n	7a8a <_fflush_r+0x3a>
    7a88:	68ec      	ldr	r4, [r5, #12]
    7a8a:	220c      	movs	r2, #12
    7a8c:	5ea3      	ldrsh	r3, [r4, r2]
    7a8e:	2b00      	cmp	r3, #0
    7a90:	d0e4      	beq.n	7a5c <_fflush_r+0xc>
    7a92:	1c28      	adds	r0, r5, #0
    7a94:	1c21      	adds	r1, r4, #0
    7a96:	f7ff ff51 	bl	793c <__sflush_r>
    7a9a:	bd38      	pop	{r3, r4, r5, pc}
    7a9c:	0000c70c 	.word	0x0000c70c
    7aa0:	0000c72c 	.word	0x0000c72c
    7aa4:	0000c74c 	.word	0x0000c74c

00007aa8 <_cleanup_r>:
    7aa8:	b508      	push	{r3, lr}
    7aaa:	4902      	ldr	r1, [pc, #8]	; (7ab4 <_cleanup_r+0xc>)
    7aac:	f000 f8ae 	bl	7c0c <_fwalk_reent>
    7ab0:	bd08      	pop	{r3, pc}
    7ab2:	46c0      	nop			; (mov r8, r8)
    7ab4:	00007a51 	.word	0x00007a51

00007ab8 <std.isra.0>:
    7ab8:	2300      	movs	r3, #0
    7aba:	b510      	push	{r4, lr}
    7abc:	1c04      	adds	r4, r0, #0
    7abe:	6003      	str	r3, [r0, #0]
    7ac0:	6043      	str	r3, [r0, #4]
    7ac2:	6083      	str	r3, [r0, #8]
    7ac4:	8181      	strh	r1, [r0, #12]
    7ac6:	6643      	str	r3, [r0, #100]	; 0x64
    7ac8:	81c2      	strh	r2, [r0, #14]
    7aca:	6103      	str	r3, [r0, #16]
    7acc:	6143      	str	r3, [r0, #20]
    7ace:	6183      	str	r3, [r0, #24]
    7ad0:	1c19      	adds	r1, r3, #0
    7ad2:	2208      	movs	r2, #8
    7ad4:	305c      	adds	r0, #92	; 0x5c
    7ad6:	f7ff fcf7 	bl	74c8 <memset>
    7ada:	4b05      	ldr	r3, [pc, #20]	; (7af0 <std.isra.0+0x38>)
    7adc:	6224      	str	r4, [r4, #32]
    7ade:	6263      	str	r3, [r4, #36]	; 0x24
    7ae0:	4b04      	ldr	r3, [pc, #16]	; (7af4 <std.isra.0+0x3c>)
    7ae2:	62a3      	str	r3, [r4, #40]	; 0x28
    7ae4:	4b04      	ldr	r3, [pc, #16]	; (7af8 <std.isra.0+0x40>)
    7ae6:	62e3      	str	r3, [r4, #44]	; 0x2c
    7ae8:	4b04      	ldr	r3, [pc, #16]	; (7afc <std.isra.0+0x44>)
    7aea:	6323      	str	r3, [r4, #48]	; 0x30
    7aec:	bd10      	pop	{r4, pc}
    7aee:	46c0      	nop			; (mov r8, r8)
    7af0:	00008469 	.word	0x00008469
    7af4:	00008491 	.word	0x00008491
    7af8:	000084c9 	.word	0x000084c9
    7afc:	000084f5 	.word	0x000084f5

00007b00 <__sfmoreglue>:
    7b00:	b570      	push	{r4, r5, r6, lr}
    7b02:	2568      	movs	r5, #104	; 0x68
    7b04:	1e4b      	subs	r3, r1, #1
    7b06:	435d      	muls	r5, r3
    7b08:	1c0e      	adds	r6, r1, #0
    7b0a:	1c29      	adds	r1, r5, #0
    7b0c:	3174      	adds	r1, #116	; 0x74
    7b0e:	f000 f947 	bl	7da0 <_malloc_r>
    7b12:	1e04      	subs	r4, r0, #0
    7b14:	d008      	beq.n	7b28 <__sfmoreglue+0x28>
    7b16:	2100      	movs	r1, #0
    7b18:	1c2a      	adds	r2, r5, #0
    7b1a:	6001      	str	r1, [r0, #0]
    7b1c:	6046      	str	r6, [r0, #4]
    7b1e:	300c      	adds	r0, #12
    7b20:	60a0      	str	r0, [r4, #8]
    7b22:	3268      	adds	r2, #104	; 0x68
    7b24:	f7ff fcd0 	bl	74c8 <memset>
    7b28:	1c20      	adds	r0, r4, #0
    7b2a:	bd70      	pop	{r4, r5, r6, pc}

00007b2c <__sinit>:
    7b2c:	6983      	ldr	r3, [r0, #24]
    7b2e:	b513      	push	{r0, r1, r4, lr}
    7b30:	2b00      	cmp	r3, #0
    7b32:	d128      	bne.n	7b86 <__sinit+0x5a>
    7b34:	6483      	str	r3, [r0, #72]	; 0x48
    7b36:	64c3      	str	r3, [r0, #76]	; 0x4c
    7b38:	6503      	str	r3, [r0, #80]	; 0x50
    7b3a:	4b13      	ldr	r3, [pc, #76]	; (7b88 <__sinit+0x5c>)
    7b3c:	4a13      	ldr	r2, [pc, #76]	; (7b8c <__sinit+0x60>)
    7b3e:	681b      	ldr	r3, [r3, #0]
    7b40:	6282      	str	r2, [r0, #40]	; 0x28
    7b42:	9301      	str	r3, [sp, #4]
    7b44:	4298      	cmp	r0, r3
    7b46:	d101      	bne.n	7b4c <__sinit+0x20>
    7b48:	2301      	movs	r3, #1
    7b4a:	6183      	str	r3, [r0, #24]
    7b4c:	1c04      	adds	r4, r0, #0
    7b4e:	f000 f81f 	bl	7b90 <__sfp>
    7b52:	6060      	str	r0, [r4, #4]
    7b54:	1c20      	adds	r0, r4, #0
    7b56:	f000 f81b 	bl	7b90 <__sfp>
    7b5a:	60a0      	str	r0, [r4, #8]
    7b5c:	1c20      	adds	r0, r4, #0
    7b5e:	f000 f817 	bl	7b90 <__sfp>
    7b62:	2104      	movs	r1, #4
    7b64:	60e0      	str	r0, [r4, #12]
    7b66:	2200      	movs	r2, #0
    7b68:	6860      	ldr	r0, [r4, #4]
    7b6a:	f7ff ffa5 	bl	7ab8 <std.isra.0>
    7b6e:	68a0      	ldr	r0, [r4, #8]
    7b70:	2109      	movs	r1, #9
    7b72:	2201      	movs	r2, #1
    7b74:	f7ff ffa0 	bl	7ab8 <std.isra.0>
    7b78:	68e0      	ldr	r0, [r4, #12]
    7b7a:	2112      	movs	r1, #18
    7b7c:	2202      	movs	r2, #2
    7b7e:	f7ff ff9b 	bl	7ab8 <std.isra.0>
    7b82:	2301      	movs	r3, #1
    7b84:	61a3      	str	r3, [r4, #24]
    7b86:	bd13      	pop	{r0, r1, r4, pc}
    7b88:	0000c708 	.word	0x0000c708
    7b8c:	00007aa9 	.word	0x00007aa9

00007b90 <__sfp>:
    7b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b92:	4b1d      	ldr	r3, [pc, #116]	; (7c08 <__sfp+0x78>)
    7b94:	1c06      	adds	r6, r0, #0
    7b96:	681d      	ldr	r5, [r3, #0]
    7b98:	69ab      	ldr	r3, [r5, #24]
    7b9a:	2b00      	cmp	r3, #0
    7b9c:	d102      	bne.n	7ba4 <__sfp+0x14>
    7b9e:	1c28      	adds	r0, r5, #0
    7ba0:	f7ff ffc4 	bl	7b2c <__sinit>
    7ba4:	3548      	adds	r5, #72	; 0x48
    7ba6:	68ac      	ldr	r4, [r5, #8]
    7ba8:	686b      	ldr	r3, [r5, #4]
    7baa:	3b01      	subs	r3, #1
    7bac:	d405      	bmi.n	7bba <__sfp+0x2a>
    7bae:	220c      	movs	r2, #12
    7bb0:	5ea7      	ldrsh	r7, [r4, r2]
    7bb2:	2f00      	cmp	r7, #0
    7bb4:	d010      	beq.n	7bd8 <__sfp+0x48>
    7bb6:	3468      	adds	r4, #104	; 0x68
    7bb8:	e7f7      	b.n	7baa <__sfp+0x1a>
    7bba:	682b      	ldr	r3, [r5, #0]
    7bbc:	2b00      	cmp	r3, #0
    7bbe:	d106      	bne.n	7bce <__sfp+0x3e>
    7bc0:	1c30      	adds	r0, r6, #0
    7bc2:	2104      	movs	r1, #4
    7bc4:	f7ff ff9c 	bl	7b00 <__sfmoreglue>
    7bc8:	6028      	str	r0, [r5, #0]
    7bca:	2800      	cmp	r0, #0
    7bcc:	d001      	beq.n	7bd2 <__sfp+0x42>
    7bce:	682d      	ldr	r5, [r5, #0]
    7bd0:	e7e9      	b.n	7ba6 <__sfp+0x16>
    7bd2:	230c      	movs	r3, #12
    7bd4:	6033      	str	r3, [r6, #0]
    7bd6:	e016      	b.n	7c06 <__sfp+0x76>
    7bd8:	2301      	movs	r3, #1
    7bda:	1c20      	adds	r0, r4, #0
    7bdc:	425b      	negs	r3, r3
    7bde:	81e3      	strh	r3, [r4, #14]
    7be0:	3302      	adds	r3, #2
    7be2:	81a3      	strh	r3, [r4, #12]
    7be4:	6667      	str	r7, [r4, #100]	; 0x64
    7be6:	6027      	str	r7, [r4, #0]
    7be8:	60a7      	str	r7, [r4, #8]
    7bea:	6067      	str	r7, [r4, #4]
    7bec:	6127      	str	r7, [r4, #16]
    7bee:	6167      	str	r7, [r4, #20]
    7bf0:	61a7      	str	r7, [r4, #24]
    7bf2:	305c      	adds	r0, #92	; 0x5c
    7bf4:	1c39      	adds	r1, r7, #0
    7bf6:	2208      	movs	r2, #8
    7bf8:	f7ff fc66 	bl	74c8 <memset>
    7bfc:	1c20      	adds	r0, r4, #0
    7bfe:	6367      	str	r7, [r4, #52]	; 0x34
    7c00:	63a7      	str	r7, [r4, #56]	; 0x38
    7c02:	64a7      	str	r7, [r4, #72]	; 0x48
    7c04:	64e7      	str	r7, [r4, #76]	; 0x4c
    7c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c08:	0000c708 	.word	0x0000c708

00007c0c <_fwalk_reent>:
    7c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7c0e:	1c04      	adds	r4, r0, #0
    7c10:	1c07      	adds	r7, r0, #0
    7c12:	2600      	movs	r6, #0
    7c14:	9101      	str	r1, [sp, #4]
    7c16:	3448      	adds	r4, #72	; 0x48
    7c18:	2c00      	cmp	r4, #0
    7c1a:	d016      	beq.n	7c4a <_fwalk_reent+0x3e>
    7c1c:	6863      	ldr	r3, [r4, #4]
    7c1e:	68a5      	ldr	r5, [r4, #8]
    7c20:	9300      	str	r3, [sp, #0]
    7c22:	9b00      	ldr	r3, [sp, #0]
    7c24:	3b01      	subs	r3, #1
    7c26:	9300      	str	r3, [sp, #0]
    7c28:	d40d      	bmi.n	7c46 <_fwalk_reent+0x3a>
    7c2a:	89ab      	ldrh	r3, [r5, #12]
    7c2c:	2b01      	cmp	r3, #1
    7c2e:	d908      	bls.n	7c42 <_fwalk_reent+0x36>
    7c30:	220e      	movs	r2, #14
    7c32:	5eab      	ldrsh	r3, [r5, r2]
    7c34:	3301      	adds	r3, #1
    7c36:	d004      	beq.n	7c42 <_fwalk_reent+0x36>
    7c38:	1c38      	adds	r0, r7, #0
    7c3a:	1c29      	adds	r1, r5, #0
    7c3c:	9b01      	ldr	r3, [sp, #4]
    7c3e:	4798      	blx	r3
    7c40:	4306      	orrs	r6, r0
    7c42:	3568      	adds	r5, #104	; 0x68
    7c44:	e7ed      	b.n	7c22 <_fwalk_reent+0x16>
    7c46:	6824      	ldr	r4, [r4, #0]
    7c48:	e7e6      	b.n	7c18 <_fwalk_reent+0xc>
    7c4a:	1c30      	adds	r0, r6, #0
    7c4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007c50 <__smakebuf_r>:
    7c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c52:	898b      	ldrh	r3, [r1, #12]
    7c54:	b091      	sub	sp, #68	; 0x44
    7c56:	079b      	lsls	r3, r3, #30
    7c58:	d506      	bpl.n	7c68 <__smakebuf_r+0x18>
    7c5a:	1c0b      	adds	r3, r1, #0
    7c5c:	3347      	adds	r3, #71	; 0x47
    7c5e:	600b      	str	r3, [r1, #0]
    7c60:	610b      	str	r3, [r1, #16]
    7c62:	2301      	movs	r3, #1
    7c64:	614b      	str	r3, [r1, #20]
    7c66:	e045      	b.n	7cf4 <__smakebuf_r+0xa4>
    7c68:	1c0c      	adds	r4, r1, #0
    7c6a:	230e      	movs	r3, #14
    7c6c:	5ec9      	ldrsh	r1, [r1, r3]
    7c6e:	1c06      	adds	r6, r0, #0
    7c70:	2900      	cmp	r1, #0
    7c72:	da04      	bge.n	7c7e <__smakebuf_r+0x2e>
    7c74:	2380      	movs	r3, #128	; 0x80
    7c76:	89a5      	ldrh	r5, [r4, #12]
    7c78:	401d      	ands	r5, r3
    7c7a:	d110      	bne.n	7c9e <__smakebuf_r+0x4e>
    7c7c:	e00c      	b.n	7c98 <__smakebuf_r+0x48>
    7c7e:	aa01      	add	r2, sp, #4
    7c80:	f000 fc64 	bl	854c <_fstat_r>
    7c84:	2800      	cmp	r0, #0
    7c86:	dbf5      	blt.n	7c74 <__smakebuf_r+0x24>
    7c88:	23f0      	movs	r3, #240	; 0xf0
    7c8a:	9d02      	ldr	r5, [sp, #8]
    7c8c:	021b      	lsls	r3, r3, #8
    7c8e:	401d      	ands	r5, r3
    7c90:	4b19      	ldr	r3, [pc, #100]	; (7cf8 <__smakebuf_r+0xa8>)
    7c92:	18ed      	adds	r5, r5, r3
    7c94:	426b      	negs	r3, r5
    7c96:	415d      	adcs	r5, r3
    7c98:	2780      	movs	r7, #128	; 0x80
    7c9a:	00ff      	lsls	r7, r7, #3
    7c9c:	e001      	b.n	7ca2 <__smakebuf_r+0x52>
    7c9e:	2500      	movs	r5, #0
    7ca0:	2740      	movs	r7, #64	; 0x40
    7ca2:	1c30      	adds	r0, r6, #0
    7ca4:	1c39      	adds	r1, r7, #0
    7ca6:	f000 f87b 	bl	7da0 <_malloc_r>
    7caa:	2800      	cmp	r0, #0
    7cac:	d10c      	bne.n	7cc8 <__smakebuf_r+0x78>
    7cae:	89a3      	ldrh	r3, [r4, #12]
    7cb0:	059a      	lsls	r2, r3, #22
    7cb2:	d41f      	bmi.n	7cf4 <__smakebuf_r+0xa4>
    7cb4:	2202      	movs	r2, #2
    7cb6:	4313      	orrs	r3, r2
    7cb8:	81a3      	strh	r3, [r4, #12]
    7cba:	1c23      	adds	r3, r4, #0
    7cbc:	3347      	adds	r3, #71	; 0x47
    7cbe:	6023      	str	r3, [r4, #0]
    7cc0:	6123      	str	r3, [r4, #16]
    7cc2:	2301      	movs	r3, #1
    7cc4:	6163      	str	r3, [r4, #20]
    7cc6:	e015      	b.n	7cf4 <__smakebuf_r+0xa4>
    7cc8:	2280      	movs	r2, #128	; 0x80
    7cca:	4b0c      	ldr	r3, [pc, #48]	; (7cfc <__smakebuf_r+0xac>)
    7ccc:	62b3      	str	r3, [r6, #40]	; 0x28
    7cce:	89a3      	ldrh	r3, [r4, #12]
    7cd0:	6020      	str	r0, [r4, #0]
    7cd2:	4313      	orrs	r3, r2
    7cd4:	81a3      	strh	r3, [r4, #12]
    7cd6:	6120      	str	r0, [r4, #16]
    7cd8:	6167      	str	r7, [r4, #20]
    7cda:	2d00      	cmp	r5, #0
    7cdc:	d00a      	beq.n	7cf4 <__smakebuf_r+0xa4>
    7cde:	230e      	movs	r3, #14
    7ce0:	5ee1      	ldrsh	r1, [r4, r3]
    7ce2:	1c30      	adds	r0, r6, #0
    7ce4:	f000 fc44 	bl	8570 <_isatty_r>
    7ce8:	2800      	cmp	r0, #0
    7cea:	d003      	beq.n	7cf4 <__smakebuf_r+0xa4>
    7cec:	2201      	movs	r2, #1
    7cee:	89a3      	ldrh	r3, [r4, #12]
    7cf0:	4313      	orrs	r3, r2
    7cf2:	81a3      	strh	r3, [r4, #12]
    7cf4:	b011      	add	sp, #68	; 0x44
    7cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7cf8:	ffffe000 	.word	0xffffe000
    7cfc:	00007aa9 	.word	0x00007aa9

00007d00 <malloc>:
    7d00:	b508      	push	{r3, lr}
    7d02:	4b03      	ldr	r3, [pc, #12]	; (7d10 <malloc+0x10>)
    7d04:	1c01      	adds	r1, r0, #0
    7d06:	6818      	ldr	r0, [r3, #0]
    7d08:	f000 f84a 	bl	7da0 <_malloc_r>
    7d0c:	bd08      	pop	{r3, pc}
    7d0e:	46c0      	nop			; (mov r8, r8)
    7d10:	20000094 	.word	0x20000094

00007d14 <_free_r>:
    7d14:	b530      	push	{r4, r5, lr}
    7d16:	2900      	cmp	r1, #0
    7d18:	d03e      	beq.n	7d98 <_free_r+0x84>
    7d1a:	3904      	subs	r1, #4
    7d1c:	680b      	ldr	r3, [r1, #0]
    7d1e:	2b00      	cmp	r3, #0
    7d20:	da00      	bge.n	7d24 <_free_r+0x10>
    7d22:	18c9      	adds	r1, r1, r3
    7d24:	4a1d      	ldr	r2, [pc, #116]	; (7d9c <_free_r+0x88>)
    7d26:	6813      	ldr	r3, [r2, #0]
    7d28:	1c14      	adds	r4, r2, #0
    7d2a:	2b00      	cmp	r3, #0
    7d2c:	d102      	bne.n	7d34 <_free_r+0x20>
    7d2e:	604b      	str	r3, [r1, #4]
    7d30:	6011      	str	r1, [r2, #0]
    7d32:	e031      	b.n	7d98 <_free_r+0x84>
    7d34:	4299      	cmp	r1, r3
    7d36:	d20d      	bcs.n	7d54 <_free_r+0x40>
    7d38:	6808      	ldr	r0, [r1, #0]
    7d3a:	180a      	adds	r2, r1, r0
    7d3c:	429a      	cmp	r2, r3
    7d3e:	d103      	bne.n	7d48 <_free_r+0x34>
    7d40:	6813      	ldr	r3, [r2, #0]
    7d42:	18c3      	adds	r3, r0, r3
    7d44:	600b      	str	r3, [r1, #0]
    7d46:	6853      	ldr	r3, [r2, #4]
    7d48:	604b      	str	r3, [r1, #4]
    7d4a:	6021      	str	r1, [r4, #0]
    7d4c:	e024      	b.n	7d98 <_free_r+0x84>
    7d4e:	428a      	cmp	r2, r1
    7d50:	d803      	bhi.n	7d5a <_free_r+0x46>
    7d52:	1c13      	adds	r3, r2, #0
    7d54:	685a      	ldr	r2, [r3, #4]
    7d56:	2a00      	cmp	r2, #0
    7d58:	d1f9      	bne.n	7d4e <_free_r+0x3a>
    7d5a:	681d      	ldr	r5, [r3, #0]
    7d5c:	195c      	adds	r4, r3, r5
    7d5e:	428c      	cmp	r4, r1
    7d60:	d10b      	bne.n	7d7a <_free_r+0x66>
    7d62:	6809      	ldr	r1, [r1, #0]
    7d64:	1869      	adds	r1, r5, r1
    7d66:	1858      	adds	r0, r3, r1
    7d68:	6019      	str	r1, [r3, #0]
    7d6a:	4290      	cmp	r0, r2
    7d6c:	d114      	bne.n	7d98 <_free_r+0x84>
    7d6e:	6810      	ldr	r0, [r2, #0]
    7d70:	6852      	ldr	r2, [r2, #4]
    7d72:	1809      	adds	r1, r1, r0
    7d74:	6019      	str	r1, [r3, #0]
    7d76:	605a      	str	r2, [r3, #4]
    7d78:	e00e      	b.n	7d98 <_free_r+0x84>
    7d7a:	428c      	cmp	r4, r1
    7d7c:	d902      	bls.n	7d84 <_free_r+0x70>
    7d7e:	230c      	movs	r3, #12
    7d80:	6003      	str	r3, [r0, #0]
    7d82:	e009      	b.n	7d98 <_free_r+0x84>
    7d84:	6808      	ldr	r0, [r1, #0]
    7d86:	180c      	adds	r4, r1, r0
    7d88:	4294      	cmp	r4, r2
    7d8a:	d103      	bne.n	7d94 <_free_r+0x80>
    7d8c:	6814      	ldr	r4, [r2, #0]
    7d8e:	6852      	ldr	r2, [r2, #4]
    7d90:	1900      	adds	r0, r0, r4
    7d92:	6008      	str	r0, [r1, #0]
    7d94:	604a      	str	r2, [r1, #4]
    7d96:	6059      	str	r1, [r3, #4]
    7d98:	bd30      	pop	{r4, r5, pc}
    7d9a:	46c0      	nop			; (mov r8, r8)
    7d9c:	20000df4 	.word	0x20000df4

00007da0 <_malloc_r>:
    7da0:	2303      	movs	r3, #3
    7da2:	b570      	push	{r4, r5, r6, lr}
    7da4:	1ccc      	adds	r4, r1, #3
    7da6:	439c      	bics	r4, r3
    7da8:	3408      	adds	r4, #8
    7daa:	1c05      	adds	r5, r0, #0
    7dac:	2c0c      	cmp	r4, #12
    7dae:	d201      	bcs.n	7db4 <_malloc_r+0x14>
    7db0:	240c      	movs	r4, #12
    7db2:	e005      	b.n	7dc0 <_malloc_r+0x20>
    7db4:	2c00      	cmp	r4, #0
    7db6:	da03      	bge.n	7dc0 <_malloc_r+0x20>
    7db8:	230c      	movs	r3, #12
    7dba:	2000      	movs	r0, #0
    7dbc:	602b      	str	r3, [r5, #0]
    7dbe:	e042      	b.n	7e46 <_malloc_r+0xa6>
    7dc0:	428c      	cmp	r4, r1
    7dc2:	d3f9      	bcc.n	7db8 <_malloc_r+0x18>
    7dc4:	4a20      	ldr	r2, [pc, #128]	; (7e48 <_malloc_r+0xa8>)
    7dc6:	6813      	ldr	r3, [r2, #0]
    7dc8:	1c10      	adds	r0, r2, #0
    7dca:	1c19      	adds	r1, r3, #0
    7dcc:	2900      	cmp	r1, #0
    7dce:	d013      	beq.n	7df8 <_malloc_r+0x58>
    7dd0:	680a      	ldr	r2, [r1, #0]
    7dd2:	1b12      	subs	r2, r2, r4
    7dd4:	d40d      	bmi.n	7df2 <_malloc_r+0x52>
    7dd6:	2a0b      	cmp	r2, #11
    7dd8:	d902      	bls.n	7de0 <_malloc_r+0x40>
    7dda:	600a      	str	r2, [r1, #0]
    7ddc:	188b      	adds	r3, r1, r2
    7dde:	e01f      	b.n	7e20 <_malloc_r+0x80>
    7de0:	428b      	cmp	r3, r1
    7de2:	d102      	bne.n	7dea <_malloc_r+0x4a>
    7de4:	685a      	ldr	r2, [r3, #4]
    7de6:	6002      	str	r2, [r0, #0]
    7de8:	e01b      	b.n	7e22 <_malloc_r+0x82>
    7dea:	684a      	ldr	r2, [r1, #4]
    7dec:	605a      	str	r2, [r3, #4]
    7dee:	1c0b      	adds	r3, r1, #0
    7df0:	e017      	b.n	7e22 <_malloc_r+0x82>
    7df2:	1c0b      	adds	r3, r1, #0
    7df4:	6849      	ldr	r1, [r1, #4]
    7df6:	e7e9      	b.n	7dcc <_malloc_r+0x2c>
    7df8:	4e14      	ldr	r6, [pc, #80]	; (7e4c <_malloc_r+0xac>)
    7dfa:	6833      	ldr	r3, [r6, #0]
    7dfc:	2b00      	cmp	r3, #0
    7dfe:	d103      	bne.n	7e08 <_malloc_r+0x68>
    7e00:	1c28      	adds	r0, r5, #0
    7e02:	f000 fb1f 	bl	8444 <_sbrk_r>
    7e06:	6030      	str	r0, [r6, #0]
    7e08:	1c28      	adds	r0, r5, #0
    7e0a:	1c21      	adds	r1, r4, #0
    7e0c:	f000 fb1a 	bl	8444 <_sbrk_r>
    7e10:	1c03      	adds	r3, r0, #0
    7e12:	1c42      	adds	r2, r0, #1
    7e14:	d0d0      	beq.n	7db8 <_malloc_r+0x18>
    7e16:	2203      	movs	r2, #3
    7e18:	1cc6      	adds	r6, r0, #3
    7e1a:	4396      	bics	r6, r2
    7e1c:	4286      	cmp	r6, r0
    7e1e:	d10a      	bne.n	7e36 <_malloc_r+0x96>
    7e20:	601c      	str	r4, [r3, #0]
    7e22:	1c18      	adds	r0, r3, #0
    7e24:	2107      	movs	r1, #7
    7e26:	300b      	adds	r0, #11
    7e28:	1d1a      	adds	r2, r3, #4
    7e2a:	4388      	bics	r0, r1
    7e2c:	1a82      	subs	r2, r0, r2
    7e2e:	d00a      	beq.n	7e46 <_malloc_r+0xa6>
    7e30:	4251      	negs	r1, r2
    7e32:	5099      	str	r1, [r3, r2]
    7e34:	e007      	b.n	7e46 <_malloc_r+0xa6>
    7e36:	1a31      	subs	r1, r6, r0
    7e38:	1c28      	adds	r0, r5, #0
    7e3a:	f000 fb03 	bl	8444 <_sbrk_r>
    7e3e:	1c43      	adds	r3, r0, #1
    7e40:	d0ba      	beq.n	7db8 <_malloc_r+0x18>
    7e42:	1c33      	adds	r3, r6, #0
    7e44:	e7ec      	b.n	7e20 <_malloc_r+0x80>
    7e46:	bd70      	pop	{r4, r5, r6, pc}
    7e48:	20000df4 	.word	0x20000df4
    7e4c:	20000df0 	.word	0x20000df0

00007e50 <__sfputc_r>:
    7e50:	6893      	ldr	r3, [r2, #8]
    7e52:	b510      	push	{r4, lr}
    7e54:	3b01      	subs	r3, #1
    7e56:	6093      	str	r3, [r2, #8]
    7e58:	2b00      	cmp	r3, #0
    7e5a:	da05      	bge.n	7e68 <__sfputc_r+0x18>
    7e5c:	6994      	ldr	r4, [r2, #24]
    7e5e:	42a3      	cmp	r3, r4
    7e60:	db08      	blt.n	7e74 <__sfputc_r+0x24>
    7e62:	b2cb      	uxtb	r3, r1
    7e64:	2b0a      	cmp	r3, #10
    7e66:	d005      	beq.n	7e74 <__sfputc_r+0x24>
    7e68:	6813      	ldr	r3, [r2, #0]
    7e6a:	1c58      	adds	r0, r3, #1
    7e6c:	6010      	str	r0, [r2, #0]
    7e6e:	7019      	strb	r1, [r3, #0]
    7e70:	b2c8      	uxtb	r0, r1
    7e72:	e001      	b.n	7e78 <__sfputc_r+0x28>
    7e74:	f7ff fc96 	bl	77a4 <__swbuf_r>
    7e78:	bd10      	pop	{r4, pc}

00007e7a <__sfputs_r>:
    7e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e7c:	1c06      	adds	r6, r0, #0
    7e7e:	1c0f      	adds	r7, r1, #0
    7e80:	1c14      	adds	r4, r2, #0
    7e82:	18d5      	adds	r5, r2, r3
    7e84:	42ac      	cmp	r4, r5
    7e86:	d008      	beq.n	7e9a <__sfputs_r+0x20>
    7e88:	7821      	ldrb	r1, [r4, #0]
    7e8a:	1c30      	adds	r0, r6, #0
    7e8c:	1c3a      	adds	r2, r7, #0
    7e8e:	f7ff ffdf 	bl	7e50 <__sfputc_r>
    7e92:	3401      	adds	r4, #1
    7e94:	1c43      	adds	r3, r0, #1
    7e96:	d1f5      	bne.n	7e84 <__sfputs_r+0xa>
    7e98:	e000      	b.n	7e9c <__sfputs_r+0x22>
    7e9a:	2000      	movs	r0, #0
    7e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007ea0 <_vfiprintf_r>:
    7ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ea2:	b09f      	sub	sp, #124	; 0x7c
    7ea4:	1c06      	adds	r6, r0, #0
    7ea6:	1c0f      	adds	r7, r1, #0
    7ea8:	9202      	str	r2, [sp, #8]
    7eaa:	9305      	str	r3, [sp, #20]
    7eac:	2800      	cmp	r0, #0
    7eae:	d004      	beq.n	7eba <_vfiprintf_r+0x1a>
    7eb0:	6983      	ldr	r3, [r0, #24]
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	d101      	bne.n	7eba <_vfiprintf_r+0x1a>
    7eb6:	f7ff fe39 	bl	7b2c <__sinit>
    7eba:	4b79      	ldr	r3, [pc, #484]	; (80a0 <_vfiprintf_r+0x200>)
    7ebc:	429f      	cmp	r7, r3
    7ebe:	d101      	bne.n	7ec4 <_vfiprintf_r+0x24>
    7ec0:	6877      	ldr	r7, [r6, #4]
    7ec2:	e008      	b.n	7ed6 <_vfiprintf_r+0x36>
    7ec4:	4b77      	ldr	r3, [pc, #476]	; (80a4 <_vfiprintf_r+0x204>)
    7ec6:	429f      	cmp	r7, r3
    7ec8:	d101      	bne.n	7ece <_vfiprintf_r+0x2e>
    7eca:	68b7      	ldr	r7, [r6, #8]
    7ecc:	e003      	b.n	7ed6 <_vfiprintf_r+0x36>
    7ece:	4b76      	ldr	r3, [pc, #472]	; (80a8 <_vfiprintf_r+0x208>)
    7ed0:	429f      	cmp	r7, r3
    7ed2:	d100      	bne.n	7ed6 <_vfiprintf_r+0x36>
    7ed4:	68f7      	ldr	r7, [r6, #12]
    7ed6:	89bb      	ldrh	r3, [r7, #12]
    7ed8:	071b      	lsls	r3, r3, #28
    7eda:	d50a      	bpl.n	7ef2 <_vfiprintf_r+0x52>
    7edc:	693b      	ldr	r3, [r7, #16]
    7ede:	2b00      	cmp	r3, #0
    7ee0:	d007      	beq.n	7ef2 <_vfiprintf_r+0x52>
    7ee2:	2300      	movs	r3, #0
    7ee4:	ad06      	add	r5, sp, #24
    7ee6:	616b      	str	r3, [r5, #20]
    7ee8:	3320      	adds	r3, #32
    7eea:	766b      	strb	r3, [r5, #25]
    7eec:	3310      	adds	r3, #16
    7eee:	76ab      	strb	r3, [r5, #26]
    7ef0:	e03d      	b.n	7f6e <_vfiprintf_r+0xce>
    7ef2:	1c30      	adds	r0, r6, #0
    7ef4:	1c39      	adds	r1, r7, #0
    7ef6:	f7ff fcad 	bl	7854 <__swsetup_r>
    7efa:	2800      	cmp	r0, #0
    7efc:	d0f1      	beq.n	7ee2 <_vfiprintf_r+0x42>
    7efe:	2001      	movs	r0, #1
    7f00:	4240      	negs	r0, r0
    7f02:	e0ca      	b.n	809a <_vfiprintf_r+0x1fa>
    7f04:	9a05      	ldr	r2, [sp, #20]
    7f06:	1d11      	adds	r1, r2, #4
    7f08:	6812      	ldr	r2, [r2, #0]
    7f0a:	9105      	str	r1, [sp, #20]
    7f0c:	2a00      	cmp	r2, #0
    7f0e:	db7e      	blt.n	800e <_vfiprintf_r+0x16e>
    7f10:	9209      	str	r2, [sp, #36]	; 0x24
    7f12:	3401      	adds	r4, #1
    7f14:	7823      	ldrb	r3, [r4, #0]
    7f16:	2b2e      	cmp	r3, #46	; 0x2e
    7f18:	d100      	bne.n	7f1c <_vfiprintf_r+0x7c>
    7f1a:	e089      	b.n	8030 <_vfiprintf_r+0x190>
    7f1c:	7821      	ldrb	r1, [r4, #0]
    7f1e:	4863      	ldr	r0, [pc, #396]	; (80ac <_vfiprintf_r+0x20c>)
    7f20:	2203      	movs	r2, #3
    7f22:	f000 fb4b 	bl	85bc <memchr>
    7f26:	2800      	cmp	r0, #0
    7f28:	d008      	beq.n	7f3c <_vfiprintf_r+0x9c>
    7f2a:	4b60      	ldr	r3, [pc, #384]	; (80ac <_vfiprintf_r+0x20c>)
    7f2c:	3401      	adds	r4, #1
    7f2e:	1ac0      	subs	r0, r0, r3
    7f30:	2340      	movs	r3, #64	; 0x40
    7f32:	4083      	lsls	r3, r0
    7f34:	1c18      	adds	r0, r3, #0
    7f36:	682b      	ldr	r3, [r5, #0]
    7f38:	4318      	orrs	r0, r3
    7f3a:	6028      	str	r0, [r5, #0]
    7f3c:	7821      	ldrb	r1, [r4, #0]
    7f3e:	1c63      	adds	r3, r4, #1
    7f40:	485b      	ldr	r0, [pc, #364]	; (80b0 <_vfiprintf_r+0x210>)
    7f42:	2206      	movs	r2, #6
    7f44:	9302      	str	r3, [sp, #8]
    7f46:	7629      	strb	r1, [r5, #24]
    7f48:	f000 fb38 	bl	85bc <memchr>
    7f4c:	2800      	cmp	r0, #0
    7f4e:	d100      	bne.n	7f52 <_vfiprintf_r+0xb2>
    7f50:	e091      	b.n	8076 <_vfiprintf_r+0x1d6>
    7f52:	4b58      	ldr	r3, [pc, #352]	; (80b4 <_vfiprintf_r+0x214>)
    7f54:	2b00      	cmp	r3, #0
    7f56:	d000      	beq.n	7f5a <_vfiprintf_r+0xba>
    7f58:	e084      	b.n	8064 <_vfiprintf_r+0x1c4>
    7f5a:	2207      	movs	r2, #7
    7f5c:	9b05      	ldr	r3, [sp, #20]
    7f5e:	3307      	adds	r3, #7
    7f60:	4393      	bics	r3, r2
    7f62:	3308      	adds	r3, #8
    7f64:	9305      	str	r3, [sp, #20]
    7f66:	696b      	ldr	r3, [r5, #20]
    7f68:	9a03      	ldr	r2, [sp, #12]
    7f6a:	189b      	adds	r3, r3, r2
    7f6c:	616b      	str	r3, [r5, #20]
    7f6e:	9c02      	ldr	r4, [sp, #8]
    7f70:	7823      	ldrb	r3, [r4, #0]
    7f72:	2b00      	cmp	r3, #0
    7f74:	d104      	bne.n	7f80 <_vfiprintf_r+0xe0>
    7f76:	9b02      	ldr	r3, [sp, #8]
    7f78:	1ae3      	subs	r3, r4, r3
    7f7a:	9304      	str	r3, [sp, #16]
    7f7c:	d011      	beq.n	7fa2 <_vfiprintf_r+0x102>
    7f7e:	e003      	b.n	7f88 <_vfiprintf_r+0xe8>
    7f80:	2b25      	cmp	r3, #37	; 0x25
    7f82:	d0f8      	beq.n	7f76 <_vfiprintf_r+0xd6>
    7f84:	3401      	adds	r4, #1
    7f86:	e7f3      	b.n	7f70 <_vfiprintf_r+0xd0>
    7f88:	9b04      	ldr	r3, [sp, #16]
    7f8a:	1c30      	adds	r0, r6, #0
    7f8c:	1c39      	adds	r1, r7, #0
    7f8e:	9a02      	ldr	r2, [sp, #8]
    7f90:	f7ff ff73 	bl	7e7a <__sfputs_r>
    7f94:	1c43      	adds	r3, r0, #1
    7f96:	d07b      	beq.n	8090 <_vfiprintf_r+0x1f0>
    7f98:	696a      	ldr	r2, [r5, #20]
    7f9a:	9b04      	ldr	r3, [sp, #16]
    7f9c:	4694      	mov	ip, r2
    7f9e:	4463      	add	r3, ip
    7fa0:	616b      	str	r3, [r5, #20]
    7fa2:	7823      	ldrb	r3, [r4, #0]
    7fa4:	2b00      	cmp	r3, #0
    7fa6:	d073      	beq.n	8090 <_vfiprintf_r+0x1f0>
    7fa8:	2201      	movs	r2, #1
    7faa:	2300      	movs	r3, #0
    7fac:	4252      	negs	r2, r2
    7fae:	606a      	str	r2, [r5, #4]
    7fb0:	a902      	add	r1, sp, #8
    7fb2:	3254      	adds	r2, #84	; 0x54
    7fb4:	1852      	adds	r2, r2, r1
    7fb6:	3401      	adds	r4, #1
    7fb8:	602b      	str	r3, [r5, #0]
    7fba:	60eb      	str	r3, [r5, #12]
    7fbc:	60ab      	str	r3, [r5, #8]
    7fbe:	7013      	strb	r3, [r2, #0]
    7fc0:	65ab      	str	r3, [r5, #88]	; 0x58
    7fc2:	7821      	ldrb	r1, [r4, #0]
    7fc4:	483c      	ldr	r0, [pc, #240]	; (80b8 <_vfiprintf_r+0x218>)
    7fc6:	2205      	movs	r2, #5
    7fc8:	f000 faf8 	bl	85bc <memchr>
    7fcc:	2800      	cmp	r0, #0
    7fce:	d009      	beq.n	7fe4 <_vfiprintf_r+0x144>
    7fd0:	4b39      	ldr	r3, [pc, #228]	; (80b8 <_vfiprintf_r+0x218>)
    7fd2:	3401      	adds	r4, #1
    7fd4:	1ac0      	subs	r0, r0, r3
    7fd6:	2301      	movs	r3, #1
    7fd8:	4083      	lsls	r3, r0
    7fda:	1c18      	adds	r0, r3, #0
    7fdc:	682b      	ldr	r3, [r5, #0]
    7fde:	4318      	orrs	r0, r3
    7fe0:	6028      	str	r0, [r5, #0]
    7fe2:	e7ee      	b.n	7fc2 <_vfiprintf_r+0x122>
    7fe4:	682b      	ldr	r3, [r5, #0]
    7fe6:	06da      	lsls	r2, r3, #27
    7fe8:	d504      	bpl.n	7ff4 <_vfiprintf_r+0x154>
    7fea:	2253      	movs	r2, #83	; 0x53
    7fec:	2120      	movs	r1, #32
    7fee:	a802      	add	r0, sp, #8
    7ff0:	1812      	adds	r2, r2, r0
    7ff2:	7011      	strb	r1, [r2, #0]
    7ff4:	071a      	lsls	r2, r3, #28
    7ff6:	d504      	bpl.n	8002 <_vfiprintf_r+0x162>
    7ff8:	2253      	movs	r2, #83	; 0x53
    7ffa:	212b      	movs	r1, #43	; 0x2b
    7ffc:	a802      	add	r0, sp, #8
    7ffe:	1812      	adds	r2, r2, r0
    8000:	7011      	strb	r1, [r2, #0]
    8002:	7822      	ldrb	r2, [r4, #0]
    8004:	2a2a      	cmp	r2, #42	; 0x2a
    8006:	d100      	bne.n	800a <_vfiprintf_r+0x16a>
    8008:	e77c      	b.n	7f04 <_vfiprintf_r+0x64>
    800a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    800c:	e005      	b.n	801a <_vfiprintf_r+0x17a>
    800e:	4252      	negs	r2, r2
    8010:	60ea      	str	r2, [r5, #12]
    8012:	2202      	movs	r2, #2
    8014:	4313      	orrs	r3, r2
    8016:	602b      	str	r3, [r5, #0]
    8018:	e77b      	b.n	7f12 <_vfiprintf_r+0x72>
    801a:	7822      	ldrb	r2, [r4, #0]
    801c:	3a30      	subs	r2, #48	; 0x30
    801e:	2a09      	cmp	r2, #9
    8020:	d804      	bhi.n	802c <_vfiprintf_r+0x18c>
    8022:	210a      	movs	r1, #10
    8024:	434b      	muls	r3, r1
    8026:	3401      	adds	r4, #1
    8028:	189b      	adds	r3, r3, r2
    802a:	e7f6      	b.n	801a <_vfiprintf_r+0x17a>
    802c:	9309      	str	r3, [sp, #36]	; 0x24
    802e:	e771      	b.n	7f14 <_vfiprintf_r+0x74>
    8030:	7863      	ldrb	r3, [r4, #1]
    8032:	2b2a      	cmp	r3, #42	; 0x2a
    8034:	d109      	bne.n	804a <_vfiprintf_r+0x1aa>
    8036:	9b05      	ldr	r3, [sp, #20]
    8038:	3402      	adds	r4, #2
    803a:	1d1a      	adds	r2, r3, #4
    803c:	681b      	ldr	r3, [r3, #0]
    803e:	9205      	str	r2, [sp, #20]
    8040:	2b00      	cmp	r3, #0
    8042:	da0d      	bge.n	8060 <_vfiprintf_r+0x1c0>
    8044:	2301      	movs	r3, #1
    8046:	425b      	negs	r3, r3
    8048:	e00a      	b.n	8060 <_vfiprintf_r+0x1c0>
    804a:	2300      	movs	r3, #0
    804c:	3401      	adds	r4, #1
    804e:	7822      	ldrb	r2, [r4, #0]
    8050:	3a30      	subs	r2, #48	; 0x30
    8052:	2a09      	cmp	r2, #9
    8054:	d804      	bhi.n	8060 <_vfiprintf_r+0x1c0>
    8056:	210a      	movs	r1, #10
    8058:	434b      	muls	r3, r1
    805a:	3401      	adds	r4, #1
    805c:	189b      	adds	r3, r3, r2
    805e:	e7f6      	b.n	804e <_vfiprintf_r+0x1ae>
    8060:	9307      	str	r3, [sp, #28]
    8062:	e75b      	b.n	7f1c <_vfiprintf_r+0x7c>
    8064:	ab05      	add	r3, sp, #20
    8066:	9300      	str	r3, [sp, #0]
    8068:	1c30      	adds	r0, r6, #0
    806a:	1c29      	adds	r1, r5, #0
    806c:	1c3a      	adds	r2, r7, #0
    806e:	4b13      	ldr	r3, [pc, #76]	; (80bc <_vfiprintf_r+0x21c>)
    8070:	e000      	b.n	8074 <_vfiprintf_r+0x1d4>
    8072:	bf00      	nop
    8074:	e007      	b.n	8086 <_vfiprintf_r+0x1e6>
    8076:	ab05      	add	r3, sp, #20
    8078:	9300      	str	r3, [sp, #0]
    807a:	1c30      	adds	r0, r6, #0
    807c:	1c29      	adds	r1, r5, #0
    807e:	1c3a      	adds	r2, r7, #0
    8080:	4b0e      	ldr	r3, [pc, #56]	; (80bc <_vfiprintf_r+0x21c>)
    8082:	f000 f88b 	bl	819c <_printf_i>
    8086:	9003      	str	r0, [sp, #12]
    8088:	9b03      	ldr	r3, [sp, #12]
    808a:	3301      	adds	r3, #1
    808c:	d000      	beq.n	8090 <_vfiprintf_r+0x1f0>
    808e:	e76a      	b.n	7f66 <_vfiprintf_r+0xc6>
    8090:	89bb      	ldrh	r3, [r7, #12]
    8092:	065b      	lsls	r3, r3, #25
    8094:	d500      	bpl.n	8098 <_vfiprintf_r+0x1f8>
    8096:	e732      	b.n	7efe <_vfiprintf_r+0x5e>
    8098:	980b      	ldr	r0, [sp, #44]	; 0x2c
    809a:	b01f      	add	sp, #124	; 0x7c
    809c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    809e:	46c0      	nop			; (mov r8, r8)
    80a0:	0000c70c 	.word	0x0000c70c
    80a4:	0000c72c 	.word	0x0000c72c
    80a8:	0000c74c 	.word	0x0000c74c
    80ac:	0000c772 	.word	0x0000c772
    80b0:	0000c776 	.word	0x0000c776
    80b4:	00000000 	.word	0x00000000
    80b8:	0000c76c 	.word	0x0000c76c
    80bc:	00007e7b 	.word	0x00007e7b

000080c0 <_printf_common>:
    80c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    80c2:	1c17      	adds	r7, r2, #0
    80c4:	9301      	str	r3, [sp, #4]
    80c6:	690a      	ldr	r2, [r1, #16]
    80c8:	688b      	ldr	r3, [r1, #8]
    80ca:	9000      	str	r0, [sp, #0]
    80cc:	1c0c      	adds	r4, r1, #0
    80ce:	4293      	cmp	r3, r2
    80d0:	da00      	bge.n	80d4 <_printf_common+0x14>
    80d2:	1c13      	adds	r3, r2, #0
    80d4:	1c22      	adds	r2, r4, #0
    80d6:	603b      	str	r3, [r7, #0]
    80d8:	3243      	adds	r2, #67	; 0x43
    80da:	7812      	ldrb	r2, [r2, #0]
    80dc:	2a00      	cmp	r2, #0
    80de:	d001      	beq.n	80e4 <_printf_common+0x24>
    80e0:	3301      	adds	r3, #1
    80e2:	603b      	str	r3, [r7, #0]
    80e4:	6823      	ldr	r3, [r4, #0]
    80e6:	069b      	lsls	r3, r3, #26
    80e8:	d502      	bpl.n	80f0 <_printf_common+0x30>
    80ea:	683b      	ldr	r3, [r7, #0]
    80ec:	3302      	adds	r3, #2
    80ee:	603b      	str	r3, [r7, #0]
    80f0:	2506      	movs	r5, #6
    80f2:	6823      	ldr	r3, [r4, #0]
    80f4:	401d      	ands	r5, r3
    80f6:	d01e      	beq.n	8136 <_printf_common+0x76>
    80f8:	1c23      	adds	r3, r4, #0
    80fa:	3343      	adds	r3, #67	; 0x43
    80fc:	781b      	ldrb	r3, [r3, #0]
    80fe:	1e5a      	subs	r2, r3, #1
    8100:	4193      	sbcs	r3, r2
    8102:	6822      	ldr	r2, [r4, #0]
    8104:	0692      	lsls	r2, r2, #26
    8106:	d51c      	bpl.n	8142 <_printf_common+0x82>
    8108:	2030      	movs	r0, #48	; 0x30
    810a:	18e1      	adds	r1, r4, r3
    810c:	3140      	adds	r1, #64	; 0x40
    810e:	70c8      	strb	r0, [r1, #3]
    8110:	1c21      	adds	r1, r4, #0
    8112:	1c5a      	adds	r2, r3, #1
    8114:	3145      	adds	r1, #69	; 0x45
    8116:	7809      	ldrb	r1, [r1, #0]
    8118:	18a2      	adds	r2, r4, r2
    811a:	3240      	adds	r2, #64	; 0x40
    811c:	3302      	adds	r3, #2
    811e:	70d1      	strb	r1, [r2, #3]
    8120:	e00f      	b.n	8142 <_printf_common+0x82>
    8122:	1c22      	adds	r2, r4, #0
    8124:	2301      	movs	r3, #1
    8126:	9800      	ldr	r0, [sp, #0]
    8128:	9901      	ldr	r1, [sp, #4]
    812a:	3219      	adds	r2, #25
    812c:	9e08      	ldr	r6, [sp, #32]
    812e:	47b0      	blx	r6
    8130:	1c43      	adds	r3, r0, #1
    8132:	d00e      	beq.n	8152 <_printf_common+0x92>
    8134:	3501      	adds	r5, #1
    8136:	68e3      	ldr	r3, [r4, #12]
    8138:	683a      	ldr	r2, [r7, #0]
    813a:	1a9b      	subs	r3, r3, r2
    813c:	429d      	cmp	r5, r3
    813e:	dbf0      	blt.n	8122 <_printf_common+0x62>
    8140:	e7da      	b.n	80f8 <_printf_common+0x38>
    8142:	1c22      	adds	r2, r4, #0
    8144:	9800      	ldr	r0, [sp, #0]
    8146:	9901      	ldr	r1, [sp, #4]
    8148:	3243      	adds	r2, #67	; 0x43
    814a:	9d08      	ldr	r5, [sp, #32]
    814c:	47a8      	blx	r5
    814e:	1c43      	adds	r3, r0, #1
    8150:	d102      	bne.n	8158 <_printf_common+0x98>
    8152:	2001      	movs	r0, #1
    8154:	4240      	negs	r0, r0
    8156:	e020      	b.n	819a <_printf_common+0xda>
    8158:	2306      	movs	r3, #6
    815a:	6820      	ldr	r0, [r4, #0]
    815c:	68e1      	ldr	r1, [r4, #12]
    815e:	683a      	ldr	r2, [r7, #0]
    8160:	4003      	ands	r3, r0
    8162:	2500      	movs	r5, #0
    8164:	2b04      	cmp	r3, #4
    8166:	d103      	bne.n	8170 <_printf_common+0xb0>
    8168:	1a8d      	subs	r5, r1, r2
    816a:	43eb      	mvns	r3, r5
    816c:	17db      	asrs	r3, r3, #31
    816e:	401d      	ands	r5, r3
    8170:	68a3      	ldr	r3, [r4, #8]
    8172:	6922      	ldr	r2, [r4, #16]
    8174:	4293      	cmp	r3, r2
    8176:	dd01      	ble.n	817c <_printf_common+0xbc>
    8178:	1a9b      	subs	r3, r3, r2
    817a:	18ed      	adds	r5, r5, r3
    817c:	2700      	movs	r7, #0
    817e:	42af      	cmp	r7, r5
    8180:	da0a      	bge.n	8198 <_printf_common+0xd8>
    8182:	1c22      	adds	r2, r4, #0
    8184:	2301      	movs	r3, #1
    8186:	9800      	ldr	r0, [sp, #0]
    8188:	9901      	ldr	r1, [sp, #4]
    818a:	321a      	adds	r2, #26
    818c:	9e08      	ldr	r6, [sp, #32]
    818e:	47b0      	blx	r6
    8190:	1c43      	adds	r3, r0, #1
    8192:	d0de      	beq.n	8152 <_printf_common+0x92>
    8194:	3701      	adds	r7, #1
    8196:	e7f2      	b.n	817e <_printf_common+0xbe>
    8198:	2000      	movs	r0, #0
    819a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000819c <_printf_i>:
    819c:	b5f0      	push	{r4, r5, r6, r7, lr}
    819e:	b08b      	sub	sp, #44	; 0x2c
    81a0:	9206      	str	r2, [sp, #24]
    81a2:	1c0a      	adds	r2, r1, #0
    81a4:	3243      	adds	r2, #67	; 0x43
    81a6:	9307      	str	r3, [sp, #28]
    81a8:	9005      	str	r0, [sp, #20]
    81aa:	9204      	str	r2, [sp, #16]
    81ac:	7e0a      	ldrb	r2, [r1, #24]
    81ae:	1c0c      	adds	r4, r1, #0
    81b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    81b2:	2a6e      	cmp	r2, #110	; 0x6e
    81b4:	d100      	bne.n	81b8 <_printf_i+0x1c>
    81b6:	e0a8      	b.n	830a <_printf_i+0x16e>
    81b8:	d811      	bhi.n	81de <_printf_i+0x42>
    81ba:	2a63      	cmp	r2, #99	; 0x63
    81bc:	d022      	beq.n	8204 <_printf_i+0x68>
    81be:	d809      	bhi.n	81d4 <_printf_i+0x38>
    81c0:	2a00      	cmp	r2, #0
    81c2:	d100      	bne.n	81c6 <_printf_i+0x2a>
    81c4:	e0b2      	b.n	832c <_printf_i+0x190>
    81c6:	2a58      	cmp	r2, #88	; 0x58
    81c8:	d000      	beq.n	81cc <_printf_i+0x30>
    81ca:	e0c2      	b.n	8352 <_printf_i+0x1b6>
    81cc:	3145      	adds	r1, #69	; 0x45
    81ce:	700a      	strb	r2, [r1, #0]
    81d0:	4a7c      	ldr	r2, [pc, #496]	; (83c4 <_printf_i+0x228>)
    81d2:	e04f      	b.n	8274 <_printf_i+0xd8>
    81d4:	2a64      	cmp	r2, #100	; 0x64
    81d6:	d01d      	beq.n	8214 <_printf_i+0x78>
    81d8:	2a69      	cmp	r2, #105	; 0x69
    81da:	d01b      	beq.n	8214 <_printf_i+0x78>
    81dc:	e0b9      	b.n	8352 <_printf_i+0x1b6>
    81de:	2a73      	cmp	r2, #115	; 0x73
    81e0:	d100      	bne.n	81e4 <_printf_i+0x48>
    81e2:	e0a7      	b.n	8334 <_printf_i+0x198>
    81e4:	d809      	bhi.n	81fa <_printf_i+0x5e>
    81e6:	2a6f      	cmp	r2, #111	; 0x6f
    81e8:	d029      	beq.n	823e <_printf_i+0xa2>
    81ea:	2a70      	cmp	r2, #112	; 0x70
    81ec:	d000      	beq.n	81f0 <_printf_i+0x54>
    81ee:	e0b0      	b.n	8352 <_printf_i+0x1b6>
    81f0:	2220      	movs	r2, #32
    81f2:	6809      	ldr	r1, [r1, #0]
    81f4:	430a      	orrs	r2, r1
    81f6:	6022      	str	r2, [r4, #0]
    81f8:	e037      	b.n	826a <_printf_i+0xce>
    81fa:	2a75      	cmp	r2, #117	; 0x75
    81fc:	d01f      	beq.n	823e <_printf_i+0xa2>
    81fe:	2a78      	cmp	r2, #120	; 0x78
    8200:	d033      	beq.n	826a <_printf_i+0xce>
    8202:	e0a6      	b.n	8352 <_printf_i+0x1b6>
    8204:	1c0e      	adds	r6, r1, #0
    8206:	681a      	ldr	r2, [r3, #0]
    8208:	3642      	adds	r6, #66	; 0x42
    820a:	1d11      	adds	r1, r2, #4
    820c:	6019      	str	r1, [r3, #0]
    820e:	6813      	ldr	r3, [r2, #0]
    8210:	7033      	strb	r3, [r6, #0]
    8212:	e0a1      	b.n	8358 <_printf_i+0x1bc>
    8214:	6821      	ldr	r1, [r4, #0]
    8216:	681a      	ldr	r2, [r3, #0]
    8218:	0608      	lsls	r0, r1, #24
    821a:	d406      	bmi.n	822a <_printf_i+0x8e>
    821c:	0649      	lsls	r1, r1, #25
    821e:	d504      	bpl.n	822a <_printf_i+0x8e>
    8220:	1d11      	adds	r1, r2, #4
    8222:	6019      	str	r1, [r3, #0]
    8224:	2300      	movs	r3, #0
    8226:	5ed5      	ldrsh	r5, [r2, r3]
    8228:	e002      	b.n	8230 <_printf_i+0x94>
    822a:	1d11      	adds	r1, r2, #4
    822c:	6019      	str	r1, [r3, #0]
    822e:	6815      	ldr	r5, [r2, #0]
    8230:	2d00      	cmp	r5, #0
    8232:	da3b      	bge.n	82ac <_printf_i+0x110>
    8234:	232d      	movs	r3, #45	; 0x2d
    8236:	9a04      	ldr	r2, [sp, #16]
    8238:	426d      	negs	r5, r5
    823a:	7013      	strb	r3, [r2, #0]
    823c:	e036      	b.n	82ac <_printf_i+0x110>
    823e:	6821      	ldr	r1, [r4, #0]
    8240:	681a      	ldr	r2, [r3, #0]
    8242:	0608      	lsls	r0, r1, #24
    8244:	d406      	bmi.n	8254 <_printf_i+0xb8>
    8246:	0649      	lsls	r1, r1, #25
    8248:	d504      	bpl.n	8254 <_printf_i+0xb8>
    824a:	6815      	ldr	r5, [r2, #0]
    824c:	1d11      	adds	r1, r2, #4
    824e:	6019      	str	r1, [r3, #0]
    8250:	b2ad      	uxth	r5, r5
    8252:	e002      	b.n	825a <_printf_i+0xbe>
    8254:	1d11      	adds	r1, r2, #4
    8256:	6019      	str	r1, [r3, #0]
    8258:	6815      	ldr	r5, [r2, #0]
    825a:	4b5a      	ldr	r3, [pc, #360]	; (83c4 <_printf_i+0x228>)
    825c:	7e22      	ldrb	r2, [r4, #24]
    825e:	9303      	str	r3, [sp, #12]
    8260:	270a      	movs	r7, #10
    8262:	2a6f      	cmp	r2, #111	; 0x6f
    8264:	d11d      	bne.n	82a2 <_printf_i+0x106>
    8266:	2708      	movs	r7, #8
    8268:	e01b      	b.n	82a2 <_printf_i+0x106>
    826a:	1c22      	adds	r2, r4, #0
    826c:	2178      	movs	r1, #120	; 0x78
    826e:	3245      	adds	r2, #69	; 0x45
    8270:	7011      	strb	r1, [r2, #0]
    8272:	4a55      	ldr	r2, [pc, #340]	; (83c8 <_printf_i+0x22c>)
    8274:	6819      	ldr	r1, [r3, #0]
    8276:	9203      	str	r2, [sp, #12]
    8278:	1d08      	adds	r0, r1, #4
    827a:	6822      	ldr	r2, [r4, #0]
    827c:	6018      	str	r0, [r3, #0]
    827e:	680d      	ldr	r5, [r1, #0]
    8280:	0610      	lsls	r0, r2, #24
    8282:	d402      	bmi.n	828a <_printf_i+0xee>
    8284:	0650      	lsls	r0, r2, #25
    8286:	d500      	bpl.n	828a <_printf_i+0xee>
    8288:	b2ad      	uxth	r5, r5
    828a:	07d3      	lsls	r3, r2, #31
    828c:	d502      	bpl.n	8294 <_printf_i+0xf8>
    828e:	2320      	movs	r3, #32
    8290:	431a      	orrs	r2, r3
    8292:	6022      	str	r2, [r4, #0]
    8294:	2710      	movs	r7, #16
    8296:	2d00      	cmp	r5, #0
    8298:	d103      	bne.n	82a2 <_printf_i+0x106>
    829a:	2320      	movs	r3, #32
    829c:	6822      	ldr	r2, [r4, #0]
    829e:	439a      	bics	r2, r3
    82a0:	6022      	str	r2, [r4, #0]
    82a2:	1c23      	adds	r3, r4, #0
    82a4:	2200      	movs	r2, #0
    82a6:	3343      	adds	r3, #67	; 0x43
    82a8:	701a      	strb	r2, [r3, #0]
    82aa:	e002      	b.n	82b2 <_printf_i+0x116>
    82ac:	270a      	movs	r7, #10
    82ae:	4b45      	ldr	r3, [pc, #276]	; (83c4 <_printf_i+0x228>)
    82b0:	9303      	str	r3, [sp, #12]
    82b2:	6863      	ldr	r3, [r4, #4]
    82b4:	60a3      	str	r3, [r4, #8]
    82b6:	2b00      	cmp	r3, #0
    82b8:	db03      	blt.n	82c2 <_printf_i+0x126>
    82ba:	2204      	movs	r2, #4
    82bc:	6821      	ldr	r1, [r4, #0]
    82be:	4391      	bics	r1, r2
    82c0:	6021      	str	r1, [r4, #0]
    82c2:	2d00      	cmp	r5, #0
    82c4:	d102      	bne.n	82cc <_printf_i+0x130>
    82c6:	9e04      	ldr	r6, [sp, #16]
    82c8:	2b00      	cmp	r3, #0
    82ca:	d00e      	beq.n	82ea <_printf_i+0x14e>
    82cc:	9e04      	ldr	r6, [sp, #16]
    82ce:	1c28      	adds	r0, r5, #0
    82d0:	1c39      	adds	r1, r7, #0
    82d2:	f7ff f85b 	bl	738c <__aeabi_uidivmod>
    82d6:	9b03      	ldr	r3, [sp, #12]
    82d8:	3e01      	subs	r6, #1
    82da:	5c5b      	ldrb	r3, [r3, r1]
    82dc:	1c28      	adds	r0, r5, #0
    82de:	7033      	strb	r3, [r6, #0]
    82e0:	1c39      	adds	r1, r7, #0
    82e2:	f7fe ffcd 	bl	7280 <__aeabi_uidiv>
    82e6:	1e05      	subs	r5, r0, #0
    82e8:	d1f1      	bne.n	82ce <_printf_i+0x132>
    82ea:	2f08      	cmp	r7, #8
    82ec:	d109      	bne.n	8302 <_printf_i+0x166>
    82ee:	6823      	ldr	r3, [r4, #0]
    82f0:	07db      	lsls	r3, r3, #31
    82f2:	d506      	bpl.n	8302 <_printf_i+0x166>
    82f4:	6863      	ldr	r3, [r4, #4]
    82f6:	6922      	ldr	r2, [r4, #16]
    82f8:	4293      	cmp	r3, r2
    82fa:	dc02      	bgt.n	8302 <_printf_i+0x166>
    82fc:	2330      	movs	r3, #48	; 0x30
    82fe:	3e01      	subs	r6, #1
    8300:	7033      	strb	r3, [r6, #0]
    8302:	9b04      	ldr	r3, [sp, #16]
    8304:	1b9b      	subs	r3, r3, r6
    8306:	6123      	str	r3, [r4, #16]
    8308:	e02b      	b.n	8362 <_printf_i+0x1c6>
    830a:	6809      	ldr	r1, [r1, #0]
    830c:	681a      	ldr	r2, [r3, #0]
    830e:	0608      	lsls	r0, r1, #24
    8310:	d407      	bmi.n	8322 <_printf_i+0x186>
    8312:	0649      	lsls	r1, r1, #25
    8314:	d505      	bpl.n	8322 <_printf_i+0x186>
    8316:	1d11      	adds	r1, r2, #4
    8318:	6019      	str	r1, [r3, #0]
    831a:	6813      	ldr	r3, [r2, #0]
    831c:	8aa2      	ldrh	r2, [r4, #20]
    831e:	801a      	strh	r2, [r3, #0]
    8320:	e004      	b.n	832c <_printf_i+0x190>
    8322:	1d11      	adds	r1, r2, #4
    8324:	6019      	str	r1, [r3, #0]
    8326:	6813      	ldr	r3, [r2, #0]
    8328:	6962      	ldr	r2, [r4, #20]
    832a:	601a      	str	r2, [r3, #0]
    832c:	2300      	movs	r3, #0
    832e:	9e04      	ldr	r6, [sp, #16]
    8330:	6123      	str	r3, [r4, #16]
    8332:	e016      	b.n	8362 <_printf_i+0x1c6>
    8334:	681a      	ldr	r2, [r3, #0]
    8336:	1d11      	adds	r1, r2, #4
    8338:	6019      	str	r1, [r3, #0]
    833a:	6816      	ldr	r6, [r2, #0]
    833c:	2100      	movs	r1, #0
    833e:	1c30      	adds	r0, r6, #0
    8340:	6862      	ldr	r2, [r4, #4]
    8342:	f000 f93b 	bl	85bc <memchr>
    8346:	2800      	cmp	r0, #0
    8348:	d001      	beq.n	834e <_printf_i+0x1b2>
    834a:	1b80      	subs	r0, r0, r6
    834c:	6060      	str	r0, [r4, #4]
    834e:	6863      	ldr	r3, [r4, #4]
    8350:	e003      	b.n	835a <_printf_i+0x1be>
    8352:	1c26      	adds	r6, r4, #0
    8354:	3642      	adds	r6, #66	; 0x42
    8356:	7032      	strb	r2, [r6, #0]
    8358:	2301      	movs	r3, #1
    835a:	6123      	str	r3, [r4, #16]
    835c:	2300      	movs	r3, #0
    835e:	9a04      	ldr	r2, [sp, #16]
    8360:	7013      	strb	r3, [r2, #0]
    8362:	9b07      	ldr	r3, [sp, #28]
    8364:	9805      	ldr	r0, [sp, #20]
    8366:	9300      	str	r3, [sp, #0]
    8368:	1c21      	adds	r1, r4, #0
    836a:	9b06      	ldr	r3, [sp, #24]
    836c:	aa09      	add	r2, sp, #36	; 0x24
    836e:	f7ff fea7 	bl	80c0 <_printf_common>
    8372:	1c43      	adds	r3, r0, #1
    8374:	d102      	bne.n	837c <_printf_i+0x1e0>
    8376:	2001      	movs	r0, #1
    8378:	4240      	negs	r0, r0
    837a:	e021      	b.n	83c0 <_printf_i+0x224>
    837c:	6923      	ldr	r3, [r4, #16]
    837e:	9805      	ldr	r0, [sp, #20]
    8380:	9906      	ldr	r1, [sp, #24]
    8382:	1c32      	adds	r2, r6, #0
    8384:	9d07      	ldr	r5, [sp, #28]
    8386:	47a8      	blx	r5
    8388:	1c43      	adds	r3, r0, #1
    838a:	d0f4      	beq.n	8376 <_printf_i+0x1da>
    838c:	6823      	ldr	r3, [r4, #0]
    838e:	079b      	lsls	r3, r3, #30
    8390:	d405      	bmi.n	839e <_printf_i+0x202>
    8392:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8394:	68e0      	ldr	r0, [r4, #12]
    8396:	4298      	cmp	r0, r3
    8398:	da12      	bge.n	83c0 <_printf_i+0x224>
    839a:	1c18      	adds	r0, r3, #0
    839c:	e010      	b.n	83c0 <_printf_i+0x224>
    839e:	2500      	movs	r5, #0
    83a0:	68e3      	ldr	r3, [r4, #12]
    83a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    83a4:	1a9b      	subs	r3, r3, r2
    83a6:	429d      	cmp	r5, r3
    83a8:	daf3      	bge.n	8392 <_printf_i+0x1f6>
    83aa:	1c22      	adds	r2, r4, #0
    83ac:	2301      	movs	r3, #1
    83ae:	9805      	ldr	r0, [sp, #20]
    83b0:	9906      	ldr	r1, [sp, #24]
    83b2:	3219      	adds	r2, #25
    83b4:	9e07      	ldr	r6, [sp, #28]
    83b6:	47b0      	blx	r6
    83b8:	1c43      	adds	r3, r0, #1
    83ba:	d0dc      	beq.n	8376 <_printf_i+0x1da>
    83bc:	3501      	adds	r5, #1
    83be:	e7ef      	b.n	83a0 <_printf_i+0x204>
    83c0:	b00b      	add	sp, #44	; 0x2c
    83c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83c4:	0000c77d 	.word	0x0000c77d
    83c8:	0000c78e 	.word	0x0000c78e

000083cc <_putc_r>:
    83cc:	b570      	push	{r4, r5, r6, lr}
    83ce:	1c05      	adds	r5, r0, #0
    83d0:	1c0e      	adds	r6, r1, #0
    83d2:	1c14      	adds	r4, r2, #0
    83d4:	2800      	cmp	r0, #0
    83d6:	d004      	beq.n	83e2 <_putc_r+0x16>
    83d8:	6983      	ldr	r3, [r0, #24]
    83da:	2b00      	cmp	r3, #0
    83dc:	d101      	bne.n	83e2 <_putc_r+0x16>
    83de:	f7ff fba5 	bl	7b2c <__sinit>
    83e2:	4b15      	ldr	r3, [pc, #84]	; (8438 <_putc_r+0x6c>)
    83e4:	429c      	cmp	r4, r3
    83e6:	d101      	bne.n	83ec <_putc_r+0x20>
    83e8:	686c      	ldr	r4, [r5, #4]
    83ea:	e008      	b.n	83fe <_putc_r+0x32>
    83ec:	4b13      	ldr	r3, [pc, #76]	; (843c <_putc_r+0x70>)
    83ee:	429c      	cmp	r4, r3
    83f0:	d101      	bne.n	83f6 <_putc_r+0x2a>
    83f2:	68ac      	ldr	r4, [r5, #8]
    83f4:	e003      	b.n	83fe <_putc_r+0x32>
    83f6:	4b12      	ldr	r3, [pc, #72]	; (8440 <_putc_r+0x74>)
    83f8:	429c      	cmp	r4, r3
    83fa:	d100      	bne.n	83fe <_putc_r+0x32>
    83fc:	68ec      	ldr	r4, [r5, #12]
    83fe:	68a3      	ldr	r3, [r4, #8]
    8400:	3b01      	subs	r3, #1
    8402:	60a3      	str	r3, [r4, #8]
    8404:	2b00      	cmp	r3, #0
    8406:	da10      	bge.n	842a <_putc_r+0x5e>
    8408:	69a2      	ldr	r2, [r4, #24]
    840a:	4293      	cmp	r3, r2
    840c:	db07      	blt.n	841e <_putc_r+0x52>
    840e:	6823      	ldr	r3, [r4, #0]
    8410:	701e      	strb	r6, [r3, #0]
    8412:	6823      	ldr	r3, [r4, #0]
    8414:	7819      	ldrb	r1, [r3, #0]
    8416:	290a      	cmp	r1, #10
    8418:	d10a      	bne.n	8430 <_putc_r+0x64>
    841a:	1c28      	adds	r0, r5, #0
    841c:	e001      	b.n	8422 <_putc_r+0x56>
    841e:	1c28      	adds	r0, r5, #0
    8420:	1c31      	adds	r1, r6, #0
    8422:	1c22      	adds	r2, r4, #0
    8424:	f7ff f9be 	bl	77a4 <__swbuf_r>
    8428:	e005      	b.n	8436 <_putc_r+0x6a>
    842a:	6823      	ldr	r3, [r4, #0]
    842c:	701e      	strb	r6, [r3, #0]
    842e:	6823      	ldr	r3, [r4, #0]
    8430:	1c5a      	adds	r2, r3, #1
    8432:	6022      	str	r2, [r4, #0]
    8434:	7818      	ldrb	r0, [r3, #0]
    8436:	bd70      	pop	{r4, r5, r6, pc}
    8438:	0000c70c 	.word	0x0000c70c
    843c:	0000c72c 	.word	0x0000c72c
    8440:	0000c74c 	.word	0x0000c74c

00008444 <_sbrk_r>:
    8444:	b538      	push	{r3, r4, r5, lr}
    8446:	2300      	movs	r3, #0
    8448:	4c06      	ldr	r4, [pc, #24]	; (8464 <_sbrk_r+0x20>)
    844a:	1c05      	adds	r5, r0, #0
    844c:	1c08      	adds	r0, r1, #0
    844e:	6023      	str	r3, [r4, #0]
    8450:	f7f9 fa16 	bl	1880 <_sbrk>
    8454:	1c43      	adds	r3, r0, #1
    8456:	d103      	bne.n	8460 <_sbrk_r+0x1c>
    8458:	6823      	ldr	r3, [r4, #0]
    845a:	2b00      	cmp	r3, #0
    845c:	d000      	beq.n	8460 <_sbrk_r+0x1c>
    845e:	602b      	str	r3, [r5, #0]
    8460:	bd38      	pop	{r3, r4, r5, pc}
    8462:	46c0      	nop			; (mov r8, r8)
    8464:	20002220 	.word	0x20002220

00008468 <__sread>:
    8468:	b538      	push	{r3, r4, r5, lr}
    846a:	1c0c      	adds	r4, r1, #0
    846c:	250e      	movs	r5, #14
    846e:	5f49      	ldrsh	r1, [r1, r5]
    8470:	f000 f8b0 	bl	85d4 <_read_r>
    8474:	2800      	cmp	r0, #0
    8476:	db03      	blt.n	8480 <__sread+0x18>
    8478:	6d63      	ldr	r3, [r4, #84]	; 0x54
    847a:	181b      	adds	r3, r3, r0
    847c:	6563      	str	r3, [r4, #84]	; 0x54
    847e:	e003      	b.n	8488 <__sread+0x20>
    8480:	89a2      	ldrh	r2, [r4, #12]
    8482:	4b02      	ldr	r3, [pc, #8]	; (848c <__sread+0x24>)
    8484:	4013      	ands	r3, r2
    8486:	81a3      	strh	r3, [r4, #12]
    8488:	bd38      	pop	{r3, r4, r5, pc}
    848a:	46c0      	nop			; (mov r8, r8)
    848c:	ffffefff 	.word	0xffffefff

00008490 <__swrite>:
    8490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8492:	1c1e      	adds	r6, r3, #0
    8494:	898b      	ldrh	r3, [r1, #12]
    8496:	1c05      	adds	r5, r0, #0
    8498:	1c0c      	adds	r4, r1, #0
    849a:	1c17      	adds	r7, r2, #0
    849c:	05db      	lsls	r3, r3, #23
    849e:	d505      	bpl.n	84ac <__swrite+0x1c>
    84a0:	230e      	movs	r3, #14
    84a2:	5ec9      	ldrsh	r1, [r1, r3]
    84a4:	2200      	movs	r2, #0
    84a6:	2302      	movs	r3, #2
    84a8:	f000 f874 	bl	8594 <_lseek_r>
    84ac:	89a2      	ldrh	r2, [r4, #12]
    84ae:	4b05      	ldr	r3, [pc, #20]	; (84c4 <__swrite+0x34>)
    84b0:	1c28      	adds	r0, r5, #0
    84b2:	4013      	ands	r3, r2
    84b4:	81a3      	strh	r3, [r4, #12]
    84b6:	1c3a      	adds	r2, r7, #0
    84b8:	230e      	movs	r3, #14
    84ba:	5ee1      	ldrsh	r1, [r4, r3]
    84bc:	1c33      	adds	r3, r6, #0
    84be:	f000 f81f 	bl	8500 <_write_r>
    84c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84c4:	ffffefff 	.word	0xffffefff

000084c8 <__sseek>:
    84c8:	b538      	push	{r3, r4, r5, lr}
    84ca:	1c0c      	adds	r4, r1, #0
    84cc:	250e      	movs	r5, #14
    84ce:	5f49      	ldrsh	r1, [r1, r5]
    84d0:	f000 f860 	bl	8594 <_lseek_r>
    84d4:	89a3      	ldrh	r3, [r4, #12]
    84d6:	1c42      	adds	r2, r0, #1
    84d8:	d103      	bne.n	84e2 <__sseek+0x1a>
    84da:	4a05      	ldr	r2, [pc, #20]	; (84f0 <__sseek+0x28>)
    84dc:	4013      	ands	r3, r2
    84de:	81a3      	strh	r3, [r4, #12]
    84e0:	e004      	b.n	84ec <__sseek+0x24>
    84e2:	2280      	movs	r2, #128	; 0x80
    84e4:	0152      	lsls	r2, r2, #5
    84e6:	4313      	orrs	r3, r2
    84e8:	81a3      	strh	r3, [r4, #12]
    84ea:	6560      	str	r0, [r4, #84]	; 0x54
    84ec:	bd38      	pop	{r3, r4, r5, pc}
    84ee:	46c0      	nop			; (mov r8, r8)
    84f0:	ffffefff 	.word	0xffffefff

000084f4 <__sclose>:
    84f4:	b508      	push	{r3, lr}
    84f6:	230e      	movs	r3, #14
    84f8:	5ec9      	ldrsh	r1, [r1, r3]
    84fa:	f000 f815 	bl	8528 <_close_r>
    84fe:	bd08      	pop	{r3, pc}

00008500 <_write_r>:
    8500:	b538      	push	{r3, r4, r5, lr}
    8502:	1c05      	adds	r5, r0, #0
    8504:	2000      	movs	r0, #0
    8506:	4c07      	ldr	r4, [pc, #28]	; (8524 <_write_r+0x24>)
    8508:	6020      	str	r0, [r4, #0]
    850a:	1c08      	adds	r0, r1, #0
    850c:	1c11      	adds	r1, r2, #0
    850e:	1c1a      	adds	r2, r3, #0
    8510:	f7f9 ff4c 	bl	23ac <_write>
    8514:	1c43      	adds	r3, r0, #1
    8516:	d103      	bne.n	8520 <_write_r+0x20>
    8518:	6823      	ldr	r3, [r4, #0]
    851a:	2b00      	cmp	r3, #0
    851c:	d000      	beq.n	8520 <_write_r+0x20>
    851e:	602b      	str	r3, [r5, #0]
    8520:	bd38      	pop	{r3, r4, r5, pc}
    8522:	46c0      	nop			; (mov r8, r8)
    8524:	20002220 	.word	0x20002220

00008528 <_close_r>:
    8528:	b538      	push	{r3, r4, r5, lr}
    852a:	2300      	movs	r3, #0
    852c:	4c06      	ldr	r4, [pc, #24]	; (8548 <_close_r+0x20>)
    852e:	1c05      	adds	r5, r0, #0
    8530:	1c08      	adds	r0, r1, #0
    8532:	6023      	str	r3, [r4, #0]
    8534:	f7f9 f9b6 	bl	18a4 <_close>
    8538:	1c43      	adds	r3, r0, #1
    853a:	d103      	bne.n	8544 <_close_r+0x1c>
    853c:	6823      	ldr	r3, [r4, #0]
    853e:	2b00      	cmp	r3, #0
    8540:	d000      	beq.n	8544 <_close_r+0x1c>
    8542:	602b      	str	r3, [r5, #0]
    8544:	bd38      	pop	{r3, r4, r5, pc}
    8546:	46c0      	nop			; (mov r8, r8)
    8548:	20002220 	.word	0x20002220

0000854c <_fstat_r>:
    854c:	b538      	push	{r3, r4, r5, lr}
    854e:	2300      	movs	r3, #0
    8550:	4c06      	ldr	r4, [pc, #24]	; (856c <_fstat_r+0x20>)
    8552:	1c05      	adds	r5, r0, #0
    8554:	1c08      	adds	r0, r1, #0
    8556:	1c11      	adds	r1, r2, #0
    8558:	6023      	str	r3, [r4, #0]
    855a:	f7f9 f9a7 	bl	18ac <_fstat>
    855e:	1c43      	adds	r3, r0, #1
    8560:	d103      	bne.n	856a <_fstat_r+0x1e>
    8562:	6823      	ldr	r3, [r4, #0]
    8564:	2b00      	cmp	r3, #0
    8566:	d000      	beq.n	856a <_fstat_r+0x1e>
    8568:	602b      	str	r3, [r5, #0]
    856a:	bd38      	pop	{r3, r4, r5, pc}
    856c:	20002220 	.word	0x20002220

00008570 <_isatty_r>:
    8570:	b538      	push	{r3, r4, r5, lr}
    8572:	2300      	movs	r3, #0
    8574:	4c06      	ldr	r4, [pc, #24]	; (8590 <_isatty_r+0x20>)
    8576:	1c05      	adds	r5, r0, #0
    8578:	1c08      	adds	r0, r1, #0
    857a:	6023      	str	r3, [r4, #0]
    857c:	f7f9 f99c 	bl	18b8 <_isatty>
    8580:	1c43      	adds	r3, r0, #1
    8582:	d103      	bne.n	858c <_isatty_r+0x1c>
    8584:	6823      	ldr	r3, [r4, #0]
    8586:	2b00      	cmp	r3, #0
    8588:	d000      	beq.n	858c <_isatty_r+0x1c>
    858a:	602b      	str	r3, [r5, #0]
    858c:	bd38      	pop	{r3, r4, r5, pc}
    858e:	46c0      	nop			; (mov r8, r8)
    8590:	20002220 	.word	0x20002220

00008594 <_lseek_r>:
    8594:	b538      	push	{r3, r4, r5, lr}
    8596:	1c05      	adds	r5, r0, #0
    8598:	2000      	movs	r0, #0
    859a:	4c07      	ldr	r4, [pc, #28]	; (85b8 <_lseek_r+0x24>)
    859c:	6020      	str	r0, [r4, #0]
    859e:	1c08      	adds	r0, r1, #0
    85a0:	1c11      	adds	r1, r2, #0
    85a2:	1c1a      	adds	r2, r3, #0
    85a4:	f7f9 f98a 	bl	18bc <_lseek>
    85a8:	1c43      	adds	r3, r0, #1
    85aa:	d103      	bne.n	85b4 <_lseek_r+0x20>
    85ac:	6823      	ldr	r3, [r4, #0]
    85ae:	2b00      	cmp	r3, #0
    85b0:	d000      	beq.n	85b4 <_lseek_r+0x20>
    85b2:	602b      	str	r3, [r5, #0]
    85b4:	bd38      	pop	{r3, r4, r5, pc}
    85b6:	46c0      	nop			; (mov r8, r8)
    85b8:	20002220 	.word	0x20002220

000085bc <memchr>:
    85bc:	b2c9      	uxtb	r1, r1
    85be:	1882      	adds	r2, r0, r2
    85c0:	4290      	cmp	r0, r2
    85c2:	d004      	beq.n	85ce <memchr+0x12>
    85c4:	7803      	ldrb	r3, [r0, #0]
    85c6:	428b      	cmp	r3, r1
    85c8:	d002      	beq.n	85d0 <memchr+0x14>
    85ca:	3001      	adds	r0, #1
    85cc:	e7f8      	b.n	85c0 <memchr+0x4>
    85ce:	2000      	movs	r0, #0
    85d0:	4770      	bx	lr
	...

000085d4 <_read_r>:
    85d4:	b538      	push	{r3, r4, r5, lr}
    85d6:	1c05      	adds	r5, r0, #0
    85d8:	2000      	movs	r0, #0
    85da:	4c07      	ldr	r4, [pc, #28]	; (85f8 <_read_r+0x24>)
    85dc:	6020      	str	r0, [r4, #0]
    85de:	1c08      	adds	r0, r1, #0
    85e0:	1c11      	adds	r1, r2, #0
    85e2:	1c1a      	adds	r2, r3, #0
    85e4:	f7f9 fed0 	bl	2388 <_read>
    85e8:	1c43      	adds	r3, r0, #1
    85ea:	d103      	bne.n	85f4 <_read_r+0x20>
    85ec:	6823      	ldr	r3, [r4, #0]
    85ee:	2b00      	cmp	r3, #0
    85f0:	d000      	beq.n	85f4 <_read_r+0x20>
    85f2:	602b      	str	r3, [r5, #0]
    85f4:	bd38      	pop	{r3, r4, r5, pc}
    85f6:	46c0      	nop			; (mov r8, r8)
    85f8:	20002220 	.word	0x20002220
    85fc:	000005be 	.word	0x000005be
    8600:	000005c6 	.word	0x000005c6
    8604:	000005ce 	.word	0x000005ce
    8608:	000005d6 	.word	0x000005d6
    860c:	000005e6 	.word	0x000005e6
    8610:	000005de 	.word	0x000005de

00008614 <observer_app_gap_cb>:
    8614:	00000000 00000585 00000b61 00000000     ........a.......
	...
    8668:	454c420a 61654220 206e6f63 65766461     .BLE Beacon adve
    8678:	73697472 6e656d65 61642074 73206174     rtisement data s
    8688:	66207465 656c6961 303d2064 0a782578     et failed =0x%x.
    8698:	00000000 454c420a 61654220 206e6f63     .....BLE Beacon 
    86a8:	65766461 73697472 6e656d65 61642074     advertisement da
    86b8:	73206174 00007465 20454c42 63616542     ta set..BLE Beac
    86c8:	61206e6f 72657664 65736974 746e656d     on advertisement
    86d8:	69616620 2064656c 2578303d 00000a78      failed =0x%x...
    86e8:	454c420a 61654220 206e6f63 65766461     .BLE Beacon adve
    86f8:	73697472 6e656d65 6b6f2074 00000000     rtisement ok....
    8708:	0000000d 38322d25 00000073 0a0d0a0d     ....%-28s.......
    8718:	65766441 73697472 6e656d65 79742074     Advertisement ty
    8728:	00006570 20202020 0020203a 5f564441     pe..    :  .ADV_
    8738:	00444e49 5f564441 45524944 495f5443     IND.ADV_DIRECT_I
    8748:	0000444e 5f564441 4e414353 4c42414e     ND..ADV_SCANNABL
    8758:	4e555f45 45524944 44455443 00000000     E_UNDIRECTED....
    8768:	5f564441 434e4f4e 5f4e4e4f 49444e55     ADV_NONCONN_UNDI
    8778:	54434552 00004445 5f564441 4e414353     RECTED..ADV_SCAN
    8788:	5345525f 534e4f50 00000045 55200a0d     _RESPONSE..... U
    8798:	6f6e6b6e 00006e77 69766544 61206563     nknown..Device a
    87a8:	65726464 74207373 00657079 4c425550     ddress type.PUBL
    87b8:	415f4349 45524444 00005353 54415453     IC_ADDRESS..STAT
    87c8:	525f4349 4f444e41 44415f4d 53455244     IC_RANDOM_ADDRES
    87d8:	00000053 444e4152 525f4d4f 4c4f5345     S...RANDOM_RESOL
    87e8:	4c424156 52505f45 54415649 44415f45     VABLE_PRIVATE_AD
    87f8:	53455244 00000053 444e4152 4e5f4d4f     DRESS...RANDOM_N
    8808:	525f4e4f 4c4f5345 4c424156 52505f45     ON_RESOLVABLE_PR
    8818:	54415649 44415f45 53455244 00000053     IVATE_ADDRESS...
    8828:	6b6e5520 6e776f6e 00000000 69766544      Unknown....Devi
    8838:	61206563 65726464 00007373 3020203a     ce address..:  0
    8848:	00000078 49535352 00000000 2520203a     x...RSSI....:  %
    8858:	00000064 67616c46 00000073 4c5f454c     d...Flags...LE_L
    8868:	54494d49 445f4445 4f435349 41524556     IMITED_DISCOVERA
    8878:	5f454c42 45444f4d 00000020 475f454c     BLE_MODE ...LE_G
    8888:	52454e45 445f4c41 4f435349 41524556     ENERAL_DISCOVERA
    8898:	5f454c42 45444f4d 00000020 44455242     BLE_MODE ...BRED
    88a8:	4f4e5f52 55535f54 524f5050 20444554     R_NOT_SUPPORTED 
    88b8:	00000000 425f454c 52444552 5041435f     ....LE_BREDR_CAP
    88c8:	454c4241 4e4f435f 4c4f5254 2052454c     ABLE_CONTROLLER 
    88d8:	00000000 425f454c 52444552 5041435f     ....LE_BREDR_CAP
    88e8:	454c4241 534f485f 00002054 706d6f43     ABLE_HOST ..Comp
    88f8:	6574656c 6236315f 735f7469 69767265     lete_16bit_servi
    8908:	755f6563 73646975 00000000 6f636e49     ce_uuids....Inco
    8918:	656c706d 315f6574 74696236 7265735f     mplete_16bit_ser
    8928:	75755f76 00736469 30257830 00207832     v_uuids.0x%02x .
    8938:	706d6f43 6574656c 6232335f 735f7469     Complete_32bit_s
    8948:	69767265 755f6563 73646975 00000000     ervice_uuids....
    8958:	25783020 00783230 706d6f43 6574656c      0x%02x.Complete
    8968:	3832315f 5f746962 76726573 5f656369     _128bit_service_
    8978:	64697575 00000000 6f436e49 656c706d     uuid....InComple
    8988:	315f6574 69623832 65735f74 755f7672     te_128bit_serv_u
    8998:	73646975 00000000 726f6853 646e6574     uids....Shortend
    89a8:	636f4c20 4e206c61 00656d61 706d6f43      Local Name.Comp
    89b8:	6574656c 636f4c20 4e206c61 00656d61     lete Local Name.
    89c8:	756e614d 74636166 72657275 65705320     Manufacturer Spe
    89d8:	69666963 61442063 00006174 65707041     cific Data..Appe
    89e8:	6e617261 00006563 30257830 00007832     arance..0x%02x..
    89f8:	70207854 7265776f 76656c20 00006c65     Tx power level..
    8a08:	65766441 73697472 6e656d65 6e492074     Advertisement In
    8a18:	76726574 00006c61 6e616353 6d6f4320     terval..Scan Com
    8a28:	74656c70 54202e65 6c61746f 2e6f4e20     plete. Total No.
    8a38:	6420666f 63697665 63732065 656e6e61     of device scanne
    8a48:	64253a64 00000000 682f2e2e 732f6c61     d:%d....../hal/s
    8a58:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
    8a68:	732f6c61 682f6372 745f6c61 72656d69     al/src/hal_timer
    8a78:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
    8a88:	755f6c61 74726173 7973615f 632e636e     al_usart_async.c
    8a98:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    8aa8:	755f6c61 74726173 6e79735f 00632e63     al_usart_sync.c.
    8ab8:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    8ac8:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...
    8ad8:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    8ae8:	6974752f 725f736c 62676e69 65666675     /utils_ringbuffe
    8af8:	00632e72 682f2e2e 632f6c70 2f65726f     r.c.../hpl/core/
    8b08:	5f6c7068 65726f63 70306d5f 5f73756c     hpl_core_m0plus_
    8b18:	65736162 0000632e                       base.c..

00008b20 <_map>:
    8b20:	00000002 00000002 682f2e2e 652f6c70     ........../hpl/e
    8b30:	682f6369 655f6c70 5f326369 30303176     ic/hpl_eic2_v100
    8b40:	0000632e 682f2e2e 702f6c70 2f74726f     .c..../hpl/port/
    8b50:	5f6c7068 74726f70 3032765f 00632e31     hpl_port_v201.c.

00008b60 <_i2cms>:
	...

00008b74 <_usarts>:
    8b74:	00000000 40120004 00030000 0000f629     .......@....)...
    8b84:	00000000 00000003 40100004 00030000     ...........@....
    8b94:	0000f629 00000000 00000004 40100004     )..............@
    8ba4:	00030000 0000f629 00000000              ....).......

00008bb0 <sercomspi_regs>:
	...
    8bc4:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    8bd4:	65735f6c 6d6f6372 3232765f 00632e30     l_sercom_v220.c.

00008be4 <_tcs>:
    8be4:	00000000 00000708 00000000 00000000     ................
    8bf4:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    8c04:	63745f6c 32765f32 625f3030 2e657361     l_tc2_v200_base.
    8c14:	00000063 00002738 0000273a 00002720     c...8'..:'.. '..
    8c24:	00002720 00002720 00002738 00002720      '.. '..8'.. '..
    8c34:	00002720 00002f3a 00002fae 00002f22      '..:/.../.."/..
    8c44:	00002fb4 00002f28 00002f2e 00002f34     ./..(/.../..4/..
    8c54:	00003604 00003604 00003604 00003604     .6...6...6...6..
    8c64:	00003604 00003604 00003604 00003604     .6...6...6...6..
    8c74:	00003604 00003604 00003604 00003604     .6...6...6...6..
    8c84:	00003604 00003604 00003604 00003604     .6...6...6...6..
    8c94:	00003604 00003604 00003604 00003622     .6...6...6.."6..
    8ca4:	00003622 00003622 00003622 00003622     "6.."6.."6.."6..
    8cb4:	00003622 00003622 00003622 00003622     "6.."6.."6.."6..
    8cc4:	00003622 00003644 00003644 00003644     "6..D6..D6..D6..
    8cd4:	00003644 00003644 00003644 00003644     D6..D6..D6..D6..
    8ce4:	00003644 00003644 00003644 00003666     D6..D6..D6..f6..
    8cf4:	00003666 00003666 00003666 00003666     f6..f6..f6..f6..
    8d04:	00003666 00003680 00003680 00003680     f6...6...6...6..
    8d14:	00003680 00003680 00003680 00003680     .6...6...6...6..
    8d24:	00003680 00003680 0000369a 0000369a     .6...6...6...6..
    8d34:	000036bc 000036bc 000036bc 34333231     .6...6...6..1234
    8d44:	00003635 efcdab00 00efcdab              56..........

00008d50 <ble_mgr_gap_handle>:
    8d50:	00002679 0000282d 00002691 00000000     y&..-(...&......
    8d60:	00000000 00003285 000026e9 0000268d     .....2...&...&..
    8d70:	000029cd 000028ad 00002bcd 000029e5     .)...(...+...)..
    8d80:	00002d21 00002e21 00002771 000034c5     !-..!...q'...4..
	...

00008d9c <ble_mgr_gatt_server_handle>:
	...
    8db4:	0000267d 000026b9 00002681 00000000     }&...&...&......
    8dc4:	b2d60600 f8f005f0 00000000 6e616353     ............Scan
    8dd4:	676e696e 61662020 64656c69 00000000     ning  failed....
    8de4:	2055544d 6e616843 46206567 656c6961     MTU Change Faile
    8df4:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
    8e04:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
    8e14:	253a6e6f 00000064 69766544 64206563     on:%d...Device d
    8e24:	6f637369 63656e6e 20646574 73616552     isconnected Reas
    8e34:	303a6e6f 32302578 61482078 656c646e     on:0x%02x Handle
    8e44:	2578303d 00000078 72636e45 69747079     =0x%x...Encrypti
    8e54:	66206e6f 656c6961 00000064 72636e45     on failed...Encr
    8e64:	69747079 63206e6f 6c706d6f 64657465     yption completed
    8e74:	63757320 73736563 6c6c7566 00000079      successfully...
    8e84:	20454c42 69766544 6e206563 6620746f     BLE Device not f
    8e94:	646e756f 636e6520 74707972 206e6f69     ound encryption 
    8ea4:	6f666e69 00000000 6f666e49 78616d3a     info....Info:max
    8eb4:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
    8ec4:	69766564 72206563 68636165 2e2e6465     device reached..
    8ed4:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
    8ee4:	6c696146 74206465 7473206f 7320706f     Failed to stop s
    8ef4:	6e6e6163 00676e69 72696150 20676e69     canning.Pairing 
    8f04:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
    8f14:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
    8f24:	52207463 65757165 46207473 656c6961     ct Request Faile
    8f34:	00000064 72696150 20676e69 636f7270     d...Pairing proc
    8f44:	72756465 6f632065 656c706d 20646574     edure completed 
    8f54:	63637573 66737365 796c6c75 00000000     successfully....
    8f64:	20454c42 69766544 6e206563 6620746f     BLE Device not f
    8f74:	646e756f 206f7420 726f7473 68742065     ound to store th
    8f84:	61702065 6e697269 6e692067 00006f66     e pairing info..
    8f94:	72636e45 69747079 4e206e6f 7320746f     Encryption Not s
    8fa4:	74726174 00006465 76616c53 65532065     tarted..Slave Se
    8fb4:	69727563 52207974 2d207165 74754120     curity Req - Aut
    8fc4:	746e6568 74616369 206e6f69 6c696146     hentication Fail
    8fd4:	00006465 72696150 71655220 74736575     ed..Pair Request
    8fe4:	41202d20 65687475 6369746e 6f697461      - Authenticatio
    8ff4:	6146206e 64656c69 00000000 65746e45     n Failed....Ente
    9004:	68742072 61502065 656b7373 2d362879     r the Passkey(6-
    9014:	69676944 69202974 6554206e 6e696d72     Digit) in Termin
    9024:	003a6c61 206e6950 656d6954 0074756f     al:.Pin Timeout.
    9034:	63736944 656e6e6f 6e697463 2e2e2067     Disconnecting ..
    9044:	0000002e 61656c50 45206573 7265746e     ....Please Enter
    9054:	65687420 6c6f6620 69776f6c 5020676e      the following P
    9064:	2d737361 65646f63 206e6f28 6568746f     ass-code(on othe
    9074:	65442072 65636976 00003a29 72696150     r Device):..Pair
    9084:	79656b2d 70657220 6620796c 656c6961     -key reply faile
    9094:	00000064 20424f4f 74616546 20657275     d...OOB Feature 
    90a4:	20746f4e 70707573 6574726f 00000064     Not supported...
    90b4:	72696150 20676e69 6f666e69 74616d72     Pairing informat
    90c4:	206e6f69 7020666f 20726565 69766564     ion of peer devi
    90d4:	69206563 6f6e2073 76612074 616c6961     ce is not availa
    90e4:	2e656c62 00000000 61656c50 75206573     ble.....Please u
    90f4:	6961706e 68742072 65642065 65636976     npair the device
    9104:	6f726620 6570206d 64207265 63697665      from peer devic
    9114:	6f6d2865 656c6962 65732029 6e697474     e(mobile) settin
    9124:	6d207367 20756e65 20646e61 72617473     gs menu and star
    9134:	61702074 6e697269 67612067 006e6961     t pairing again.
    9144:	72636e45 69747079 52206e6f 65757165     Encryption Reque
    9154:	52207473 796c7065 69614620 0064656c     st Reply Failed.
    9164:	74696e49 696c6169 676e697a 4c544220     Initializing BTL
    9174:	30303143 00000030 434c5442 30303031     C1000...BTLC1000
    9184:	696e4920 6c616974 74617a69 206e6f69      Initialization 
    9194:	6c696166 00006465 61656c50 63206573     failed..Please c
    91a4:	6b636568 65687420 776f7020 61207265     heck the power a
    91b4:	6320646e 656e6e6f 6f697463 202f206e     nd connection / 
    91c4:	64726168 65726177 6e6f6320 7463656e     hardware connect
    91d4:	0000726f 506e6957 00737569 69766544     or..WinPius.Devi
    91e4:	6e206563 20656d61 20746573 6c696166     ce name set fail
    91f4:	00006465 61204442 65726464 67207373     ed..BD address g
    9204:	66207465 656c6961 00000064 41204442     et failed...BD A
    9214:	65726464 303a7373 32302578 32302558     ddress:0x%02X%02
    9224:	32302558 32302558 32302558 32302558     X%02X%02X%02X%02
    9234:	41202c58 65726464 54207373 3a657079     X, Address Type:
    9244:	00006425 20746553 20454c42 69766544     %d..Set BLE Devi
    9254:	63206563 69666e6f 61727567 6e6f6974     ce configuration
    9264:	69616620 0064656c 20746553 20454c42      failed.Set BLE 
    9274:	69766544 41206563 65726464 66207373     Device Address f
    9284:	656c6961 00000064 6e616353 676e696e     ailed...Scanning
    9294:	502e2e2e 7361656c 61772065 2e2e7469     ...Please wait..
    92a4:	0000002e 76616c53 65732065 69727563     ....Slave securi
    92b4:	72207974 65757165 66207473 656c6961     ty request faile
    92c4:	00000064 6e6e6f43 65746365 6f742064     d...Connected to
    92d4:	65657020 65642072 65636976 74697720      peer device wit
    92e4:	64612068 73657264 78302073 78323025     h address 0x%02x
    92f4:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
    9304:	78323025 00000000 6e6e6f43 69746365     %02x....Connecti
    9314:	48206e6f 6c646e61 64252065 00000000     on Handle %d....
    9324:	6f736552 6e69766c 61522067 6d6f646e     Resolving Random
    9334:	64646120 73736572 69616620 2a64656c      address failed*
    9344:	0000002a 2078614d 626d756e 6f207265     *...Max number o
    9354:	6f632066 63656e6e 6e6f6974 61657220     f connection rea
    9364:	64656863 6425203a 3d3d3d20 7369443e     ched: %d ===>Dis
    9374:	6e6e6f63 69746365 2e2e676e 0000002e     connecting......
    9384:	69766544 43206563 656e6e6f 6f697463     Device Connectio
    9394:	6146206e 64656c69 53202d20 75746174     n Failed - Statu
    93a4:	25203a73 00000064 20454c42 65766441     s: %d...BLE Adve
    93b4:	73697472 6e656d65 61642074 73206174     rtisement data s
    93c4:	66207465 656c6961 00000064              et failed...

000093d0 <__FUNCTION__.7971>:
    93d0:	646e6168 625f656c 655f656c 746e6576     handle_ble_event
    93e0:	42494c00 20294528 36312d25 30252873     .LIB(E) %-16s(%0
    93f0:	20296433 73323325 3a202928 2e2e0020     3d) %32s() : ...
    9400:	2f2e2e2f 2e2f2e2e 6c622f2e 74735f65     /../../../ble_st
    9410:	2f6b6361 5f697061 65726f63 6576652f     ack/api_core/eve
    9420:	632e746e 686e5500 6c646e61 0a3a6465     nt.c.Unhandled:.
    9430:	63727309 3a64695f 30257830 090a7834     .src_id:0x%04x..
    9440:	5f67736d 303a6469 34302578 41000a78     msg_id:0x%04x..A
    9450:	6c656d74 726f4320 74612e70                       tmel Corp.

0000945a <__FUNCTION__.7955>:
    945a:	625f7461 735f656c 645f7465 635f7665     at_ble_set_dev_c
    946a:	69666e6f 74610067                                onfig.

00009470 <__FUNCTION__.8096>:
    9470:	625f7461 635f656c 5f6e6e6f 61647075     at_ble_conn_upda
    9480:	725f6574 796c7065 01030000                       te_reply.

00009489 <CSWTCH.64>:
    9489:	03010300 03030303 03030303 2e020303     ................
    9499:	2e2e2f2e 2f2e2e2f 622f2e2e 735f656c     ./../../../ble_s
    94a9:	6b636174 6970612f 726f635f 61672f65     tack/api_core/ga
    94b9:	00632e70 61766e49 2064696c 61726150     p.c.Invalid Para
    94c9:	6574656d 65207372 726f7272 61745300     meters error.Sta
    94d9:	20737574 7830203a 58323025 6e49000a     tus : 0x%02X..In
    94e9:	696c6176 61502064 656d6172 73726574     valid Parameters
    94f9:	6b6e5500 6e776f6e 64646120 73736572     .Unknown address
    9509:	70797420 78302065 3e32253c 55000a0d      type 0x<%2>...U
    9519:	6f6e6b6e 64206e77 63697665 6f722065     nknown device ro
    9529:	3020656c 32253c78 000a0d3e 2055544d     le 0x<%2>...MTU 
    9539:	756c6156 78652065 64656563 78616d20     Value exceed max
    9549:	6d756d69 6c6c6120 6465776f 6c617620     imum allowed val
    9559:	0d206575 6e69000a 66726574 5f656361     ue ...interface_
    9569:	74696e69 2e2e2e20 25783020 0d583230     init ... 0x%02X.
    9579:	6e55000a 656c6261 206f7420 65736572     ..Unable to rese
    9589:	253c2074 3e583230 61000a0d 6c625f74     t <%02X>...at_bl
    9599:	65735f65 65645f74 6f635f76 6769666e     e_set_dev_config
    95a9:	2e2e2e20 25783020 0d583230 6e55000a      ... 0x%02X...Un
    95b9:	656c6261 206f7420 20746573 61666564     able to set defa
    95c9:	20746c75 69766564 6e206563 20656d61     ult device name 
    95d9:	3230253c 0a0d3e58 746e4900 61767265     <%02X>...Interva
    95e9:	6163206c 2074276e 30206562 20726f20     l can't be 0 or 
    95f9:	7373656c 4e000a0d 204c4c55 6e696f70     less...NULL poin
    9609:	0d726574 554e000a 70204c4c 746e696f     ter...NULL point
    9619:	65207265 726f7272 766e4900 64696c61     er error.Invalid
    9629:	76656420 20656369 656d616e 69727720      device name wri
    9639:	70206574 696d7265 6f697373 6573006e     te permission.se
    9649:	65642074 65636976 6e6f6320 20676966     t device config 
    9659:	6c696166 202c6465 74617473 203a7375     failed, status: 
    9669:	3e64253c 766e4900 64696c61 6e6f4320     <%d>.Invalid Con
    9679:	6f4d202e 3c206564 0d3e6425 6f4e000a     . Mode <%d>...No
    9689:	706d4520 45207974 7972746e 726f6620      Empty Entry for
    9699:	6e6f6320 7463656e 0d6e6f69 6e49000a      connection...In
    96a9:	696c6176 6e692064 76726574 0a0d6c61     valid interval..
    96b9:	616e5500 20656c62 67206f74 61207465     .Unable to get a
    96c9:	65726464 0a0d7373 766e4900 64696c61     ddress...Invalid
    96d9:	74754120 79542068 25206570 000a0d64      Auth Type %d...

000096e9 <__FUNCTION__.7934>:
    96e9:	625f7461 645f656c 63697665 616e5f65     at_ble_device_na
    96f9:	735f656d 61007465                                me_set.

00009700 <__FUNCTION__.7888>:
    9700:	625f7461 695f656c 0074696e              at_ble_init.

0000970c <interface_send_msg>:
    970c:	20001e20 00215752                        .. RW!.

00009714 <dummy_buffer>:
    9714:	20001a20                                 .. 

00009718 <__FUNCTION__.7900>:
    9718:	625f7461 655f656c 7972636e 6f697470     at_ble_encryptio
    9728:	65725f6e 73657571 65725f74 00796c70     n_request_reply.

00009738 <__FUNCTION__.7856>:
    9738:	625f7461 705f656c 5f726961 5f79656b     at_ble_pair_key_
    9748:	6c706572 74610079                                reply.

0000974e <__FUNCTION__.7866>:
    974e:	625f7461 735f656c 5f646e65 76616c73     at_ble_send_slav
    975e:	65735f65 65725f63 73657571 2e2e0074     e_sec_request...
    976e:	2f2e2e2f 2e2f2e2e 6c622f2e 74735f65     /../../../ble_st
    977e:	2f6b6361 5f697061 65726f63 6365732f     ack/api_core/sec
    978e:	74697275 00632e79 61766e49 2064696c     urity.c.Invalid 
    979e:	2079654b 657a6973 0d642520 6e55000a     Key size %d...Un
    97ae:	776f6e6b 6e616820 20656c64 49007825     know handle %x.I
    97be:	4c41564e 43204449 2e4e4e4f 4e414820     NVALID CONN. HAN
    97ce:	0a454c44 564e4900 44494c41 41454620     DLE..INVALID FEA
    97de:	45525554 49000a53 4c41564e 4b204449     TURES..INVALID K
    97ee:	53205945 0d455a49 4e55000a 574f4e4b     EY SIZE...UNKNOW
    97fe:	5541204e 4e454854 5954202e 0a0d4550     N AUTHEN. TYPE..
    980e:	4b4e5500 4e574f4e 59454b20 53494420     .UNKNOWN KEY DIS
    981e:	0a0d2e54 4b544c00 20736920 20746f6e     T....LTK is not 
    982e:	766f7270 64656469 49000a0d 4c41564e     provided...INVAL
    983e:	4b204449 45205945 5952544e 49000a0d     ID KEY ENTRY...I
    984e:	4c41564e 44204449 4d205645 0d45444f     NVALID DEV MODE.
    985e:	4e49000a 494c4156 59542044 0a0d4550     ..INVALID TYPE..
    986e:	6b6e5500 20776f6e 646e6148 0a0d656c     .Unknow Handle..
    987e:	766e4900 64696c61 6c6f5220 000a0d65     .Invalid Role...
    988e:	61766e49 2064696c 656c6f52 00782520     Invalid Role %x.

0000989e <__FUNCTION__.7881>:
    989e:	63656863 6e655f6b 72705f63 7365636f     check_enc_proces
    98ae:	74610073                                         s.

000098b0 <__FUNCTION__.7891>:
    98b0:	625f7461 655f656c 7972636e 6f697470     at_ble_encryptio
    98c0:	74735f6e 00747261                       n_start.

000098c8 <__FUNCTION__.7837>:
    98c8:	625f7461 615f656c 65687475 6369746e     at_ble_authentic
    98d8:	00657461                                ate.

000098dc <__FUNCTION__.7247>:
    98dc:	63706167 706d635f 7476655f 70616700              gapc_cmp_evt.

000098e9 <__FUNCTION__.7476>:
    98e9:	63706167 7665645f 666e695f 65725f6f     gapc_dev_info_re
    98f9:	6e695f71 61685f64 656c646e 2e2e0072     q_ind_handler...
    9909:	2f2e2e2f 2e2f2e2e 6c622f2e 74735f65     /../../../ble_st
    9919:	2f6b6361 5f697061 746e6f63 6c6c6f72     ack/api_controll
    9929:	695f7265 7265746e 65636166 7061672f     er_interface/gap
    9939:	61745f63 632e6b73 43454c00 6f632042     c_task.c.LECB co
    9949:	63656e6e 6e6f6974 65726320 6f697461     nnection creatio
    9959:	6166206e 64656c69 4c000a20 20424345     n failed ..LECB 
    9969:	6b6e696c 73696420 6e6e6f63 69746365     link disconnecti
    9979:	66206e6f 756c6961 0a206572 74654700     on failure ..Get
    9989:	65657020 65642072 65636976 666e6920      peer device inf
    9999:	7265206f 2c726f72 61745320 3a737574     o error, Status:
    99a9:	00642520 43504147 5445475f 4e4f435f      %d.GAPC_GET_CON
    99b9:	4148435f 4c454e4e 50414d5f 7453202c     _CHANNEL_MAP, St
    99c9:	73757461 7830203a 58323025 686e5500     atus: 0x%02X.Unh
    99d9:	6c646e61 4f206465 253c2050 3e583230     andled OP <%02X>
    99e9:	44000a0d 63697665 614e2065 6e20656d     ...Device Name n
    99f9:	7320746f 67007465                                ot set.

00009a00 <__FUNCTION__.7677>:
    9a00:	6d706167 7365725f 725f7465 685f7165     gapm_reset_req_h
    9a10:	6c646e61 67007265                                andler.

00009a17 <__FUNCTION__.7694>:
    9a17:	6d706167 7465735f 7665645f 6e6f635f     gapm_set_dev_con
    9a27:	5f676966 5f646d63 646e6168 0072656c     fig_cmd_handler.
    9a37:	2e2f2e2e 2e2e2f2e 2f2e2e2f 5f656c62     ../../../../ble_
    9a47:	63617473 70612f6b 6f635f69 6f72746e     stack/api_contro
    9a57:	72656c6c 746e695f 61667265 672f6563     ller_interface/g
    9a67:	5f6d7061 6b736174 5700632e 3a504f2e     apm_task.c.W.OP:
    9a77:	32302520 52202c78 3a504f2e 78323025      %02x, R.OP:%02x
    9a87:	55000a0d 6e61686e 64656c64 20504f20     ...Unhandled OP 
    9a97:	253c7830 3e583230 67000a0d                       0x<%02X>...

00009aa2 <__FUNCTION__.7706>:
    9aa2:	6d706167 7465675f 7665645f 6e6f635f     gapm_get_dev_con
    9ab2:	5f676966 5f646d63 646e6168 0072656c     fig_cmd_handler.

00009ac2 <__FUNCTION__.7761>:
    9ac2:	6d706167 706d635f 7476655f 2f2e2e00     gapm_cmp_evt.../
    9ad2:	2e2f2e2e 2e2e2f2e 656c622f 6174735f     ../../../ble_sta
    9ae2:	612f6b63 635f6970 72746e6f 656c6c6f     ck/api_controlle
    9af2:	6e695f72 66726574 2f656361 74746167     r_interface/gatt
    9b02:	61745f63 632e6b73 69614600 2064656c     c_task.c.Failed 
    9b12:	64616572 20676e69 72616863 65746361     reading characte
    9b22:	74736972 0a206369 74616700                       ristic ..

00009b2b <__FUNCTION__.7433>:
    9b2b:	74746167 6f635f63 656c706d 655f6574     gattc_complete_e
    9b3b:	685f7476 6c646e61 a5007265 1eb5f8fe              vt_handler...

00009b48 <patch_data>:
    9b48:	461eb5f8 460c4617 f0024610 283ffab7     ...F.F.F.F....?(
    9b58:	484cd031 89808821 d0052800 4d4a1d82     1.LH!....(....JM
    9b68:	d1034291 e0102402 e7f82200 d0042800     .B...$..."...(..
    9b78:	42911c82 2400d103 2200e007 2800e7f9     ...B...$..."...(
    9b88:	1d00d000 d10a4281 48402401 23016800     .....B...$@H.h.#
    9b98:	463ab281 f002483e 7004fa97 2306e009     ..:F>H.....p...#
    9ba8:	4631463a f002483b 8821fa8f 21808001     :F1F;H....!....!
    9bb8:	68297101 20004788 b5ffbdf8 460cb081     .q)h.G. .......F
    9bc8:	f0029803 283ffa7b 9803d036 0a007822     ....{.?(6..."x..
    9bd8:	26000201 4d2b482f 2a003109 2702d005     ...&/H+M.1.*...'
    9be8:	d0172a01 d1272a02 8862e029 b2931d92     .*...*'.).b.....
    9bf8:	f0029a03 4607fa69 280089a8 1c80d000     ....i..F...(....
    9c08:	713e8038 807a8862 1d781d21 fa62f002     8.>qb.z.!.x...b.
    9c18:	e00e4638 9a032308 fa56f002 290089a9     8F...#....V....)
    9c28:	1d09d000 71068001 88628047 0a127142     .......qG.b.Bq..
    9c38:	49157182 47886809 b0052000 230ebdf0     .q.I.h.G. .....#
    9c48:	f0029a03 89a9fa41 d0002900 80011d89     ....A....)......
    9c58:	21087106 88628041 0a127142 88a27182     .q.!A.b.Bq...q..
    9c68:	0a1271c2 88e27202 0a127242 89227282     .q...r..Br...r".
    9c78:	0a1272c2 e7dc7302 4907b510 f0022014     .r...s.....I. ..
    9c88:	bd10fa2f 100408e4 100400e4 10040018     /...............
    9c98:	00000e0a 00000c14 10007c44 4610b510     ........D|.....F
    9ca8:	f002460c cc07fa0b ffdaf001 bd102000     .F........... ..
    9cb8:	4614b570 f0024610 2306fa01 21044622     p..F.F.....#"F.!
    9cc8:	f0024824 4604fa01 f0012000 4605fce5     $H.....F. .....F
    9cd8:	1ca02104 fa0af002 122970a5 120970e1     .!.......p)..p..
    9ce8:	12097121 20017161 20007060 7020491a     !q..aq. `p. .I p
    9cf8:	46206809 20004788 b570bd70 46104614     .h F.G. p.p..F.F
    9d08:	f9dcf002 23064813 21044622 f0021c40     .....H.#"F.!@...
    9d18:	4604f9db f0012000 4605fd47 1ca02104     ...F. ..G..F.!..
    9d28:	f9e4f002 0a2970a5 0a0970e1 0a097121     .....p)..p..!q..
    9d38:	20017161 20007060 70204907 46206809     aq. `p. .I p.h F
    9d48:	20004788 b510bd70 20154904 f9c8f002     .G. p....I. ....
    9d58:	0000bd10 00003801 100400e4 10007c84     .....8.......|..
    9d68:	2001b51c f9c8f002 f9ccf002 68004844     ... ........DH.h
    9d78:	4d444780 07407b28 28030f40 4942d803     .GDM({@.@..(..BI
    9d88:	68092000 48414788 26007801 d00e2900     . .h.GAH.x.&.)..
    9d98:	ca06a23f 91009201 22007006 46682105     ?........p.".!hF
    9da8:	f9b6f002 21052200 f0024668 68a8f9b7     .....".!hF.....h
    9db8:	d4030040 78014838 d0fc2900 f9b4f002     @...8H.x.)......
    9dc8:	f9b8f002 f9bcf002 4c344935 68606809     ........5I4L.h`h
    9dd8:	49344788 f0022003 f000f9b9 68a0fbe9     .G4I. .........h
    9de8:	68a84780 d40a0040 28017820 7860d1fc     .G.h@... x.(..`x
    9df8:	d0042800 492d7066 60c8482b f002e7fe     .(..fp-I+H.`....
    9e08:	f7fff9ab f7ffff39 4829ff9e 47806800     ....9.....)H.h.G
    9e18:	4828b662 f9a6f002 07007b28 f002d501     b.(H....({......
    9e28:	4c25f9a7 15a56860 606043a8 20064923     ..%L`h...C``#I. 
    9e38:	47886809 43286860 68a06060 430801e9     .h.G`h(C``.h...C
    9e48:	4c1f60a0 f99af002 47806820 d0f92800     .`.L.... h.G.(..
    9e58:	f002481c e7f5f999 20004601 d00d2900     .H.......F. .)..
    9e68:	d1072902 780a490c d0042a02 29017809     .)...I.x.*...x.)
    9e78:	4815d100 48144770 47703010 47704813     ...HpG.H.0pG.HpG
    9e88:	10040160 10040828 100401c0 10040025     `...(.......%...
    9e98:	54554f42 00000021 100400d9 10040000     BOUT!...........
    9ea8:	10040104 10005e1d 05fa0004 e000ed00     .....^..........
    9eb8:	10040154 100403bc 4000f400 10040210     T..........@....
    9ec8:	1004010c 100405ec 10007bb0 0001e2bc     .........{......
    9ed8:	4addb5f0 49dd6816 48dd4bdd 128c3340     ...J.h.I.K.H@3..
    9ee8:	2e0012cd 6886d026 400e6857 0fff073f     ....&..hWh.@?...
    9ef8:	4337047f 689e6087 6851400e 0fc90709     ..7C.`.h.@Qh....
    9f08:	43310449 69416099 40216853 0fdb075b     I.1C.`AiSh!@[...
    9f18:	430b01db 69416143 40296853 0fdb079b     ...CCaAiSh)@....
    9f28:	430b019b 49cb6143 400b6943 07c96851     ...CCa.ICi.@Qh..
    9f38:	e02e0fc9 68d64ac8 07f60d76 68d6d12c     .....J.hv...,..h
    9f48:	07f60d36 6886d028 400e68d7 0fff033f     6...(..h.h.@?...
    9f58:	4337047f 689e6087 68d1400e 0fc90309     ..7C.`.h.@.h....
    9f68:	43310449 69416099 402168d3 0fdb04db     I.1C.`Ai.h!@....
    9f78:	430b01db 69416143 402968d3 0fdb051b     ...CCaAi.h)@....
    9f88:	430b019b 49b36143 400b6943 054968d1     ...CCa.ICi.@.hI.
    9f98:	03c90fc9 61414319 4770bdf0 49afb530     .....CAa..pG0..I
    9fa8:	61082000 684849ae 43102201 49ad6048     . .a.IHh.".CH`.I
    9fb8:	158a6988 61884390 680048ab d1042800     .i...C.a.H.h.(..
    9fc8:	69184baa 43202404 69086118 78254ca8     .K.i.$ C.a.i.L%x
    9fd8:	02db2303 d1002d01 25e14398 43a803ad     .#...-...C.%...C
    9fe8:	68c86108 78242502 2c0143a8 241cd101     .a.h.%$x.C.,...$
    9ff8:	242043a0 439043a0 43984a9e 60c84390     .C $.C.C.J.C.C.`
    a008:	4f9dbd30 26004c9d 47806838 d10d2800     0..O.L.&8h.G.(..
    a018:	28027a20 f002d00a 2802f8bd f002d0fb      z.(.......(....
    a028:	2800f8b9 bf00d102 72202001 25007a20     ...(.....  r z.%
    a038:	d03b2800 d04e2801 d1e52802 88004890     .(;..(N..(...H..
    a048:	d0022800 6800488f f0024780 7860f8a9     .(...H.h.G....`x
    a058:	d0012800 f8aaf002 f8aef002 20016aa1     .(...........j. 
    a068:	f0024788 4888f8af 47806800 68004887     .G.....H.h.G.H.h
    a078:	48794780 074068c0 28030f40 4984d803     .GyH.h@.@..(...I
    a088:	68092001 78a04788 70a01c40 68004881     . .h.G.x@..p.H.h
    a098:	6a204780 d0012800 47806a20 ff7ef7ff     .G j.(.. j.G..~.
    a0a8:	2001497d 61886809 e01bb662 280079e0     }I. .h.ab....y.(
    a0b8:	bf30d100 78284d79 d1a52801 f888f002     ..0.yM(x.(......
    a0c8:	f002702e 4876f88b 28006800 4874d19c     .p....vH.h.(..tH
    a0d8:	f848f002 2004e798 f886f002 47806838     ..H.... ....8h.G
    a0e8:	d0012800 e78f7226 f884f002 f888f002     .(..&r..........
    a0f8:	d1fb2800 f86cf002 f888f002 28027a20     .(....l..... z.(
    a108:	2002d043 48677220 07c16800 2101d005     C..  rgH.h.....!
    a118:	430d0449 1c497921 07807121 6960d402     I..C!yI.!q....`i
    a128:	d0052800 04802001 79604305 71601c40     .(... ...C`y@.`q
    a138:	04002001 70664305 495b78e0 70e01c40     . ...Cfp.x[I@..p
    a148:	20016809 4f444788 28017c38 2000d020     .h. .GDO8|.( .. 
    a158:	43284956 f0024308 743ef85f 20006aa1     VI(C.C.._.>t.j. 
    a168:	48404788 22026981 61814311 69814850     .G@H.i.".C.aPH.i
    a178:	439122c0 69816181 43911582 4c4d6181     .".C.a.i...C.aML
    a188:	47806820 d1fb2800 f002e7fe e73bf827      h.G.(......'.;.
    a198:	02402001 b510e7dc 8410f3ef b6724a46     . @.........FJr.
    a1a8:	68506811 23001c49 60114158 f0016050     .hPhI..#XA.`P`..
    a1b8:	b662ff3b 8810f384 b510bd10 207c493f     ;.b.........?I| 
    a1c8:	4a216048 7a11483e d10e2901 493d4b3e     H`!J>H.z.)..>K=I
    a1d8:	4b3e8019 61592101 21044b3d 493d8019     ..>K.!Ya=K.!..=I
    a1e8:	493d6001 21006041 68d37211 680c491e     .`=IA`.!.r.h.I.h
    a1f8:	d01842a3 60d3680b 4a38680b 2b004938     .B...h.`.h8J8I.+
    a208:	4b38d007 4a388013 4a3860c2 4a386102     ..8K..8J.`8J.a8J
    a218:	4b38e006 4a388013 4a3860c2 4a386102     ..8K..8J.`8J.a8J
    a228:	8809800a 49376081 22076848 43100712     .....`7IHh."...C
    a238:	48326048 1e404934 bd106208 48332101     H`2H4I@..b...!3H
    a248:	60480709 ffeef001 10007bd0 fffdffff     ..H`.....{......
    a258:	40020800 ffff7fff 10040828 4000b200     ...@....(......@
    a268:	40014000 4000b000 10007d38 e000ed00     .@.@...@8}......
    a278:	100400d9 20058000 1004018c 1004001c     ....... ........
    a288:	10040094 100400a0 10040170 10040160     ........p...`...
    a298:	100401c0 10040154 1004015c 10040141     ....T...\...A...
    a2a8:	100405ec 10040168 10040210 00400001     ....h.........@.
    a2b8:	4000e200 10040188 10040240 40025100     ...@....@....Q.@
    a2c8:	4000e040 000009c4 10007be8 4000f000     @..@.....{.....@
    a2d8:	1004009c 03020000 06050403 10040090     ................
    a2e8:	10040096 000004a6 01020c0d 00000c03     ................
    a2f8:	00001f12 000005d7 01021617 00001603     ................
    a308:	0000291c 40024000 40041840 0001e1ad     .)...@.@@..@....
    a318:	4c39b5f8 28006920 4838d006 28006800     ..9L i.(..8H.h.(
    a328:	4836d102 ff1ef001 4f364e35 2d006925     ..6H....5N6O%i.-
    a338:	0628d060 2080d503 f00161a0 07a8ff79     `.(.... .a..y...
    a348:	2002d503 f00161a0 0728ff79 2008d504     ... .a..y.(.... 
    a358:	200061a0 ff78f001 d50505e8 300120ff     .a. ..x...... .0
    a368:	200161a0 ff70f001 d50405a8 02402001     .a. ..p...... @.
    a378:	f00161a0 0668ff6f 2040d503 f00161a0     .a..o.h...@ .a..
    a388:	06e8ff6f 2010d503 f00161a0 0768ff6f     o...... .a..o.h.
    a398:	4919d51e 31c02001 6bc863c8 d1fc2800     ...I. .1.c.k.(..
    a3a8:	491969e0 49196008 68092004 20044788     .i.I.`.I. .h.G. 
    a3b8:	491761a0 62082000 68004816 88304780     .a.I. .b.H.h.G0.
    a3c8:	d0052800 47806838 ff56f001 ff30f001     .(..8h.G..V...0.
    a3d8:	d00a07e8 28008830 2001d107 683861a0     ....0..(... .a8h
    a3e8:	f0014780 f001ff49 06a8ff23 2020d59e     .G..I...#.....  
    a3f8:	e79b61a0 0000bdf8 40040000 100405ec     .a.........@....
    a408:	10040094 10040174 10007be0 10040210     ....t....{......
    a418:	4000b000 10040110 4604b5fe ff32f001     ...@.......F..2.
    a428:	f0019000 4607ff35 46257a20 0f000700     ....5..F z%F....
    a438:	90013564 78a84626 28003624 f001d101     d5..&F.x$6.(....
    a448:	4630ff2d ff30f001 481e4621 ff32f001     -.0F..0.!F.H..2.
    a458:	481d78a9 d1032900 42f99900 8801d000     .x.H.).....B....
    a468:	22029901 4919008b 800a1859 804a8df2     ..."...IY.....J.
    a478:	78ab9900 430b19c9 4a164e15 25014916     ...x...C.N.J.I.%
    a488:	d1142b00 07db8803 2300d011 6836800b     .+.........#..6h
    a498:	d0012e00 e0008015 804b8013 490f68a2     ..........K..h.I
    a4a8:	624a1e52 620a8882 62888840 800dbdfe     R.Jb...b@..b....
    a4b8:	28006830 2004d001 2003e000 804d8010     0h.(... ... ..M.
    a4c8:	0000bdfe 1004085c 1004007c 40030000     ....\...|......@
    a4d8:	10007d38 1004009c 10007be4 40024040     8}.......{..@@.@
    a4e8:	68094911 0a814348 18890bc2 18080c00     .I.hHC..........
    a4f8:	30ff30ff 0a803002 b5304770 8800480b     .0.0.0..pG0..H..
    a508:	ffeef7ff 46034d0a f7ff8828 b284ffe9     .....M.F(.......
    a518:	f7ff8868 0559ffe5 b28002a2 43014311     h.....Y......C.C
    a528:	63c14804 0000bd30 10040204 10007be8     .H.c0........{..
    a538:	10040090 40040000 0a04b510 2810b2c0     .......@.......(
    a548:	dc0ed034 d023280c 2803dc06 280ad017     4....(#....(...(
    a558:	280bd020 e019d111 d013280d d10c280e      ..(.....(...(..
    a568:	2837e012 dc04d01a d0152811 d1042812     ..7(.....(...(..
    a578:	2838e01a 2839d014 f001d014 0221fea1     ..8(..9(......!.
    a588:	bd104308 e7fa200a e7f8200b e7f62008     .C... ... ... ..
    a598:	e7f42009 e7f22007 e7f02005 e7ee2014     . ... ... ... ..
    a5a8:	e7ec2015 e7ea200e e7e82006 e7e62004     . ... ... ... ..
    a5b8:	2003b510 fe8af001 20034902 fd90f001     ... .....I. ....
    a5c8:	0000bd10 10007b18 4618b570 4601460d     .....{..p..F.F.F
    a5d8:	23822400 f001481e 7969fd77 2900682a     .$.#.H..w.iy*h.)
    a5e8:	2980d001 2112d901 792be027 d0082b08     ...)...!'.+y.+..
    a5f8:	d00f2b10 d01b2b20 5d13e01e 70ab1905     .+.. +.....]...p
    a608:	428c1c64 e016d3f9 19055b13 0a1b70ab     d..B.....[...p..
    a618:	1ca470eb d3f7428c e00c0049 19055913     .p...B..I....Y..
    a628:	0a1b70ab 0a1b70eb 0a1b712b 1d24716b     .p...p..+q..kq$.
    a638:	d3f3428c 70410089 70012100 78424601     .B....Ap.!.p.FBx
    a648:	1c92390c 4903814a 47886809 bd702000     .9..J..I.h.G. p.
    a658:	00000319 100400e4 4c6eb5f8 d00f0005     ..........nL....
    a668:	28027fa0 7fe0d107 d0012801 d1022805     ...(.....(...(..
    a678:	f00168e0 2d01fe31 2000d13e fe32f001     .h..1..->.. ..2.
    a688:	29007fa1 4863d00a 29013016 2902d01b     ...)..cH.0.)...)
    a698:	f001d070 2800fe2d e09ad12e 28017fe0     p...-..(.......(
    a6a8:	2805d006 2806d008 2807d006 e005d108     ...(...(...(....
    a6b8:	f0012003 bdf8fe23 e7fa2008 e7f82004     . ..#.... ... ..
    a6c8:	fe10f001 7fe1bdf8 d0162901 d0252905     .........)...)%.
    a6d8:	d0502906 d1f52907 f0014605 ba00fe15     .)P..)...F......
    a6e8:	78e90a00 43080200 90006800 220068a0     ...x...C.h...h."
    a6f8:	21046843 47984668 4605e068 fe0af001     Ch.!hF.Gh..F....
    a708:	280078a8 2822d003 7fe0d906 882be7d8     .x.(.."(......+.
    a718:	22004601 e0574618 e01b493f 46054f3f     .F.".FW.?I..?O.F
    a728:	88406839 46064788 060043f0 d0140e00     9h@..G.F.C......
    a738:	88a86839 80a84788 88eb4602 46318828     9h...G...F..(.1F
    a748:	fcc2f001 60e0380c 894868e1 d00f2800     .....8.`.hH..(..
    a758:	310c88e8 fde4f001 88ebbdf8 210a886a     ...1........j..!
    a768:	f001482f 380cfcb1 882960e0 e7eb8141     /H.....8.`).A...
    a778:	e01e4608 4604e017 fdc6f001 0a05ba00     .F.....F........
    a788:	022d78e0 1d204305 fdbef001 0a00ba00     .x-..C .........
    a798:	020079e1 60284308 fdc8f001 46282104     .y...C(`.....!(F
    a7a8:	fdcaf001 7fe1bdf8 d0072901 d1f92905     .........)...)..
    a7b8:	491c68e0 300c6809 e0074788 f0014604     .h.I.h.0.G...F..
    a7c8:	78a1fda9 4a148820 fdbcf001 fdaef001     ...x ..J........
    a7d8:	f001bdf8 bdf8fdbd 2003b510 fdbef001     ........... ....
    a7e8:	69204c0c fd78f001 28006a20 f001d003     .L i..x. j.(....
    a7f8:	2000fdbb 68206220 d0052800 f0014805     ...  b h.(...H..
    a808:	f001fdb9 bd10fdbd 20042100 fdbef001     .........!. ....
    a818:	0000bd10 10040bb0 10007bea 100400bc     .........{......
    a828:	00000d21 100400e4 4604b570 3c0c4828     !.......p..F(H.<
    a838:	07c56ac0 0fed88e0 d0122805 8610f3ef     .j.......(......
    a848:	4824b672 f0014621 b662fd35 8810f386     r.$H!F..5.b.....
    a858:	492188a0 d10d4288 b2c188e0 d005290b     ..!I.B.......)..
    a868:	4621e008 f001481d e02cfd97 02000a00     ..!F.H....,.....
    a878:	80e03014 491a88a0 d1104288 88e04919     .0.....I.B...I..
    a888:	42886809 201bd10b fd1af001 f0014606     .h.B... .....F..
    a898:	2801fc15 2100d103 f0014630 88e0fd77     ...(...!0F..w...
    a8a8:	d0102804 28048920 2d00d10d 480ed004     .(.. ..(...-...H
    a8b8:	28006800 e006d004 2001490c e0026208     .h.(.....I. .b..
    a8c8:	f0014809 2001fc4f fd6cf001 0000bd70     .H..O.. ..l.p...
    a8d8:	4000b1c0 10040bd4 00000c13 10040c20     ...@........ ...
    a8e8:	00000e03 10040018 100405ec 4000b000     ...............@
    a8f8:	48c6b5fe 4dc44ec3 24006941 01c909c9     ...H.N.MAi.$....
    a908:	43112255 68816141 00490849 69c16081     U".CAa.hI.I..`.i
    a918:	40114abf 69c161c1 43112202 48bd61c1     .J.@.a.i.".C.a.H
    a928:	18380527 f001210d 9001fd43 210d48ba     '.8..!..C....H.!
    a938:	f0011838 9000fd3d 006148b8 0480180f     8...=....Ha.....
    a948:	f0014639 4ab5fd3b 43504639 fd36f001     9F..;..J9FPC..6.
    a958:	46394ab2 f0014350 219dfd31 21014348     .J9FPC..1..!HC.!
    a968:	18400449 0c80219d 18420209 230c4621     I.@..!....B.!F.#
    a978:	98014359 4baa5070 60431988 98006082     YC..pP.K..C`.`..
    a988:	48a85068 60481949 b2e41c64 d3c62c28     hP.HI.H`d...(,..
    a998:	48a52501 600505ed 60424aa4 60812100     .%.H...`.JB`.!.`
    a9a8:	60c34ba3 61416101 61c26185 62436205     .K.`.aAa.a.a.bCb
    a9b8:	62c16281 69e04c95 43882102 69e061e0     .b.b.L.i.!.C.a.i
    a9c8:	43c94993 61e04308 210168a0 60a04308     .I.C.C.a.h.!.C.`
    a9d8:	61e04898 49984899 49996001 49996041     .H.a.H.I.`.IA`.I
    a9e8:	f7ff6081 4898fa75 48996160 60014997     .`..u..H`a.H.I.`
    a9f8:	60416841 22806841 60414391 68084995     AhA`Ah.".CA`.I.h
    aa08:	43100492 49946008 12126808 439043a8     ...C.`.I.h...C.C
    aa18:	68124a92 d1012a00 43904a91 05122207     .J.h.*...J.C."..
    aa28:	60084390 b510bdfe 69604c78 09c02155     .C.`....xL`iU!..
    aa38:	430801c0 48816160 6001497f 60414980     ...C`a.H.I.`.IA`
    aa48:	60814980 fa44f7ff 6160487f 61e04879     .I.`..D..H`ayH.a
    aa58:	497869e0 43083980 68a061e0 43082101     .ixI.9.C.a.h.!.C
    aa68:	497b60a0 158a6848 60484310 68084979     .`{IHh...CH`yI.h
    aa78:	43100452 49786008 22416808 43900452     R..C.`xI.hA"R..C
    aa88:	68124a76 d1012a00 43904a75 05122207     vJ.h.*..uJ.C."..
    aa98:	60084390 b240bd10 b5704770 4a712100     .C.`..@.pGp..!qJ
    aaa8:	460d2315 188c021b 1d096025 d3fa4299     .#.F....%`...B..
    aab8:	4a6d2103 62d10409 6201496c 6241496c     .!mJ...blI.blIAb
    aac8:	2206496c 212c6141 496b540a 496b6281     lI."Aa,!.TkI.bkI
    aad8:	496b6001 496b6041 496c61c1 6008486a     .`kIA`kI.alIjH.`
    aae8:	3c404c6a 03896b20 43084388 f0016320     jL@< k...C.C c..
    aaf8:	4867fc6b 6ba06085 09000100 430805a1     k.gH.`.k.......C
    ab08:	4c4263a0 63602003 49622009 60c80580     .cBL. `c. bI...`
    ab18:	feeef7ff 4860494f 60483180 495f4860     ....OI`H.1H``H_I
    ab28:	49606141 49606181 495b61c1 62013113     Aa`I.a`I.a[I.1.b
    ab38:	30404842 4a5d68c1 68120989 43110189     BH@0.h]J...h...C
    ab48:	68a060c1 03892101 60a04388 200c4958     .`.h.!...C.`XI. 
    ab58:	bd706188 4857b570 28008800 2005d00a     .ap.p.WH...(... 
    ab68:	23000200 2215493f 18440212 1d006023     ...#?I."..D.#`..
    ab78:	d3fa4290 68004850 61604c24 6800484f     .B..PH.h$L`aOH.h
    ab88:	6148492e 49382003 62c80400 483e493f     .IHa. 8I...b?I>H
    ab98:	4d3e6008 6b283d40 43880389 63284308     .`>M@=(k...C.C(c
    aba8:	fc12f001 fb09f7ff 01006ba8 02e10900     .........k......
    abb8:	63a84308 68004842 20034780 20096360     .C.cBH.h.G. `c. 
    abc8:	05804934 f7ff60c8 4922ff2e 31804832     4I...`...."I2H.1
    abd8:	48336048 61414931 61814932 61c14932     H`3H1IAa2I.a2I.a
    abe8:	3113492d 48156201 68c13040 09894a2f     -I.1.b.H@0.h/J..
    abf8:	01896812 60c14311 210168a0 43880389     .h...C.`.h.!...C
    ac08:	bd7060a0 40022800 40022a00 40020000     .`p..(.@.*.@...@
    ac18:	feefcfff 4b100007 4b180007 00000962     .......K...Kb...
    ac28:	423d55af 420155af 40022c00 00048060     .U=B.U.B.,.@`...
    ac38:	00008060 01103080 00002402 40020800     `....0...$.....@
    ac48:	6438ee11 00010ee4 6a029143 0f600107     ..8d....C..j..`.
    ac58:	4000f400 40041800 40020180 10007d38     ...@...@...@8}..
    ac68:	04000700 40030000 40041a80 0001b645     .......@...@E...
    ac78:	0001b637 0001b35b 0001b363 0001b32f     7...[...c.../...
    ac88:	0001b349 100060db 054a0756 40040080     I....`..V.J....@
    ac98:	4000f000 40024000 00000303 d6d6e8ff     ...@.@.@........
    aca8:	40041900 8199afc4 0000516a 10007c14     ...@....jQ...|..
    acb8:	4000e200 10007be4 10007c1c 10007c20     ...@.{...|.. |..
    acc8:	10040184 03892101 d3004288 49704608     .....!...B...FpI
    acd8:	43486809 0b420ac1 0c421851 0c821851     .hHC..B.Q.B.Q...
    ace8:	0cc21851 0d021851 0d821851 0e021851     Q...Q...Q...Q...
    acf8:	0e421851 0e821851 18511c40 18400f80     Q.B.Q...@.Q...@.
    ad08:	1e40d000 47704770 2600b5fe 90002040     ..@.pGpG...&@ ..
    ad18:	8010f3ef 4c5f9001 2001b672 f0018060     ......_Lr.. `...
    ad28:	2800fb59 2002d074 80602601 fa32f001     Y..(t.. .&`...2.
    ad38:	d0fb2802 80602003 fa2cf001 d0f12800     .(... `...,..(..
    ad48:	20044d54 350c8060 280078e8 2005d060     TM. `..5.x.(`.. 
    ad58:	88288060 d15b2800 80602007 9000484e     `.(..([.. `.NH..
    ad68:	8800484e d0042800 78a9484d 180f8800     NH...(..MH.x....
    ad78:	78a8e002 18476861 80602008 88004849     ...xahG.. `.IH..
    ad88:	d0032800 fb2cf001 d0fb2800 80602009     .(....,..(... `.
    ad98:	46684639 fb2af001 d0732800 8060200a     9FhF..*..(s.. `.
    ada8:	fb2af001 d06d2800 8060200b 46684639     ..*..(m.. `.9FhF
    adb8:	fb28f001 d0652800 98004f39 1a408839     ..(..(e.9O..9.@.
    adc8:	d35f2805 8060200c fb22f001 d0202800     .(_.. `..."..( .
    add8:	8060200f 68004834 28004780 4833d003     . `.4H.h.G.(..3H
    ade8:	07806800 2010d44e 49318060 62082000     .h..N.. `.1I. .b
    adf8:	68c04830 06804930 60080e80 fb0ef001     0H.h0I.....`....
    ae08:	fb12f001 98004924 d1044288 e00a2000     ....$I...B... ..
    ae18:	2600e038 4921e036 29008809 8839d001     8..&6.!I...)..9.
    ae28:	6861e000 90001a40 80602011 21014823     ..ah@.... `.#H.!
    ae38:	6bc163c1 d1fc2900 38c04820 4f2069c0     .c.k.).. H.8.i O
    ae48:	98006038 ff3ef7ff 201260a0 79298060     8`....>..`. `.)y
    ae58:	f00168a0 2001faef 0780491a 78206008     .h..... .I...` x
    ae68:	70201c40 80602013 69404817 48116078     @. p. `..H@ix`.H
    ae78:	69403840 481560b8 47806a80 68014814     @8@i.`.H.j.G.H.h
    ae88:	d5fc0049 9801b662 8810f380 bdfe4630     I...b.......0F..
    ae98:	10040204 100400f0 0000ffff 10040094     ................
    aea8:	1004009c 10007be6 1004018c 4000e000     .....{.........@
    aeb8:	4000b000 40020840 10007c14 400400c0     ...@@..@.|.....@
    aec8:	10007c18 e000e100 40020000 10040d90     .|.........@....
    aed8:	e000e200 0ec906c1 40882001 6008492f     ......... .@/I.`
    aee8:	06c14770 20010ec9 492c4088 60083180     pG..... .@,I.1.`
    aef8:	06c14770 20010ec9 49294088 47706008     pG..... .@)I.`pG
    af08:	f001b570 2501fa9d 106c03ed 4a251063     p......%..l.c.%J
    af18:	d0122800 60102000 63901e40 f7ff2018     .(... .`@..c. ..
    af28:	6950ffe8 61504328 43206950 69506150     ..Pi(CPaPi CPaPi
    af38:	61504318 f7ff2018 481bffdc 481b6390     .CPa. .....H.c.H
    af48:	07896801 6ad1d006 62d14329 43296b11     .h.....j)C.b.k)C
    af58:	62156311 06896801 d0060f89 43216ad1     .c.b.h.......j!C
    af68:	6b1162d1 63114321 68006214 0f800580     .b.k!C.c.b.h....
    af78:	6ad0d006 62d04318 43186b10 62136310     ...j.C.b.k.C.c.b
    af88:	f7ff2018 201fffa7 ffa4f7ff f7ff2015     . ..... ..... ..
    af98:	201bffa1 ff9ef7ff 0000bd70 e000e100     ... ....p.......
    afa8:	e000e280 40011000 0000ffff 4000f000     .......@.......@
    afb8:	4857b5f8 48577801 68462901 d11d4856     ..WH.xWH.)FhVH..
    afc8:	d11b2e01 6a8a4955 401a4b55 431a4b55     ....UI.jUK.@UK.C
    afd8:	6aca628a 401a4b54 431a2301 688162ca     .b.jTK.@.#.C.b.h
    afe8:	40114a52 43114a52 69016081 4311220c     RJ.@RJ.C.`.i.".C
    aff8:	68416101 02122277 60414391 220f6901     .aAhw"...CA`.i."
    b008:	43110292 484b6101 e0006805 69686928     ...C.aKH.h..(ihi
    b018:	d1fb07c0 68004848 0f400080 f0010003     ....HH.h..@.....
    b028:	0508fa15 110e0b08 1c1a1714 026424e1     .............$d.
    b038:	24e1e013 e01002a4 02e424e1 24e1e00d     ...$.....$.....$
    b048:	e00a0324 022424e1 244be007 e0040264     $....$$...K$d...
    b058:	0224244b 244be001 483801e4 46216807     K$$...K$..8H.h!F
    b068:	f0014638 b282f9ab 43504620 20001a39     8F...... FPC9.. 
    b078:	e0020923 b2c01c40 428b1ac9 1c40d3fa     #...@......B..@.
    b088:	48230841 28017800 2e01d103 2020d101     A.#H.x.(......  
    b098:	20006228 00d262a8 626a430a 21014a28     (b. .b...Cjb(J.!
    b0a8:	491d6011 680a3180 01120912 60a8600a     .`.I.1.h.....`.`
    b0b8:	210269a8 61a84308 b430bdf8 4c1d4b21     .i.!.C.a..0.!K.L
    b0c8:	6019609a 68246058 d10d290a 2d047805     .`.`X`$h.)...x.-
    b0d8:	7845d10a d1072d0e 2d1f7905 7940d104     ..Ex.-...y.-..@y
    b0e8:	d1012820 60191e49 d0082900 07c06860      (..I..`.)..`h..
    b0f8:	6858d0fc 60257805 60581c40 2000e7f2     ..Xh.x%`@.X`... 
    b108:	2a006058 6098d002 4710bc30 4770bc30     X`.*...`0..G0.pG
    b118:	100400d9 10007c9c 4000b040 4000b180     .....|..@..@...@
    b128:	c0c0ffff 02030000 ffffc0c0 ff8888ff     ................
    b138:	00111100 1004015c 10040828 10007cb0     ....\...(....|..
    b148:	e000e100 10041968 493ab5fe 68094838     ....h.....:I8H.h
    b158:	4d394788 4a382000 3d504b38 24261c41     .G9M. 8J8KP=A.&$
    b168:	43440749 0f49260a 434618a4 807c18f7     I.DC.&I...FC..|.
    b178:	4361240a 19494c31 19343c40 1c408761     .$aC1LI.@<4.a.@.
    b188:	dbeb2808 68204c2e 438821f0 430821e0     .(...L h.!.C.!.C
    b198:	482b6020 30c02196 0a526b02 430a0252      `+H.!.0.kR.R..C
    b1a8:	6b016302 40114a27 43114a27 48276301     .c.k'J.@'J.C.c'H
    b1b8:	682060e0 438800e1 68206020 43881049     .` h...C ` hI..C
    b1c8:	22066020 46684922 ff84f000 88084669      `.""IhF....iF..
    b1d8:	04098849 62614301 88884669 682062a0     I....CabiF...b h
    b1e8:	43881561 60204308 21074815 61013080     a..C.C `.H.!.0.a
    b1f8:	39184916 49156301 63413124 39c0490e     .I.9.c.I$1Ac.I.9
    b208:	48146381 7c00210a 19404348 f7ff62e0     .c.H.!.|HC@..b..
    b218:	2001f974 f920f001 f924f001 7800480e     t.. .. ...$..H.x
    b228:	d0012800 f924f001 f928f001 0000bdfe     .(....$...(.....
    b238:	10040d90 100400ec 00000aca 40030a80     ...............@
    b248:	40040000 fc00ffff 01e50000 0000033a     ...@........:...
    b258:	0001f8b2 10040b9c 100400a4 21004803     .............H.!
    b268:	60016041 21026801 47706001 4000d000     A`.`.h.!.`pG...@
    b278:	6802b510 43086b10 20046310 fe2af7ff     ...h.k.C.c. ..*.
    b288:	b510bd10 6b106802 63104388 f7ff2004     .....h.k.C.c. ..
    b298:	bd10fe28 2101b5f0 0f240704 2300460a     (......!..$..F.#
    b2a8:	40a24db3 d82a2818 28074cb2 6863d801     .M.@.(*..L.(..ch
    b2b8:	280fe006 68a3d801 2817e002 68e3d800     ...(...h...(...h
    b2c8:	0ef70746 40be2607 280743b3 6063d801     F....&.@.C.(..c`
    b2d8:	280fe006 60a3d801 2817e002 60e3d800     ...(...`...(...`
    b2e8:	d2082810 68534aa4 430b4081 69136053     .(...JSh.@.CS`.i
    b2f8:	6113430b 49a1e001 7728e00d 4603bdf0     .C.a...I..(w...F
    b308:	2b033b2c 4c9ed8fa 07866923 40b10fb6     ,;.+...L#i.....@
    b318:	6123438b 684b499b 604b4313 4313690b     .C#a.IKh.CK`.i.C
    b328:	e7ea610b 4892b530 7f022101 d2062a10     .a..0..H.!...*..
    b338:	685c4b91 4095460d 605c43ac 4b8ce009     .K\h.F.@.C\`...K
    b348:	071c7f1b 23010f24 2a1840a3 4a8bd203     ....$..#.@.*...J
    b358:	7741e005 3a2cbd30 d8042a03 68544a89     ..Aw0.,:.*...JTh
    b368:	6054439c 2100e7f5 b530e7f3 23004880     .CT`...!..0..H.#
    b378:	24017f01 d2052910 68554a7f 4325408c     ...$.)...JUh.@%C
    b388:	e0096055 7f124a7a 0f240714 40a22201     U`..zJ....$..".@
    b398:	d2032918 e0054979 bd307743 2903392c     .)..yI..Cw0.,9.)
    b3a8:	4978d8fb 4314684c e7f5604c 4606b570     ..xILh.CL`..p..F
    b3b8:	460c4615 f7ff2004 4b6dfd94 609e2001     .F.F. ....mK. .`
    b3c8:	605c60dd 841c7798 6801e004 02090a09     .`\`.w.....h....
    b3d8:	600131fe 68006818 07c96881 2004d1f5     .1.`.h.h.h..... 
    b3e8:	fd78f7ff ff9ef7ff 20094967 bd706048     ..x.....gI. H`p.
    b3f8:	2500b570 e04c4c5e 2a007fa2 6862d026     p..%^LL....*&.bh
    b408:	d00d2a00 780268a0 60a01c40 68016808     .*...h.x@..`.h.h
    b418:	02090a09 60014311 1e406860 e01a6060     .....C.``h@.``..
    b428:	0a096801 31fe0209 48576001 1e496841     .h.....1.`WHAhI.
    b438:	68406041 d10e2800 f7ff77a5 68e1ff96     A`@h.(...w.....h
    b448:	d0082900 60e52000 e0044788 0a096801     .)... .`.G...h..
    b458:	31fe0209 69606001 d0172800 68096821     ...1.``i.(..!h.h
    b468:	70016849 1e406920 69616120 61611c49     Ih.p i@. aaiI.aa
    b478:	d10e2800 21016165 f7ff6820 69a1ff02     .(..ea.! h.....i
    b488:	d0022900 61a52000 bd704788 68006820     .)... .a.Gp. h.h
    b498:	68216840 68c26808 d1ad07d2 b5f0bd70     @h!h.h.h....p...
    b4a8:	4606b087 4668211c ffeef000 2e004f37     ...F.!hF....7O..
    b4b8:	7838d106 d1032800 482d2124 ffe4f000     ..8x.(..$!-H....
    b4c8:	46692000 74087048 744a2201 70887008     . iFHp.t."Jt.p.p
    b4d8:	7b00482f 0f400740 d80b2803 492d00c2     /H.{@.@..(....-I
    b4e8:	5a8b4668 18518243 8282884a 82c2888a     hF.ZC.Q.J.......
    b4f8:	830188c9 4c284d1e d0022e01 d00d2e00     .....M(L........
    b508:	7820e012 d0022800 28027820 4821d10c     .. x.(.. x.(..!H
    b518:	4922466a f0003808 e005ffbd 28007838     jF"I.8......8x.(
    b528:	481cd102 60283808 28007820 7820d002     ...H.8(` x.(.. x
    b538:	d1032802 78004814 feacf7ff 68282101     .(...H.x.....!(h
    b548:	fe9ff7ff f0002014 7820ffab d00c2800     ..... .... x.(..
    b558:	28027820 4912d107 f0002014 2101ffa7      x.(...I. .....!
    b568:	f7ff6828 b007fe85 490ebdf0 0000e7f4     (h.........I....
    b578:	10041e00 4000b040 40010000 40011000     ....@..@...@...@
    b588:	4000f400 40013000 10007ca8 10040000     ...@.0.@.|......
    b598:	10040828 10040198 100400d9 40006000     (............`.@
    b5a8:	10006a35 0001d1c7 428849f8 2000d301     5j.......I.B... 
    b5b8:	49f74770 29951841 2001d201 49f54770     pG.IA..)... pG.I
    b5c8:	184122ff 42913216 2002d201 49f14770     ."A..2.B... pG.I
    b5d8:	1840318b d201288b 47702003 47702004     .1@..(... pG. pG
    b5e8:	01092129 d2014288 47702000 29131a41     )!...B... pGA..)
    b5f8:	2001d201 49e84770 29121841 2002d201     ... pG.IA..)... 
    b608:	49e54770 18413912 d2012912 47702003     pG.I.9A..)... pG
    b618:	392449e1 29241841 2004d201 49de4770     .I$9A.$)... pG.I
    b628:	18413948 d2012912 47702005 395a49da     H9A..)... pG.IZ9
    b638:	295b1841 2006d201 216b4770 1a4000c9     A.[)... pGk!..@.
    b648:	d20128da 47702007 47702008 010049d3     .(... pG. pG.I..
    b658:	03411a08 18890302 18890282 18890242     ..A.........B...
    b668:	18890202 18890182 18890102 188900c2     ................
    b678:	21011808 280004c9 1840dd02 47701500     ...!...(..@...pG
    b688:	15001a08 47704240 0080b508 28009000     ....@BpG.......(
    b698:	1e40dd01 bd08e7fa 4606b5f0 4fc048c1     ..@........F.H.O
    b6a8:	b0896841 22072500 43910412 04122205     Ah...%."...C."..
    b6b8:	60414311 684849bc 020022f9 06120a00     .CA`.IHh."......
    b6c8:	09c04310 220301c0 60484310 48b42205     .C.....".CH`.".H
    b6d8:	38080292 4ab56002 230c6990 01000900     ...8.`.J.i.#....
    b6e8:	61904318 23386888 23184398 60884318     .C.a.h8#.C.#.C.`
    b6f8:	15096910 61104308 f7ff2028 48acffc5     .i...C.a( .....H
    b708:	21096884 f0004668 49a5febf 3908466a     .h.!hF.....IjF.9
    b718:	6848e00d d5fc03c0 f7ff200a 6838ffb5     ..Hh..... ....8h
    b728:	50d000a3 68481945 d4fc03c0 2c001e64     ...PE.Hh....d..,
    b738:	489cd1ef 22076841 43910412 04522201     ...HAh."...C."R.
    b748:	60414311 6881489a f0004628 4601fe37     .CA`.H.h(F..7..F
    b758:	6b804898 d40c00c0 30404896 69806982     .H.k.....H@0.i.i
    b768:	d5030612 0e400640 e0034240 0e400640     ....@.@.@B..@.@.
    b778:	2000e000 60114a90 2e001a08 6030d000     ... .J.`......0`
    b788:	ff64f7ff bdf0b009 0280498c 02011840     ..d......I..@...
    b798:	18890182 18890142 188900c2 21011808     ....B..........!
    b7a8:	18400489 47700cc0 497eb5f0 4f7c4606     ..@...pG..~I.F|O
    b7b8:	68482500 1d3fb089 04122207 22054390     .%Hh..?.."...C."
    b7c8:	43100412 4a786048 21fb6850 0a000200     ...CH`xJPh.!....
    b7d8:	43080609 01c009c0 43082102 21056050     ...C.....!.CP`.!
    b7e8:	0289486f 60013808 69884970 0900230c     oH...8.`pI.i.#..
    b7f8:	43180100 68906188 43982338 43182318     ...C.a.h8#.C.#.C
    b808:	69086090 4310150a 48696108 20286884     .`.i...C.aiH.h( 
    b818:	ff3af7ff 46682109 fe36f000 466a4960     ..:..!hF..6.`IjF
    b828:	e00d3908 03c06848 200ad5fc ff2cf7ff     .9..Hh..... ..,.
    b838:	00a36838 194550d0 03c06848 1e64d4fc     8h...PE.Hh....d.
    b848:	d1ef2c00 68484957 04122207 43902401     .,..WIHh."...$.C
    b858:	43200464 48566048 46286881 fdaef000     d. CH`VH.h(F....
    b868:	46024955 60483980 6b814852 d40a0089     UI.F.9H`RH.k....
    b878:	01896b81 d5036b81 0dc901c9 e0034249     .k...k......IB..
    b888:	0dc901c9 2100e000 00406b80 4849d413     .......!.k@...IH
    b898:	69833040 021d6980 d5074b49 28084018     @0.i.i..IK...@.(
    b8a8:	2001d901 2000e000 e0054240 28084018     ... ... @B...@.(
    b8b8:	2001d901 2000e000 226b1a51 1a8900d2     ... ... Q.k"....
    b8c8:	00804348 18400489 18400491 0c801900     HC....@...@.....
    b8d8:	d0002e00 f7ff6030 e753ff57 2800b5fe     ....0`..W.S....(
    b8e8:	4833d076 4d376840 26024c37 d0702800     v.3H@h7M7L.&.(p.
    b8f8:	f7ffa801 4f30ff59 37409901 04096339     ....Y.0O..@79c..
    b908:	63381808 f7ff4668 6378fec7 62389800     ..8chF....xc..8b
    b918:	68034825 02002007 98014383 fe60f7ff     %H.h. ...C....`.
    b928:	18400081 392c4922 98001847 fe3cf7ff     ..@."I,9G.....<.
    b938:	491d5c38 0d400740 60084318 09c16960     8\.I@.@..C.``i..
    b948:	01c94822 221e6940 22f34390 00d29b00     "H..@i.".C."....
    b958:	42932710 2234d901 4a0de005 189a322d     .'.B..4"...J-2..
    b968:	d8032a5b 43112244 e0484338 32894a08     [*..D".C8CH..J.2
    b978:	220e189f d8012f5b e0052355 1ebf4f05     ..."[/..U#...O..
    b988:	2f8919df 2356d826 e0334319 000007ff     .../&.V#.C3.....
    b998:	fffff896 fffff9ab fffffd5d 000076a0     ........]....v..
    b9a8:	4000b1c8 4000f000 4000f400 4000b000     ...@...@...@...@
    b9b8:	10007d34 4000a000 10007f80 00003d43     4}.....@....C=..
    b9c8:	007fff00 40022a00 40020000 40020800     .....*.@...@...@
    b9d8:	e076e0a2 189a4afe d8032a5b 43112267     ..v..J..[*..g".C
    b9e8:	e007220a 325c4afa 2a5b189a 2278d804     ."...J\2..[*..x"
    b9f8:	22064311 e0024310 43112279 61614330     .C.".C..y".C0Caa
    ba08:	614849f4 68a249f4 08522000 60a20052     .IHa.I.h. R.R..`
    ba18:	4bf269e2 61e2401a 433269e2 23f361e2     .i.K.@.a.i2C.a.#
    ba28:	00db9a00 d906429a 4342220c 18574bec     .....B..."BC.KW.
    ba38:	4bec607b 4bece03f 2b5b18d3 220cd806     {`.K?..K..[+..."
    ba48:	4bea4342 607b1857 e0344be9 335c4be6     BC.KW.{`.K4..K\3
    ba58:	2b5b18d3 220cd806 4be64342 607b1857     ..[+..."BC.KW.{`
    ba68:	e0284be5 3b5c4bda 2b8918d3 220cd806     .K(..K\;...+..."
    ba78:	4be24342 607b1857 e01c4be1 18d34bd4     BC.KW.{`.K...K..
    ba88:	d8062b5b 4342220c 18574bde 4bde607b     [+..."BC.KW.{`.K
    ba98:	4bcfe011 18d2335c d8062a5b 4342220c     ...K\3..[*..."BC
    baa8:	18574bda 4bda607b 220ce005 4bd94342     .KW.{`.K..."BC.K
    bab8:	607b1857 19524bd8 1c406053 d3ae2828     W.{`.KR.S`@.((..
    bac8:	49c5e01e 20006962 01d209d2 431a2355     ...Ibi. ....U#.C
    bad8:	68a26162 00520852 69e260a2 401a4bbf     ba.hR.R..`.i.K.@
    bae8:	69e261e2 61e24332 270c4bc2 437a4602     .a.i2C.a.K.'.FzC
    baf8:	607b1857 19524fc0 1c406057 d3f42828     W.{`.OR.W`@.((..
    bb08:	43b069e0 69e061e0 43c949b4 61e04308     .i.C.a.i.I.C.C.a
    bb18:	210168a0 60a04308 2001bdfe 2300e6de     .h.!.C.`... ...#
    bb28:	68036003 d5fc041b 408b2301 431349bb     .`.h.....#.@.I.C
    bb38:	6801600b dafc2900 47704608 49b8b5f0     .`.h.)...FpG...I
    bb48:	6d0ab085 92012200 2a00680a 2800d07e     ...m."...h.*~..(
    bb58:	48b4d07c 04c06880 48b30ec4 68c09404     |..H.h.....H...h
    bb68:	0b804db2 07c04eb2 48acd02a 21071d00     .M...N..*..H...!
    bb78:	90029100 433169a9 9a0161a9 f7ff9900     .....i1C.a......
    bb88:	0847ffce 044049ab 0c40400f 69a84307     ..G..I@..@@..C.i
    bb98:	61a843b0 99009a01 f7ff9802 0846ffc0     .C.a..........F.
    bba8:	044049a4 0c40400e 0b394306 91030b30     .I@..@@..C9.0...
    bbb8:	d5001a40 02804240 fc00f000 e03c4605     @...@B.......F<.
    bbc8:	4f9d4896 90023008 90002006 217d6cc8     .H.O.0... ...l}!
    bbd8:	42880209 4f99d1db 4605e7d9 42be9404     ...B...O...F...B
    bbe8:	2c1fd203 1c64d204 2c00e002 1e64d000     ...,..d....,..d.
    bbf8:	6888498c 0212221f 02224390 608a4302     .I.h."...C"..C.`
    bc08:	f7ff2001 9a01fd41 98029900 ff87f7ff     . ..A...........
    bc18:	49880846 400e0440 43060c40 0b319803     F..I@..@@..C..1.
    bc28:	99031a08 4240d500 f0000280 2c1ffbc7     ......@B.......,
    bc38:	2c00d005 42a8d003 2805da01 42a8dccd     ...,...B...(...B
    bc48:	4978dd0a 221f6888 e0000212 4390e004     ..xI.h.".......C
    bc58:	02129a04 608a4302 bdf0b005 e76d2001     .....C.`..... m.
    bc68:	b5104b6f 33140052 461a60da 6050326c     oK..R..3.`.Fl2P`
    bc78:	28006091 d0024618 fa12f000 f000bd10     .`.(.F..........
    bc88:	bd10fc1b 2001b500 fcfef7ff b500bd00     ....... ........
    bc98:	f7ff2002 bd00fcf9 2064b500 fcf4f7ff     . ........d ....
    bca8:	b500bd00 f7ff20a0 bd00fcef b08fb5f0     ..... ..........
    bcb8:	90052000 69804862 90030e00 68804859     . ..bH.i....YH.h
    bcc8:	08c09009 495700c0 60881d80 69504a5d     ......WI...`]JPi
    bcd8:	485d900b 483f6150 68c13040 495b910a     ..]HPa?H@0.h..[I
    bce8:	210160c1 0409485a 21ff6201 31084859     .`.!ZH...b.!YH.1
    bcf8:	49596081 27016808 43389008 6008463b     .`YI.h.'..8C;F.`
    bd08:	90076890 609043b8 495469d0 40089006     .h...C.`.iTI...@
    bd18:	43082102 695061d0 08400040 48506150     .!.C.aPi@.@.PaPH
    bd28:	691460d0 08400060 21006110 60536051     .`.i`.@..a.!Q`S`
    bd38:	f7ff2001 6051fca9 f7ff2064 4825fca5     . ....Q`d ....%H
    bd48:	6a003080 0d450600 462007fe 61104330     .0.j..E... F0C.a
    bd58:	60576051 f7ff2001 6051fc97 f7ff2064     Q`W`. ....Q`d ..
    bd68:	481cfc93 6a003080 0f400600 69504305     ...H.0.j..@..CPi
    bd78:	40184b3c 4303052b 61534333 07402003     <K.@+..C3CSa. @.
    bd88:	61104320 60576051 f7ff2001 6051fc7d      C.aQ`W`. ..}.Q`
    bd98:	f7ff2064 2700fc79 463e4a0e 3280463d     d ..y..'.J>F=F.2
    bda8:	4b2b6251 62184830 f7ff20a0 2001fc6d     Qb+K0H.b. ..m.. 
    bdb8:	20a06250 fc68f7ff 62516a90 482a19c7     Pb. ..h..jQb..*H
    bdc8:	1c404b23 20026218 fc5ef7ff e04d2001     #K@..b. ..^.. M.
    bdd8:	fffffa05 40020800 40022800 feefcfff     .......@.(.@....
    bde8:	423d34af 420134af fffff8c3 423d44af     .4=B.4.B.....D=B
    bdf8:	420144af 423d55af 420155af 423d56af     .D.B.U=B.U.B.V=B
    be08:	420156af 423d67af 420167af 423d78af     .V.B.g=B.g.B.x=B
    be18:	420178af 423d79af 420179af 4000c000     .x.B.y=B.y.B...@
    be28:	10007cb4 4000f400 10040828 4000b000     .|.....@(......@
    be38:	00000200 3fff8000 018cba80 01964000     .......?.....@..
    be48:	4000a040 40020000 6a029155 0000800f     @..@...@U..j....
    be58:	40041800 40024a00 40025000 f80f8fff     ...@.J.@.P.@....
    be68:	05c62762 800fffff 0001007f 20a06250     b'..........Pb. 
    be78:	fc0af7ff 1c6d6a90 2d101986 2000d390     .....jm....-... 
    be88:	1bb96250 f0004844 4607fa99 6b804843     Pb..DH.....FCH.k
    be98:	db032800 28009803 0087d000 25004840     .(.....(....@H.%
    bea8:	4840900d 180e0069 46310480 fa86f000     ..@Hi.....1F....
    beb8:	46314a3c f0004350 4a3afa81 43504631     <J1FPC....:J1FPC
    bec8:	fa7cf000 43782101 184004c9 28ff0d00     ..|..!xC..@....(
    bed8:	20ffd900 d1002d00 210c9005 43699a0d     ... .-.....!..iC
    bee8:	6891188a 02090a09 60914301 2d281c6d     ...h.....C.`m.(-
    bef8:	482dd3d7 990b6104 4a2c6141 60119908     ..-H.a..Aa,J...`
    bf08:	21004a2b 4a2b6091 4a2b6211 60d1990a     +J.!.`+J.b+J...`
    bf18:	61c19906 99094a29 68816091 60819907     ...a)J...`.h...`
    bf28:	98054927 98056388 bdf0b00f 2800b53e     'I...c......>..(
    bf38:	2400d018 d0162804 d1132806 f7ff2001     ...$.(...(... ..
    bf48:	f000fdfd 2001f89c fcc8f7ff 90002001     ....... ..... ..
    bf58:	23049002 a11c4a1b 48209401 fab2f000     ...#.J.... H....
    bf68:	fea4f7ff 481ebd3e 491e6800 1a406809     ....>..H.h.I.h@.
    bf78:	4348491d f000491d 491dfa21 684b680a     .IHC.I..!..I.hKh
    bf88:	415c1880 604c6008 f0004814 f000f889     ..\A.`L`.H......
    bf98:	f000f84b bd3ef874 0013b800 4000a000     K...t.>........@
    bfa8:	40022800 00000962 40020000 40025000     .(.@b......@.P.@
    bfb8:	40024a00 40041800 40020840 4000f400     .J.@...@@..@...@
    bfc8:	10007fc0 1000715f 74616256 6574565f     ...._q..Vbat_Vte
    bfd8:	435f706d 62696c61 00000000 10007cc8     mp_Calib.....|..
    bfe8:	10007be0 10007c18 00000271 0007a120     .{...|..q... ...
    bff8:	10040240 492c4602 43c02000 e0046809     @....F,I. .C.h..
    c008:	d101428a 47702000 29006989 4770d1f8     .B... pG.i.)..pG
    c018:	4604b510 4608460b ffecf7ff d0022800     ...F.F.F.....(..
    c028:	61986820 bd106023 4e1fb5f8 462f2500      h.a#`.....N.%/F
    c038:	e0216830 69844a1d 68136881 1a596852     0h!..J.i.h.hRhY.
    c048:	d31741ba 29007901 4b18d00c 681968c2     .A...y.)...K.h.h
    c058:	1851685b 60814605 29006901 6940d00b     [hQ..F.`.i.)..@i
    c068:	e0084788 42816831 6034d101 61ace000     .G..1h.B..4`...a
    c078:	e7f16187 46204605 d1db2800 b510bdf8     .a...F F.(......
    c088:	6800480b 480b0841 61411e49 2207490a     .H.hA..HI.Aa.I."
    c098:	021c69cb 23000a24 618361cc bd106102     .i..$..#.a.a.a..
    c0a8:	48014601 0000e7b4 1004021c 10040240     .F.H........@...
    c0b8:	10007cb0 e000e000 e000ed04 4801b403     .|.............H
    c0c8:	bd019001 0001a2f9 4801b403 bd019001     ...........H....
    c0d8:	00019fe9 4801b403 bd019001 0001de29     .......H....)...
    c0e8:	4801b403 bd019001 0001a251 4801b403     ...H....Q......H
    c0f8:	bd019001 0001de5b 4801b403 bd019001     ....[......H....
    c108:	0001de17 4801b403 bd019001 0001bb9d     .......H........
    c118:	4801b403 bd019001 0001bf11 4801b403     ...H...........H
    c128:	bd019001 0001d0ad 4801b403 bd019001     ...........H....
    c138:	0001bb9f 4801b403 bd019001 0001bfd5     .......H........
    c148:	4801b403 bd019001 0001bdd1 4801b403     ...H...........H
    c158:	bd019001 00019c6d 4801b403 bd019001     ....m......H....
    c168:	0001bb7d 4801b403 bd019001 0001dbdd     }......H........
    c178:	4801b403 bd019001 00000215 4801b403     ...H...........H
    c188:	bd019001 0001b83b 4801b403 bd019001     ....;......H....
    c198:	0001dc5b 4801b403 bd019001 0001cf37     [......H....7...
    c1a8:	4801b403 bd019001 0001d6f5 4801b403     ...H...........H
    c1b8:	bd019001 0001b7fb 4801b403 bd019001     ...........H....
    c1c8:	00000b15 4801b403 bd019001 0001bdd5     .......H........
    c1d8:	4801b403 bd019001 0001d4d1 4801b403     ...H...........H
    c1e8:	bd019001 0001d4ed 4801b403 bd019001     ...........H....
    c1f8:	0001cffb 4801b403 bd019001 00000ab7     .......H........
    c208:	4801b403 bd019001 00000e17 4801b403     ...H...........H
    c218:	bd019001 000000d5 4801b403 bd019001     ...........H....
    c228:	0001cdbf 4801b403 bd019001 000011e3     .......H........
    c238:	4801b403 bd019001 00012edd 4801b403     ...H...........H
    c248:	bd019001 00006685 4801b403 bd019001     .....f.....H....
    c258:	00006651 4801b403 bd019001 00012faf     Qf.....H...../..
    c268:	4801b403 bd019001 00006647 4801b403     ...H....Gf.....H
    c278:	bd019001 00005081 4801b403 bd019001     .....P.....H....
    c288:	0001ba01 4801b403 bd019001 000131af     .......H.....1..
    c298:	4801b403 bd019001 00005df3 4801b403     ...H.....].....H
    c2a8:	bd019001 000082af 4801b403 bd019001     ...........H....
    c2b8:	0000533d 4801b403 bd019001 000190bf     =S.....H........
    c2c8:	4801b403 bd019001 00018bdb 4801b403     ...H...........H
    c2d8:	bd019001 0001a27d 4801b403 bd019001     ....}......H....
    c2e8:	0001a0b1 4801b403 bd019001 00019ab5     .......H........
    c2f8:	4801b403 bd019001 000197fd 4801b403     ...H...........H
    c308:	bd019001 00019a65 4801b403 bd019001     ....e......H....
    c318:	0001de8b 4801b403 bd019001 00019af1     .......H........
    c328:	4801b403 bd019001 00019a85 4801b403     ...H...........H
    c338:	bd019001 00019a45 4801b403 bd019001     ....E......H....
    c348:	0001bfd9 4801b403 bd019001 00019b05     .......H........
    c358:	4801b403 bd019001 00019a9f 4801b403     ...H...........H
    c368:	bd019001 00019ca1 4801b403 bd019001     ...........H....
    c378:	00019f09 4801b403 bd019001 00019095     .......H........
    c388:	4801b403 bd019001 00019711 4801b403     ...H...........H
    c398:	bd019001 0001a2a1 4801b403 bd019001     ...........H....
    c3a8:	0001d577 4801b403 bd019001 00019c81     w......H........
    c3b8:	4801b403 bd019001 0001dd01 4801b403     ...H...........H
    c3c8:	bd019001 0001dcd5 4801b403 bd019001     ...........H....
    c3d8:	0001b2a7 4801b403 bd019001 00019c47     .......H....G...
    c3e8:	4801b403 bd019001 0001b731 4801b403     ...H....1......H
    c3f8:	bd019001 0001a543 4801b403 bd019001     ....C......H....
    c408:	00001399 4801b403 bd019001 000131d3     .......H.....1..
    c418:	4801b403 bd019001 000196d1 4801b403     ...H...........H
    c428:	bd019001 0001c9db 4801b403 bd019001     ...........H....
    c438:	0001c93d 4801b403 bd019001 00006839     =......H....9h..
    c448:	4801b403 bd019001 0001cc03 4801b403     ...H...........H
    c458:	bd019001 0001e283 4801b403 bd019001     ...........H....
    c468:	00006a2d 4801b403 bd019001 0001c9ff     -j.....H........
    c478:	4801b403 bd019001 00006a01 4801b403     ...H.....j.....H
    c488:	bd019001 0001c999 4801b403 bd019001     ...........H....
    c498:	0001de5b 4801b403 bd019001 0001d25b     [......H....[...
    c4a8:	4801b403 bd019001 000007bd 4801b403     ...H...........H
    c4b8:	bd019001 000007d7 4801b403 bd019001     ...........H....
    c4c8:	0001d751 4801b403 bd019001 0001d6fd     Q......H........
    c4d8:	27100000 00000000 10007ba8 100400d8     ...'.....{......
    c4e8:	00010001 00000805 00019685 00000300     ................
    c4f8:	10005c0d 00000301 000192f7 00000302     .\..............
    c508:	00019379 00000303 000193a3 00000304     y...............
    c518:	000193d5 0000030a 00019403 00000305     ................
    c528:	0001947f 0000030f 000194b1 00000312     ................
    c538:	000194e5 00000313 00019535 00000314     ........5.......
    c548:	0001956b 00000315 000195ab 00000316     k...............
    c558:	000195f1 00000317 0001963b 00000318     ........;.......
    c568:	0001942b 10007b28 00000010 0001befb     +...({..........
    c578:	100066ff 0001bef3 0001bef5 0001d099     .f..............
    c588:	100069f1 0001d0fd 0001d0ff 00000000     .i..............
    c598:	00000004 00000001 00000000 00000000     ................
    c5a8:	00010001 00000000 00000000 00000000     ................
	...
    c5d8:	00000011 00000000 00000000 00000000     ................
    c5e8:	00000c13 10005185 00000e0b 100051ff     .....Q.......Q..
	...
    c600:	10007c24 00000002 10007c34 10007c3c     $|......4|..<|..
    c610:	10007c54 00080001 00000000 00000000     T|..............
    c620:	00003800 100052e1 00003801 100052f5     .8...R...8...R..
    c630:	00003802 1000533f 00000000 00000000     .8..?S..........
    c640:	10007c5c 00000003 00000000 10007c7c     \|..........||..
    c650:	10007c94 00080001 00000000 00000000     .|..............
    c660:	00000101 00000000 0001cccb 0000002f     ............/...
    c670:	00000000 018cba80 00000001 00000000     ................
    c680:	0bb80fa0 00000000 00000000 00000000     ................
	...
    c6cc:	05050505 05050505 05050505 04050505     ................
    c6dc:	04040404 04040404 03030304 02020303     ................
    c6ec:	01020202 01010101 00000000 00000000     ................
    c6fc:	00000001 00000002 00000043              ........C...

0000c708 <_global_impure_ptr>:
    c708:	20000034                                4.. 

0000c70c <__sf_fake_stdin>:
	...

0000c72c <__sf_fake_stdout>:
	...

0000c74c <__sf_fake_stderr>:
	...
    c76c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c77c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c78c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c79c:	00006665                                ef..

0000c7a0 <_init>:
    c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7a2:	46c0      	nop			; (mov r8, r8)
    c7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c7a6:	bc08      	pop	{r3}
    c7a8:	469e      	mov	lr, r3
    c7aa:	4770      	bx	lr

0000c7ac <__init_array_start>:
    c7ac:	000000dd 	.word	0x000000dd

0000c7b0 <_fini>:
    c7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7b2:	46c0      	nop			; (mov r8, r8)
    c7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c7b6:	bc08      	pop	{r3}
    c7b8:	469e      	mov	lr, r3
    c7ba:	4770      	bx	lr

0000c7bc <__fini_array_start>:
    c7bc:	000000b5 	.word	0x000000b5
